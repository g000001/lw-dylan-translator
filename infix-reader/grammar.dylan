Module:   infix-reader
Language: prefix-dylan
Copyright:    Original Code is Copyright (c) 1995-2004 Functional Objects, Inc.
              All rights reserved.
License:      Functional Objects Library Public License Version 1.0
Dual-license: GNU Lesser General Public License
Warranty:     Distributed WITHOUT WARRANTY OF ANY KIND

;; Generated code!!

(begin
 (define-lambda |infix-dylan-parser-ACTION0| ($1) (declare (ignore $1))
  $1)
 (define-lambda |infix-dylan-parser-ACTION8| ($1) (declare (ignore $1)))
 (define-lambda |infix-dylan-parser-ACTION10| ($1 $2)
  (declare (ignore $1 $2)) (body-fragment :constituents $1))
 (define-lambda |infix-dylan-parser-ACTION14| ($1 $2 $3)
  (declare (ignore $1 $2 $3)))
 (define-lambda |infix-dylan-parser-ACTION15| nil (declare (ignore))
  (property-list-fragment :items (quote nil)))
 (define-lambda |infix-dylan-parser-ACTION17| ($1)
  (declare (ignore $1)) (property-list-fragment :items $1))
 (define-lambda |infix-dylan-parser-ACTION18| nil (declare (ignore))
  (quote nil))
 (define-lambda |infix-dylan-parser-ACTION20| ($1 $2 $3)
  (declare (ignore $1 $2 $3)) (quasi-quote ((unquote $2) (unquote $3))))
 (define-lambda |infix-dylan-parser-ACTION22| ($1 $2 $3)
  (declare (ignore $1 $2 $3)) $2)
 (define-lambda |infix-dylan-parser-ACTION26| ($1 $2 $3)
  (declare (ignore $1 $2 $3))
  (quasi-quote ((unquote $1) => (unquote $3))))
 (define-lambda |infix-dylan-parser-ACTION29| ($1 $2 $3)
  (declare (ignore $1 $2 $3))
  (property-list-fragment :items
   (quasi-quote ((unquote $1) (unquote $2) (unquote-splicing $3)))))
 (define-lambda |infix-dylan-parser-ACTION31| ($1 $2 $3 $4)
  (declare (ignore $1 $2 $3 $4))
  (quasi-quote
   ((unquote (infix-defining-macro-name $3 :modifiers $2)) (unquote $2)
    (unquote-splicing $4))))
 (define-lambda |infix-dylan-parser-ACTION34| ($1 $2 $3 $4)
  (declare (ignore $1 $2 $3 $4))
  (quasi-quote
   ((unquote (infix-defining-macro-name $3 :modifiers $2)) (unquote $2)
    (unquote-splicing (first $4)) (unquote (second $4)))))
 (define-lambda |infix-dylan-parser-ACTION37| ($1)
  (declare (ignore $1)) (modifiers-fragment :items $1))
 (define-lambda |infix-dylan-parser-ACTION39| ($1)
  (declare (ignore $1)) 'method)
 (define-lambda |infix-dylan-parser-ACTION41| ($1)
  (declare (ignore $1)) 'generic)
 (define-lambda |infix-dylan-parser-ACTION43| ($1 $2 $3 $4 $5)
  (declare (ignore $1 $2 $3 $4 $5))
  (quasi-quote ((unquote $1) (unquote-splicing $2))))
 (define-lambda |infix-dylan-parser-ACTION44| ($1 $2 $3)
  (declare (ignore $1 $2 $3))
  (quasi-quote
   ((unquote $1) (unquote-splicing $2) (unquote-splicing $3))))
 (define-lambda |infix-dylan-parser-ACTION45| ($1 $2 $3 $4)
  (declare (ignore $1 $2 $3 $4))
  (quasi-quote
   ((unquote $1)
    (unquote-splicing (if $2 (quasi-quote ((unquote $2))) (quote nil)))
    (unquote-splicing $3))))
 (define-lambda |infix-dylan-parser-ACTION47| ($1 $2)
  (declare (ignore $1 $2)))
 (define-lambda |infix-dylan-parser-ACTION49| nil (declare (ignore)))
 (define-lambda |infix-dylan-parser-ACTION51| nil (declare (ignore)) #f)
 (define-lambda |infix-dylan-parser-ACTION54| nil (declare (ignore))
  (quasi-quote nil))
 (define-lambda |infix-dylan-parser-ACTION58| ($1 $2)
  (declare (ignore $1 $2)) $1)
 (define-lambda |infix-dylan-parser-ACTION59| ($1 $2 $3)
  (declare (ignore $1 $2 $3))
  (quasi-quote
   ((unquote-splicing $1) (unquote-splicing $2) (unquote-splicing $3))))
 (define-lambda |infix-dylan-parser-ACTION60| ($1 $2 $3 $4)
  (declare (ignore $1 $2 $3 $4))
  (quasi-quote
   ((unquote-splicing $1) ((unquote-splicing $2) (unquote $3))
    (unquote-splicing $4))))
 (define-lambda |infix-dylan-parser-ACTION61| ($1 $2 $3 $4)
  (declare (ignore $1 $2 $3 $4))
  (quasi-quote
   ((unquote-splicing $1)
    (((unquote-splicing $2)) (unquote-splicing $3))
    (unquote-splicing $4))))
 (define-lambda |infix-dylan-parser-ACTION62| ($1 $2 $3 $4 $5)
  (declare (ignore $1 $2 $3 $4 $5))
  (quasi-quote
   ((unquote-splicing $1)
    (((unquote-splicing $2) (unquote $3)) (unquote-splicing $4))
    (unquote-splicing $5))))
 (define-lambda |infix-dylan-parser-ACTION67| ($1 $2 $3 $4 $5 $6 $7)
  (declare (ignore $1 $2 $3 $4 $5 $6 $7))
  (quasi-quote (seal-generic (unquote $2) (unquote $4) (unquote $6))))
 (define-lambda |infix-dylan-parser-ACTION70| ($1 $2)
  (declare (ignore $1 $2)) (make-bind-marker :bindings $2))
 (define-lambda |infix-dylan-parser-ACTION71| ($1 $2 $3 $4 $5)
  (declare (ignore $1 $2 $3 $4 $5))
  (make-bind-handler-marker :exception $3 :expression $5))
 (define-lambda |infix-dylan-parser-ACTION72| ($1 $2)
  (declare (ignore $1 $2)) (make-local-marker :methods $2))
 (define-lambda |infix-dylan-parser-ACTION73| ($1 $2)
  (declare (ignore $1 $2))
  (make-local-macro-marker :name $1 :fragment $2))
 (define-lambda |infix-dylan-parser-ACTION74| ($1)
  (declare (ignore $1)) (quasi-quote ((unquote $1))))
 (define-lambda |infix-dylan-parser-ACTION75| ($1 $2 $3 $4)
  (declare (ignore $1 $2 $3 $4))
  (quasi-quote ((unquote $2) (unquote-splicing $3))))
 (define-lambda |infix-dylan-parser-ACTION77| ($1 $2)
  (declare (ignore $1 $2)) $2)
 (define-lambda |infix-dylan-parser-ACTION78| ($1 $2 $3)
  (declare (ignore $1 $2 $3)) (list $1 $3))
 (define-lambda |infix-dylan-parser-ACTION79| ($1 $2 $3 $4 $5)
  (declare (ignore $1 $2 $3 $4 $5)) (list $2 $5))
 (define-lambda |infix-dylan-parser-ACTION80| ($1 $2)
  (declare (ignore $1 $2)) (quasi-quote (&rest (unquote $2))))
 (define-lambda |infix-dylan-parser-ACTION82| ($1 $2 $3)
  (declare (ignore $1 $2 $3))
  (quasi-quote ((unquote $1) (unquote-splicing $3))))
 (define-lambda |infix-dylan-parser-ACTION86| ($1 $2)
  (declare (ignore $1 $2)) (quasi-quote ((unquote $1) (unquote $2))))
 (define-lambda |infix-dylan-parser-ACTION91| ($1)
  (declare (ignore $1)) (name-fragment :name $1))
 (define-lambda |infix-dylan-parser-ACTION101| ($1)
  (declare (ignore $1)) (expression-fragment :series $1))
 (define-lambda |infix-dylan-parser-ACTION104| ($1 $2 $3)
  (declare (ignore $1 $2 $3))
  (quasi-quote ((unquote $1) (unquote $2) (unquote-splicing $3))))
 (define-lambda |infix-dylan-parser-ACTION109| ($1 $2 $3 $4 $5)
  (declare (ignore $1 $2 $3 $4 $5))
  (quasi-quote (:locations (unquote $2) (unquote-splicing $4))))
 (define-lambda |infix-dylan-parser-ACTION111| ($1)
  (declare (ignore $1)) 'negative)
 (define-lambda |infix-dylan-parser-ACTION112| ($1)
  (declare (ignore $1)) '~)
 (define-lambda |infix-dylan-parser-ACTION113| ($1)
  (declare (ignore $1)) (convert-binop $1))
 (define-lambda |infix-dylan-parser-ACTION114| ($1)
  (declare (ignore $1)) '-)
 (define-lambda |infix-dylan-parser-ACTION115| ($1)
  (declare (ignore $1)) (convert-binop '=))
 (define-lambda |infix-dylan-parser-ACTION116| ($1)
  (declare (ignore $1)) '==)
 (define-lambda |infix-dylan-parser-ACTION117| ($1)
  (declare (ignore $1)) 'set!)
 (define-lambda |infix-dylan-parser-ACTION118| ($1 $2 $3 $4)
  (declare (ignore $1 $2 $3 $4))
  (call-fragment :function $1 :arguments $3))
 (define-lambda |infix-dylan-parser-ACTION119| ($1 $2 $3 $4)
  (declare (ignore $1 $2 $3 $4))
  (if (= (size $3) 1)
      (quasi-quote (element (unquote $1) (unquote-splicing $3)))
      (quasi-quote (aref (unquote $1) (unquote-splicing $3)))))
 (define-lambda |infix-dylan-parser-ACTION120| ($1 $2 $3)
  (declare (ignore $1 $2 $3))
  (quasi-quote ((unquote (make-getter-name $3)) (unquote $1))))
 (define-lambda |infix-dylan-parser-ACTION123| ($1 $2 $3 $4)
  (declare (ignore $1 $2 $3 $4))
  (fragment-function-call-fragment :word $1 :fragment $3))
 (define-lambda |infix-dylan-parser-ACTION127| ($1)
  (declare (ignore $1))
  (select $1 instance? ((<string> <integer> <boolean>) $1)
   (:else (if (keyword? $1) $1 (quasi-quote '(unquote $1))))))
 (define-lambda |infix-dylan-parser-ACTION134| ($1)
  (declare (ignore $1)) #t)
 (define-lambda |infix-dylan-parser-ACTION135| ($1)
  (declare (ignore $1)) #f)
 (define-lambda |infix-dylan-parser-ACTION136| ($1 $2 $3 $4 $5)
  (declare (ignore $1 $2 $3 $4 $5)) (concatenate-atom $2 $4))
 (define-lambda |infix-dylan-parser-ACTION138| ($1 $2 $3)
  (declare (ignore $1 $2 $3)) (as <vector> $2))
 (define-lambda |infix-dylan-parser-ACTION142| ($1 $2 $3)
  (declare (ignore $1 $2 $3))
  (clauses-statement-fragment :word (word $1) :begin-clause $1 :body
   (first $2) :clause-body (second $2)))
 (define-lambda |infix-dylan-parser-ACTION143| ($1 $2 $3)
  (declare (ignore $1 $2 $3))
  (cases-statement-fragment :word (word $1) :begin-clause $1 :case-body
   $2))
 (define-lambda |infix-dylan-parser-ACTION144| ($1 $2 $3)
  (declare (ignore $1 $2 $3))
  (details-begin-clause-fragment :word $1 :variable-name $2
   :detail-info $3))
 (define-lambda |infix-dylan-parser-ACTION145| ($1 $2 $3 $4 $5 $6)
  (declare (ignore $1 $2 $3 $4 $5 $6))
  (expr-begin-clause-fragment :word $1 :variable-name $2 :expression $4
   :detail-clauses $5))
 (define-lambda |infix-dylan-parser-ACTION146| ($1)
  (declare (ignore $1)) (simple-begin-clause-fragment :word $1))
 (define-lambda |infix-dylan-parser-ACTION147| nil (declare (ignore))
  (quasi-quote
   ((unquote (body-fragment :constituents (quote nil)))
    (unquote (clause-body-fragment :clauses (quote nil))))))
 (define-lambda |infix-dylan-parser-ACTION149| ($1 $2)
  (declare (ignore $1 $2))
  (quasi-quote
   ((unquote $1) (unquote (clause-body-fragment :clauses $2)))))
 (define-lambda |infix-dylan-parser-ACTION150| ($1)
  (declare (ignore $1))
  (quasi-quote
   ((unquote (body-fragment :constituents (quote nil)))
    (unquote (clause-body-fragment :clauses $1)))))
 (define-lambda |infix-dylan-parser-ACTION153| ($1)
  (declare (ignore $1)) (intermediate-clauses-fragment :clauses $1))
 (define-lambda |infix-dylan-parser-ACTION154| ($1 $2)
  (declare (ignore $1 $2))
  (quasi-quote
   ((unquote (clause-with-body-fragment :clause $1 :body $2)))))
 (define-lambda |infix-dylan-parser-ACTION155| ($1 $2 $3)
  (declare (ignore $1 $2 $3))
  (quasi-quote
   ((unquote-splicing $1)
    (unquote (clause-with-body-fragment :clause $2 :body $3)))))
 (define-lambda |infix-dylan-parser-ACTION156| ($1 $2 $3 $4)
  (declare (ignore $1 $2 $3 $4))
  (details-intermediate-clause-fragment :word $1 :variable-name $2
   :detail-info $3))
 (define-lambda |infix-dylan-parser-ACTION157| ($1 $2 $3 $4 $5 $6 $7)
  (declare (ignore $1 $2 $3 $4 $5 $6 $7))
  (expr-intermediate-clause-fragment :word $1 :variable-name $2
   :expression $4 :detail-clauses $5))
 (define-lambda |infix-dylan-parser-ACTION158| ($1)
  (declare (ignore $1)) (simple-intermediate-clause-fragment :word $1))
 (define-lambda |infix-dylan-parser-ACTION163| ($1)
  (declare (ignore $1)) (case-body-fragment :cases $1))
 (define-lambda |infix-dylan-parser-ACTION164| nil (declare (ignore))
  (case-body-fragment :cases (quote nil)))
 (define-lambda |infix-dylan-parser-ACTION166| ($1 $2)
  (declare (ignore $1 $2))
  (bind ((case/case-label $1) (case-body/cases $2))
        (quasi-quote
         ((unquote (first case/case-label))
          ((unquote (second case/case-label))
           (unquote (first case-body/cases)))
          (unquote-splicing (second case-body/cases))))))
 (define-lambda |infix-dylan-parser-ACTION168| ($1 $2 $3)
  (declare (ignore $1 $2 $3))
  (quasi-quote (((unquote $1) (begin)) (unquote $3))))
 (define-lambda |infix-dylan-parser-ACTION169| ($1 $2 $3 $4)
  (declare (ignore $1 $2 $3 $4))
  (quasi-quote
   (((unquote $1) (unquote (rewrite-parsed-body $2))) (unquote $4))))
 (define-lambda |infix-dylan-parser-ACTION170| ($1)
  (declare (ignore $1)) (quasi-quote ((unquote $1) nil)))
 (define-lambda |infix-dylan-parser-ACTION171| ($1 $2)
  (declare (ignore $1 $2)) (quasi-quote ((begin) (unquote $2))))
 (define-lambda |infix-dylan-parser-ACTION172| ($1 $2 $3)
  (declare (ignore $1 $2 $3))
  (quasi-quote ((unquote (rewrite-parsed-body $1)) (unquote $3))))
 (define-lambda |infix-dylan-parser-ACTION175| ($1)
  (declare (ignore $1)) (quasi-quote (begin)))
 (define-lambda |infix-dylan-parser-ACTION177| ($1 $2 $3 $4 $5 $6)
  (declare (ignore $1 $2 $3 $4 $5 $6))
  (quasi-quote ((unquote $2) (unquote-splicing $4))))
 (define-lambda |infix-dylan-parser-ACTION178| ($1 $2)
  (declare (ignore $1 $2)) 'otherwise)
 (define-lambda |infix-dylan-parser-ACTION179| ($1 $2 $3)
  (declare (ignore $1 $2 $3)) (detail-info-fragment :detail-list $2))
 (define-lambda |infix-dylan-parser-ACTION182| ($1 $2)
  (declare (ignore $1 $2))
  (detail-list-with-properties-fragment :details $1 :property-list $2))
 (define-lambda |infix-dylan-parser-ACTION183| ($1)
  (declare (ignore $1))
  (detail-list-with-properties-fragment :details (quote nil)
   :property-list $1))
 (define-lambda |infix-dylan-parser-ACTION184| ($1 $2 $3 $4)
  (declare (ignore $1 $2 $3 $4))
  (detail-list-with-begin-word-fragment :details $1 :word $3
   :expression $4))
 (define-lambda |infix-dylan-parser-ACTION186| ($1 $2 $3)
  (declare (ignore $1 $2 $3))
  (quasi-quote ((unquote-splicing $1) (unquote $3))))
 (define-lambda |infix-dylan-parser-ACTION187| ($1 $2)
  (declare (ignore $1 $2))
  (detail-fragment :variables $1 :first-detail-clause #f
   :detail-clauses $2))
 (define-lambda |infix-dylan-parser-ACTION188| ($1 $2 $3 $4)
  (declare (ignore $1 $2 $3 $4))
  (detail-fragment :variables $1 :first-detail-clause
   (detail-clause-fragment :symbol (name-fragment :name '=) :expression
    $3)
   :detail-clauses $4))
 (define-lambda |infix-dylan-parser-ACTION189| ($1 $2 $3 $4)
  (declare (ignore $1 $2 $3 $4))
  (detail-fragment :variables $2 :first-detail-clause #f
   :detail-clauses $4))
 (define-lambda |infix-dylan-parser-ACTION190| ($1 $2 $3 $4 $5 $6)
  (declare (ignore $1 $2 $3 $4 $5 $6))
  (detail-fragment :variables $2 :first-detail-clause
   (detail-clause-fragment :symbol (name-fragment :name '=) :expression
    $5)
   :detail-clauses $6))
 (define-lambda |infix-dylan-parser-ACTION191| nil (declare (ignore))
  (detail-clauses-fragment :clauses (quote nil)))
 (define-lambda |infix-dylan-parser-ACTION193| ($1)
  (declare (ignore $1)) (detail-clauses-fragment :clauses $1))
 (define-lambda |infix-dylan-parser-ACTION195| ($1 $2)
  (declare (ignore $1 $2))
  (quasi-quote ((unquote-splicing $1) (unquote $2))))
 (define-lambda |infix-dylan-parser-ACTION196| ($1 $2)
  (declare (ignore $1 $2))
  (detail-clause-fragment :symbol (name-fragment :name $1) :expression
   $2))
 (define-lambda |infix-dylan-parser-ACTION199| ($1 $2 $3 $4)
  (declare (ignore $1 $2 $3 $4))
  (quasi-quote (method (unquote-splicing $2))))
 (define-lambda |infix-dylan-parser-ACTION201| ($1 $2 $3 $4 $5)
  (declare (ignore $1 $2 $3 $4 $5))
  (quasi-quote
   (((unquote-splicing $2) &return-types (unquote-splicing $4))
    (unquote $5))))
 (define-lambda |infix-dylan-parser-ACTION202| ($1 $2 $3 $4)
  (declare (ignore $1 $2 $3 $4))
  (quasi-quote
   (((unquote-splicing $2) &return-types (unquote-splicing $4)))))
 (define-lambda |infix-dylan-parser-ACTION206| ($1 $2 $3)
  (declare (ignore $1 $2 $3))
  (quasi-quote ((unquote-splicing $1) (unquote-splicing $3))))
 (define-lambda |infix-dylan-parser-ACTION210| ($1)
  (declare (ignore $1)) (quasi-quote ((unquote $1) <object>)))
 (define-lambda |infix-dylan-parser-ACTION211| ($1 $2 $3)
  (declare (ignore $1 $2 $3)) (quasi-quote ((unquote $1) (unquote $3))))
 (define-lambda |infix-dylan-parser-ACTION212| ($1 $2 $3)
  (declare (ignore $1 $2 $3))
  (quasi-quote ((unquote $1) (singleton (unquote $3)))))
 (define-lambda |infix-dylan-parser-ACTION216| ($1 $2)
  (declare (ignore $1 $2)) (quasi-quote (&next (unquote $2))))
 (define-lambda |infix-dylan-parser-ACTION221| ($1)
  (declare (ignore $1)) '(&key))
 (define-lambda |infix-dylan-parser-ACTION222| ($1 $2 $3)
  (declare (ignore $1 $2 $3)) '(&key &all-keys))
 (define-lambda |infix-dylan-parser-ACTION223| ($1)
  (declare (ignore $1)) '(&all-keys))
 (define-lambda |infix-dylan-parser-ACTION224| ($1 $2)
  (declare (ignore $1 $2)) (quasi-quote (&key (unquote-splicing $2))))
 (define-lambda |infix-dylan-parser-ACTION225| ($1 $2 $3 $4)
  (declare (ignore $1 $2 $3 $4))
  (quasi-quote (&key (unquote-splicing $2) &all-keys)))
 (define-lambda |infix-dylan-parser-ACTION228| ($1 $2)
  (declare (ignore $1 $2))
  (if $2 (quasi-quote ((unquote-splicing $1) (unquote-splicing $2))) $1))
 (define-lambda |infix-dylan-parser-ACTION232| ($1 $2 $3 $4)
  (declare (ignore $1 $2 $3 $4))
  (quasi-quote ((unquote $1) (unquote $2))))
 (define-lambda |infix-dylan-parser-ACTION233| ($1 $2 $3)
  (declare (ignore $1 $2 $3))
  (quasi-quote ((unquote $1) (unquote (as <symbol> (as <string> $1))))))
 (define-lambda |infix-dylan-parser-ACTION234| ($1 $2 $3)
  (declare (ignore $1 $2 $3)) (quasi-quote ((unquote $1))))
 (define-lambda |infix-dylan-parser-ACTION236| ($1)
  (declare (ignore $1))
  (quasi-quote ((unquote $1) (unquote (as <symbol> (as <string> $1))))))
 (define-lambda |infix-dylan-parser-ACTION240| ($1 $2)
  (declare (ignore $1 $2)) (quasi-quote ((unquote $2))))
 (define-lambda |infix-dylan-parser-ACTION241| nil (declare (ignore))
  '(&rest x))
 (define-lambda |infix-dylan-parser-ACTION243| ($1)
  (declare (ignore $1)) (quote nil))
 (define-lambda |infix-dylan-parser-ACTION244| ($1 $2 $3)
  (declare (ignore $1 $2 $3)) (quasi-quote ((unquote $2))))
 (define-lambda |infix-dylan-parser-ACTION245| ($1 $2 $3 $4 $5)
  (declare (ignore $1 $2 $3 $4 $5)) $3)
 (define-lambda |infix-dylan-parser-ACTION249| ($1 $2 $3 $4)
  (declare (ignore $1 $2 $3 $4)) $3)
 (define-lambda |infix-dylan-parser-ACTION256| nil (declare (ignore))
  (quasi-quote (begin)))
 (define-lambda |infix-dylan-parser-ACTION273| ($1 $2 $3 $4)
  (declare (ignore $1 $2 $3 $4)) (pair (concatenate $1 $4) $3))
 (define-lambda |infix-dylan-parser-ACTION274| ($1)
  (declare (ignore $1)) (pair $1 #f))
 (define-lambda |infix-dylan-parser-ACTION283| ($1 $2 $3)
  (declare (ignore $1 $2 $3))
  (fragment-statement-fragment :word $1 :fragment $2))
 (define-lambda |infix-dylan-parser-ACTION288| ($1 $2 $3 $4 $5)
  (declare (ignore $1 $2 $3 $4 $5))
  (fragment-defining-form-fragment :word $3 :modifiers $2 :fragment $4))
 (define-lambda |infix-dylan-parser-ACTION289| ($1 $2 $3 $4)
  (declare (ignore $1 $2 $3 $4))
  (fragment-defining-form-fragment :word $3 :modifiers $2 :fragment
   (sequence-fragment :fragments $4)))
 (define-lambda |infix-dylan-parser-ACTION290| nil (declare (ignore))
  (sequence-fragment :fragments (quote nil)))
 (define-lambda |infix-dylan-parser-ACTION292| ($1)
  (declare (ignore $1)) (sequence-fragment :fragments $1))
 (define-lambda |infix-dylan-parser-ACTION296| ($1 $2 $3)
  (declare (ignore $1 $2 $3))
  (quasi-quote
   ((unquote-splicing $1) (unquote *semicolon*) (unquote-splicing $3))))
 (define-lambda |infix-dylan-parser-ACTION300| ($1)
  (declare (ignore $1))
  (quasi-quote
   ((unquote
     (parsed-fragment :token-class :parsed-defining-form :token-value
      $1)))))
 (define-lambda |infix-dylan-parser-ACTION301| ($1 $2)
  (declare (ignore $1 $2))
  (quasi-quote
   ((unquote-splicing $1)
    (unquote
     (parsed-fragment :token-class :parsed-defining-form :token-value
      $2)))))
 (define-lambda |infix-dylan-parser-ACTION302| ($1)
  (declare (ignore $1))
  (quasi-quote
   ((unquote
     (parsed-fragment :token-class :parsed-local-declaration
      :token-value $1)))))
 (define-lambda |infix-dylan-parser-ACTION303| ($1 $2)
  (declare (ignore $1 $2))
  (quasi-quote
   ((unquote-splicing $1)
    (unquote
     (parsed-fragment :token-class :parsed-local-declaration
      :token-value $2)))))
 (define-lambda |infix-dylan-parser-ACTION305| ($1 $2 $3)
  (declare (ignore $1 $2 $3))
  (quasi-quote
   ((unquote-splicing $1) (unquote *comma*) (unquote-splicing $3))))
 (define-lambda |infix-dylan-parser-ACTION310| ($1 $2)
  (declare (ignore $1 $2))
  (quasi-quote
   ((unquote
     (parsed-fragment :token-class :parsed-statement :token-value $1))
    (unquote-splicing $2))))
 (define-lambda |infix-dylan-parser-ACTION316| ($1 $2)
  (declare (ignore $1 $2))
  (quasi-quote ((unquote $1) (unquote-splicing $2))))
 (define-lambda |infix-dylan-parser-ACTION320| ($1 $2 $3)
  (declare (ignore $1 $2 $3)) (bracketed-fragment :fragments $2))
 (define-lambda |infix-dylan-parser-ACTION321| ($1 $2 $3)
  (declare (ignore $1 $2 $3)) (sbracketed-fragment :fragments $2))
 (define-lambda |infix-dylan-parser-ACTION322| ($1 $2 $3)
  (declare (ignore $1 $2 $3)) (cbracketed-fragment :fragments $2))
 (define-lambda |infix-dylan-parser-ACTION323| ($1 $2 $3 $4)
  (declare (ignore $1 $2 $3 $4)) (cbracketed-fragment :fragments $2))
 (define-lambda |infix-dylan-parser-ACTION324| ($1)
  (declare (ignore $1))
  (parsed-fragment :token-class :parsed-expression :token-value $1))
 (define-lambda |infix-dylan-parser-ACTION325| ($1)
  (declare (ignore $1))
  (literal-fragment :object (as <symbol> ".") :token-class '<dot>
   :token-value $1))
 (define-lambda |infix-dylan-parser-ACTION326| ($1)
  (declare (ignore $1))
  (literal-fragment :object '&next :token-class ':&next :token-value $1))
 (define-lambda |infix-dylan-parser-ACTION327| ($1)
  (declare (ignore $1))
  (literal-fragment :object '&rest :token-class ':&rest :token-value $1))
 (define-lambda |infix-dylan-parser-ACTION328| ($1)
  (declare (ignore $1))
  (literal-fragment :object '&key :token-class ':&key :token-value $1))
 (define-lambda |infix-dylan-parser-ACTION329| ($1)
  (declare (ignore $1))
  (literal-fragment :object '&all-keys :token-class ':&all-keys
   :token-value $1))
 (define-lambda |infix-dylan-parser-ACTION330| ($1)
  (declare (ignore $1))
  (literal-fragment :object 'otherwise :token-class ':otherwise
   :token-value $1))
 (define-lambda |infix-dylan-parser-ACTION331| ($1)
  (declare (ignore $1))
  (literal-fragment :object '\:\: :token-class '<var-type-sep>
   :token-value $1))
 (define-lambda |infix-dylan-parser-ACTION332| ($1)
  (declare (ignore $1))
  (literal-fragment :object '|...| :token-class '<ellipsis>
   :token-value $1))
 (define-lambda |infix-dylan-parser-ACTION333| ($1)
  (declare (ignore $1))
  (literal-fragment :object '? :token-class '<query> :token-value $1))
 (define-lambda |infix-dylan-parser-ACTION334| ($1)
  (declare (ignore $1))
  (literal-fragment :object '?? :token-class '<query-query>
   :token-value $1))
 (define-lambda |infix-dylan-parser-ACTION335| ($1)
  (declare (ignore $1))
  (literal-fragment :object '?= :token-class '<query-equal>
   :token-value $1))
 (define-lambda |infix-dylan-parser-ACTION336| ($1)
  (declare (ignore $1))
  (literal-fragment :object '=> :token-class '<implies> :token-value $1))
 (define-lambda |infix-dylan-parser-ACTION337| ($1)
  (declare (ignore $1))
  (literal-fragment :object $1 :token-class '<literal> :token-value $1))
 (define-lambda |infix-dylan-parser-ACTION338| ($1)
  (declare (ignore $1))
  (literal-fragment :object $1 :token-class '<string> :token-value $1))
 (define-lambda |infix-dylan-parser-ACTION339| ($1)
  (declare (ignore $1))
  (literal-fragment :object $1 :token-class '<keyword> :token-value $1))
 (define-lambda |infix-dylan-parser-ACTION340| ($1)
  (declare (ignore $1))
  (literal-fragment :object $1 :token-class :true :token-value $1))
 (define-lambda |infix-dylan-parser-ACTION341| ($1)
  (declare (ignore $1))
  (literal-fragment :object $1 :token-class :false :token-value $1))
 (define-lambda |infix-dylan-parser-ACTION342| ($1 $2 $3 $4 $5)
  (declare (ignore $1 $2 $3 $4 $5))
  (parsed-fragment :token-class :parsed-literal :token-value
   (quasi-quote ((unquote-splicing $2) unquote $4))))
 (define-lambda |infix-dylan-parser-ACTION343| ($1 $2 $3)
  (declare (ignore $1 $2 $3))
  (parsed-fragment :token-class :parsed-literal :token-value $2))
 (define-lambda |infix-dylan-parser-ACTION344| ($1 $2 $3)
  (declare (ignore $1 $2 $3))
  (parsed-fragment :token-class :parsed-literal :token-value
   (as <vector> $2)))
 (define-lambda |infix-dylan-parser-ACTION345| ($1)
  (declare (ignore $1))
  (literal-fragment :object $1 :token-class '<symbol> :token-value $1))
 (define-lambda |infix-dylan-parser-ACTION346| ($1)
  (declare (ignore $1))
  (literal-fragment :object $1 :token-class '<defining-word>
   :token-value $1))
 (define-lambda |infix-dylan-parser-ACTION347| ($1)
  (declare (ignore $1))
  (literal-fragment :object $1 :token-class '<fragment-define-word>
   :token-value $1))
 (define-lambda |infix-dylan-parser-ACTION348| ($1)
  (declare (ignore $1))
  (literal-fragment :object $1 :token-class
   '<fragment-define-bindings-word> :token-value $1))
 (define-lambda |infix-dylan-parser-ACTION349| ($1)
  (declare (ignore $1))
  (literal-fragment :object $1 :token-class '<binary-operator>
   :token-value $1))
 (define-lambda |infix-dylan-parser-ACTION350| ($1)
  (declare (ignore $1))
  (literal-fragment :object '- :token-class '<minus> :token-value $1))
 (define-lambda |infix-dylan-parser-ACTION351| ($1)
  (declare (ignore $1))
  (literal-fragment :object '= :token-class '<binds> :token-value $1))
 (define-lambda |infix-dylan-parser-ACTION352| ($1)
  (declare (ignore $1))
  (literal-fragment :object '== :token-class '<var-singleton-sep>
   :token-value $1))
 (define-lambda |infix-dylan-parser-ACTION353| ($1)
  (declare (ignore $1))
  (literal-fragment :object '\:= :token-class '<becomes> :token-value
   $1))
 (define-lambda |infix-dylan-parser-ACTION354| ($1)
  (declare (ignore $1))
  (literal-fragment :object '~ :token-class '<not> :token-value $1))
 (define-lambda |infix-dylan-parser-ACTION355| ($1)
  (declare (ignore $1))
  (parsed-fragment :token-class :parsed-name :token-value $1))
 (define-lambda |infix-dylan-parser-ACTION356| ($1)
  (declare (ignore $1))
  (parsed-fragment :token-class :parsed-variable :token-value $1))
 (define-lambda |infix-dylan-parser-ACTION358| ($1)
  (declare (ignore $1))
  (parsed-fragment :token-class :parsed-body :token-value $1))
 (define-lambda |infix-dylan-parser-ACTION359| ($1)
  (declare (ignore $1))
  (parsed-fragment :token-class :parsed-case-body :token-value $1))
 (define-lambda |infix-dylan-parser-ACTION360| ($1)
  (declare (ignore $1))
  (parsed-fragment :token-class :parsed-literal :token-value $1))
 (define-lambda |infix-dylan-parser-ACTION363| ($1)
  (declare (ignore $1)) 'macro)
 (define-lambda |infix-dylan-parser-ACTION367| ($1 $2 $3 $4 $5 $6 $7)
  (declare (ignore $1 $2 $3 $4 $5 $6 $7))
  (if (empty? $2)
      (quasi-quote ((unquote $1) (unquote $3) (unquote $4)))
      (quasi-quote
       (((unquote $1) (unquote-splicing $2)) (unquote $3) (unquote $4)))))
 (define-lambda |infix-dylan-parser-ACTION368|
  ($1 $2 $3 $4 $5 $6 $7 $8) (declare (ignore $1 $2 $3 $4 $5 $6 $7 $8))
  (quasi-quote
   (infix-macro-case (unquote $3) (unquote $5) (unquote $6))))
 (define-lambda |infix-dylan-parser-ACTION374|
  ($1 $2 $3 $4 $5 $6 $7 $8) (declare (ignore $1 $2 $3 $4 $5 $6 $7 $8))
  (statement-rule :name $2 :pattern
   (statement-rule-pattern :name $2 :pattern $3) :template $7))
 (define-lambda |infix-dylan-parser-ACTION375|
  ($1 $2 $3 $4 $5 $6 $7 $8) (declare (ignore $1 $2 $3 $4 $5 $6 $7 $8))
  (define-rule :name #f :pattern
   (define-rule-pattern :name #f :modifiers-pattern #f :pattern $3)
   :template $7))
 (define-lambda |infix-dylan-parser-ACTION376| ($1 $2 $3 $4 $5 $6 $7)
  (declare (ignore $1 $2 $3 $4 $5 $6 $7))
  (define-bindings-rule :name #f :pattern
   (define-rule-pattern :name #f :modifiers-pattern #f :pattern $3)
   :template $6))
 (define-lambda |infix-dylan-parser-ACTION377| ($1 $2 $3 $4 $5 $6 $7)
  (declare (ignore $1 $2 $3 $4 $5 $6 $7))
  (function-or-local-declaration-rule :name $2 :pattern
   (function-or-local-declaration-rule-pattern :name $2 :pattern $3)
   :template $6))
 (define-lambda |infix-dylan-parser-ACTION382| ($1 $2)
  (declare (ignore $1 $2))
  (aux-rule-set :name (as <symbol> (as <string> $1)) :aux-rules $2))
 (define-lambda |infix-dylan-parser-ACTION383| ($1 $2 $3 $4 $5 $6)
  (declare (ignore $1 $2 $3 $4 $5 $6))
  (aux-rule :pattern $2 :template $5))
 (define-lambda |infix-dylan-parser-ACTION403| ($1 $2 $3)
  (declare (ignore $1 $2 $3)) (variable-pattern :name $1 :type $3))
 (define-lambda |infix-dylan-parser-ACTION406| ($1 $2 $3)
  (declare (ignore $1 $2 $3))
  (spliced-pattern-variable-pattern :before $1 :pattern $3))
 (define-lambda |infix-dylan-parser-ACTION407| ($1 $2 $3)
  (declare (ignore $1 $2 $3))
  (spliced-pattern-variable-pattern :pattern $1 :after $3))
 (define-lambda |infix-dylan-parser-ACTION408| ($1 $2 $3 $4 $5)
  (declare (ignore $1 $2 $3 $4 $5))
  (spliced-pattern-variable-pattern :before $1 :pattern $3 :after $5))
 (define-lambda |infix-dylan-parser-ACTION411| ($1 $2 $3)
  (declare (ignore $1 $2 $3))
  (bracketed-fragment :fragments (fragments $2)))
 (define-lambda |infix-dylan-parser-ACTION412| ($1 $2 $3)
  (declare (ignore $1 $2 $3))
  (sbracketed-fragment :fragments (fragments $2)))
 (define-lambda |infix-dylan-parser-ACTION413| ($1 $2 $3)
  (declare (ignore $1 $2 $3))
  (cbracketed-fragment :fragments (fragments $2)))
 (define-lambda |infix-dylan-parser-ACTION414| ($1 $2)
  (declare (ignore $1 $2)) (pattern-variable-pattern :name $2))
 (define-lambda |infix-dylan-parser-ACTION415| ($1)
  (declare (ignore $1)) (ellipsis-pattern-variable-pattern))
 (define-lambda |infix-dylan-parser-ACTION416| ($1 $2)
  (declare (ignore $1 $2))
  (property-list-pattern :rest-pattern $2 :key-patterns #f))
 (define-lambda |infix-dylan-parser-ACTION417| ($1 $2 $3 $4 $5)
  (declare (ignore $1 $2 $3 $4 $5))
  (property-list-pattern :rest-pattern $2 :key-patterns
   (quasi-quote (&key (unquote-splicing $5)))))
 (define-lambda |infix-dylan-parser-ACTION418| ($1 $2)
  (declare (ignore $1 $2))
  (property-list-pattern :rest-pattern #f :key-patterns
   (quasi-quote (&key (unquote-splicing $2)))))
 (define-lambda |infix-dylan-parser-ACTION421| ($1)
  (declare (ignore $1)) (quasi-quote (&all-keys)))
 (define-lambda |infix-dylan-parser-ACTION429| ($1 $2 $3 $4)
  (declare (ignore $1 $2 $3 $4)) (quasi-quote ((unquote $3))))
 (define-lambda |infix-dylan-parser-ACTION430| ($1 $2)
  (declare (ignore $1 $2)) (sequence-pattern-variable-pattern :name $2))
 (define-lambda |infix-dylan-parser-ACTION434| ($1)
  (declare (ignore $1)) *implies*)
 (define-lambda |infix-dylan-parser-ACTION476| nil (declare (ignore))
  (template (quote nil)))
 (define-lambda |infix-dylan-parser-ACTION478| ($1)
  (declare (ignore $1)) (template $1))
 (define-lambda |infix-dylan-parser-ACTION481| ($1 $2 $3)
  (declare (ignore $1 $2 $3))
  (quasi-quote
   (<lbracket> (unquote $1) (unquote-splicing $2) <rbracket>
    (unquote $3))))
 (define-lambda |infix-dylan-parser-ACTION482| ($1 $2 $3)
  (declare (ignore $1 $2 $3))
  (quasi-quote
   (<lsbracket> (unquote $1) (unquote-splicing $2) <rsbracket>
    (unquote $3))))
 (define-lambda |infix-dylan-parser-ACTION483| ($1 $2 $3)
  (declare (ignore $1 $2 $3))
  (quasi-quote
   (<lcbracket> (unquote $1) (unquote-splicing $2) <rcbracket>
    (unquote $3))))
 (define-lambda |infix-dylan-parser-ACTION484| ($1 $2 $3)
  (declare (ignore $1 $2 $3))
  (quasi-quote
   (<list-open> (unquote $1) (unquote-splicing $2) <rbracket>
    (unquote $3))))
 (define-lambda |infix-dylan-parser-ACTION485| ($1 $2 $3)
  (declare (ignore $1 $2 $3))
  (quasi-quote
   (<vector-open> (unquote $1) (unquote-splicing $2) <rsbracket>
    (unquote $3))))
 (define-lambda |infix-dylan-parser-ACTION486| ($1 $2 $3)
  (declare (ignore $1 $2 $3))
  (quasi-quote
   (<syntax-open> (unquote $1) (unquote-splicing $2) <rcbracket>
    (unquote $3))))
 (define-lambda |infix-dylan-parser-ACTION487| ($1 $2 $3 $4)
  (declare (ignore $1 $2 $3 $4))
  (quasi-quote
   ((unquote (sequence-pattern-variable-pattern :name $2 :separator $3)))))
 (define-lambda |infix-dylan-parser-ACTION488| ($1 $2 $3)
  (declare (ignore $1 $2 $3))
  (quasi-quote
   ((unquote (sequence-pattern-variable-pattern :name $2 :separator #f)))))
 (define-lambda |infix-dylan-parser-ACTION489| ($1 $2)
  (declare (ignore $1 $2)) (quasi-quote (<symbol> (unquote $2))))
 (define-lambda |infix-dylan-parser-ACTION491| ($1 $2 $3)
  (declare (ignore $1 $2 $3))
  (quasi-quote
   ((unquote (spliced-pattern-variable-pattern :pattern $1 :after $3)))))
 (define-lambda |infix-dylan-parser-ACTION492| ($1 $2 $3)
  (declare (ignore $1 $2 $3))
  (quasi-quote
   ((unquote (spliced-pattern-variable-pattern :before $1 :pattern $3)))))
 (define-lambda |infix-dylan-parser-ACTION493| ($1 $2 $3 $4 $5)
  (declare (ignore $1 $2 $3 $4 $5))
  (quasi-quote
   ((unquote
     (spliced-pattern-variable-pattern :before $1 :pattern $3 :after $5)))))
 (define-lambda |infix-dylan-parser-ACTION495| ($1 $2)
  (declare (ignore $1 $2)) (string-pattern-variable-pattern :name $2))
 (define-lambda |infix-dylan-parser-ACTION496| ($1 $2)
  (declare (ignore $1 $2)) (symbol-pattern-variable-pattern :name $2))
 (define-lambda |infix-dylan-parser-ACTION497| ($1 $2 $3 $4)
  (declare (ignore $1 $2 $3 $4))
  (quasi-quote ((unquote (expression-substitution :expression $3)))))
 (define-lambda |infix-dylan-parser-ACTION498| ($1 $2 $3 $4 $5 $6)
  (declare (ignore $1 $2 $3 $4 $5 $6))
  (quasi-quote
   ((unquote
     (sequence-expression-substitution :expression $3 :separator $5)))))
 (define-lambda |infix-dylan-parser-ACTION499| ($1)
  (declare (ignore $1))
  (quasi-quote ((unquote (token-class $1)) (unquote (token-value $1)))))
 (define-lambda |infix-dylan-parser-ACTION500| ($1)
  (declare (ignore $1)) (quasi-quote (<dot> (unquote $1))))
 (define-lambda |infix-dylan-parser-ACTION501| ($1)
  (declare (ignore $1)) (quasi-quote (<var-type-sep> (unquote $1))))
 (define-lambda |infix-dylan-parser-ACTION502| ($1)
  (declare (ignore $1))
  (quasi-quote ((unquote (ellipsis-pattern-variable-pattern)))))
 (define-lambda |infix-dylan-parser-ACTION503| ($1)
  (declare (ignore $1)) (quasi-quote (<implies> (unquote $1))))
 (define-lambda |infix-dylan-parser-ACTION504| ($1)
  (declare (ignore $1)) (quasi-quote (<keyword> (unquote $1))))
 (define-lambda |infix-dylan-parser-ACTION505| ($1)
  (declare (ignore $1)) (quasi-quote (<literal> (unquote $1))))
 (define-lambda |infix-dylan-parser-ACTION506| ($1)
  (declare (ignore $1)) (quasi-quote (<string> (unquote $1))))
 (define-lambda |infix-dylan-parser-ACTION507| ($1)
  (declare (ignore $1)) (quasi-quote (<unary-operator> (unquote $1))))
 (define-lambda |infix-dylan-parser-ACTION508| ($1)
  (declare (ignore $1)) (quasi-quote (<not> (unquote $1))))
 (define-lambda |infix-dylan-parser-ACTION509| ($1)
  (declare (ignore $1)) (quasi-quote (:true (unquote $1))))
 (define-lambda |infix-dylan-parser-ACTION510| ($1)
  (declare (ignore $1)) (quasi-quote (:false (unquote $1))))
 (define-lambda |infix-dylan-parser-ACTION511| ($1)
  (declare (ignore $1)) (quasi-quote (:&next (unquote $1))))
 (define-lambda |infix-dylan-parser-ACTION512| ($1)
  (declare (ignore $1)) (quasi-quote (:&rest (unquote $1))))
 (define-lambda |infix-dylan-parser-ACTION513| ($1)
  (declare (ignore $1)) (quasi-quote (:&key (unquote $1))))
 (define-lambda |infix-dylan-parser-ACTION514| ($1)
  (declare (ignore $1)) (quasi-quote (:&all-keys (unquote $1))))
 (define-lambda |infix-dylan-parser-ACTION515| ($1)
  (declare (ignore $1)) (quasi-quote (:define (unquote $1))))
 (define-lambda |infix-dylan-parser-ACTION516| ($1)
  (declare (ignore $1)) (quasi-quote (:end (unquote $1))))
 (define-lambda |infix-dylan-parser-ACTION517| ($1)
  (declare (ignore $1)) (quasi-quote (:generic (unquote $1))))
 (define-lambda |infix-dylan-parser-ACTION518| ($1)
  (declare (ignore $1)) (quasi-quote (:handler (unquote $1))))
 (define-lambda |infix-dylan-parser-ACTION519| ($1)
  (declare (ignore $1)) (quasi-quote (:let (unquote $1))))
 (define-lambda |infix-dylan-parser-ACTION520| ($1)
  (declare (ignore $1)) (quasi-quote (:local (unquote $1))))
 (define-lambda |infix-dylan-parser-ACTION521| ($1)
  (declare (ignore $1)) (quasi-quote (:method (unquote $1))))
 (define-lambda |infix-dylan-parser-ACTION522| ($1)
  (declare (ignore $1)) (quasi-quote (:macro (unquote $1))))
 (define-lambda |infix-dylan-parser-ACTION523| ($1)
  (declare (ignore $1)) (quasi-quote (:otherwise (unquote $1))))
 (define-lambda |infix-dylan-parser-ACTION524| ($1)
  (declare (ignore $1)) (quasi-quote (<symbol> (unquote $1))))
 (define-lambda |infix-dylan-parser-ACTION526| ($1)
  (declare (ignore $1)) (quasi-quote (:parsed-expression (unquote $1))))
 (define-lambda |infix-dylan-parser-ACTION528| ($1)
  (declare (ignore $1)) (quasi-quote (:parsed-body (unquote $1))))
 (define-lambda |infix-dylan-parser-ACTION529| ($1)
  (declare (ignore $1)) (quasi-quote (:parsed-case-body (unquote $1))))
 (define-lambda |infix-dylan-parser-ACTION530| ($1)
  (declare (ignore $1)) (quasi-quote (:parsed-literal (unquote $1))))
 (define-lambda |infix-dylan-parser-ACTION531| ($1)
  (declare (ignore $1)) (quasi-quote (<statement-sep> (unquote $1))))
 (define-lambda |infix-dylan-parser-ACTION532| ($1)
  (declare (ignore $1)) (quasi-quote (<var-sep> (unquote $1))))
 (define-lambda |infix-dylan-parser-ACTION533| ($1)
  (declare (ignore $1)) (quasi-quote (<binary-operator> (unquote $1))))
 (define-lambda |infix-dylan-parser-ACTION534| ($1)
  (declare (ignore $1)) (quasi-quote (<binds> (unquote $1))))
 (define-lambda |infix-dylan-parser-ACTION535| ($1)
  (declare (ignore $1))
  (quasi-quote (<var-singleton-sep> (unquote $1))))
 (define-lambda |infix-dylan-parser-ACTION536| ($1)
  (declare (ignore $1)) (quasi-quote (<becomes> (unquote $1))))
 (define-lambda |infix-dylan-parser-ACTION537| ($1)
  (declare (ignore $1)) (quasi-quote (<minus> (unquote $1))))
 (define-lambda |infix-dylan-parser-ACTION545| ($1)
  (declare (ignore $1)) (if (instance? $1 <pair>) (first $1) $1))
 (define-lambda |infix-dylan-parser-ACTION547| ($1 $2)
  (declare (ignore $1 $2)) (items $1))
 (define-lambda |infix-dylan-parser-ACTION548| ($1)
  (declare (ignore $1)) (items $1))
 (define-lambda |infix-dylan-parser-ACTION555| ($1 $2 $3)
  (declare (ignore $1 $2 $3))
  (quasi-quote (syntax-template (unquote $2))))
 (define-lambda |infix-dylan-parser-ACTION558|
  ($1 $2 $3 $4 $5 $6 $7 $8) (declare (ignore $1 $2 $3 $4 $5 $6 $7 $8))
  (quasi-quote
   ((unquote (infix-defining-macro-name $3 :modifiers $2)) (unquote $2)
    (unquote $4) (#f (unquote (first $5)))
    (unquote-splicing (second $5)))))
 (define-lambda |infix-dylan-parser-ACTION563| ($1 $2 $3)
  (declare (ignore $1 $2 $3))
  (quasi-quote
   ((#f (unquote $1))
    ((unquote-splicing $2) (unquote (second (head $3))))
    (unquote-splicing (tail $3)))))
 (define-lambda |infix-dylan-parser-ACTION574| ($1 $2 $3 $4)
  (declare (ignore $1 $2 $3 $4))
  (rewrite-parsed-body
   (quasi-quote ((unquote $1) (unquote-splicing $3)))))
 (define-lambda |infix-dylan-parser-ACTION576| ($1 $2 $3)
  (declare (ignore $1 $2 $3)) (quasi-quote ((unquote $1) (unquote $2))))
 (define-lambda |infix-dylan-parser-ACTION582| ($1 $2 $3)
  (declare (ignore $1 $2 $3)) (expanded-constraint $2))
 (define-lambda |infix-dylan-parser-ACTION586| ($1 $2)
  (declare (ignore $1 $2))
  (quasi-quote ((unquote-splicing $1) (unquote-splicing $2))))
 (define-lambda |infix-dylan-parser-ACTION587| ($1)
  (declare (ignore $1)) (list $1))
 (define-lambda |infix-dylan-parser-ACTION588| ($1 $2)
  (declare (ignore $1 $2)) (append $1 (list $2)))
 (define-lambda |infix-dylan-parser-ACTION600| ($1 $2 $3)
  (declare (ignore $1 $2 $3)) (append $1 (list $3)))
 (define-lambda |infix-dylan-parser-ACTION602| ($1 $2)
  (declare (ignore $1 $2)) (concatenate $1 $2))
 (define-lambda |infix-dylan-parser-ACTION606| ($1 $2 $3)
  (declare (ignore $1 $2 $3))
  (quasi-quote ((unquote-splicing $1) (unquote $2) (unquote $3))))
 (define infix-dylan-parser
         (make <parser> :action-table
          '#(((<keyword> . -39) (:expression-constraint . -11)
              (:variable-constraint . -20) (:name-constraint . -27)
              (:body-constraint . -30) (:case-body-constraint . -37)
              (:macro-constraint . -2) (:fragment-constraint . -41)
              (<fragment-begin-word> . -48)
              (<fragment-define-and-begin-word> . -63)
              (<fragment-define-bindings-and-begin-word> . -57)
              (:generic . -33) (<generic-function-defining-word> . -50)
              (<seal-word> . -4) (<unary-operator> . -65)
              (<minus> . -64) (<not> . -44)
              (<fragment-function-word> . -68)
              (<details-begin-word> . -21) (<expr-begin-word> . -13)
              (<simple-begin-word> . -52) (:method . -28)
              (<symbol> . -34) (<defining-word> . -42)
              (<method-defining-word> . -5) (<ellipsis> . -58)
              (<fragment-define-word> . -17)
              (<fragment-define-bindings-word> . -59)
              (<lbracket> . -24) (:parsed-body . -56)
              (:parsed-expression . -47) (:parsed-name . -66)
              (:parsed-variable . -14) (<literal> . -51) (:true . -3)
              (:false . -12) (<list-open> . -40) (<vector-open> . -46)
              (:parsed-literal . -55) (:let . -19) (:local . -29)
              (<fragment-local-declaration-word> . -45)
              (:parsed-local-declaration . -69) (:macro-case . -15)
              (:parsed-statement . -60) (<syntax-open> . -54)
              (:define . -31) (:parsed-defining-form . -23)
              (<string> . -53))
           ((:define . -31) (:parsed-defining-form . -23)
            (<seal-word> . -4) (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<keyword> . -221) (<unary-operator> . -65) (<minus> . -64)
            (<not> . -44) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((<dot> . 134) (<lsbracket> . 134) (<lbracket> . 134)
            (<becomes> . 134) (<var-singleton-sep> . 134)
            (<binds> . 134) (<minus> . 134) (<binary-operator> . 134)
            (:end . 134) (<statement-sep> . 134) (<implies> . 134)
            (<var-sep> . 134) (<rbracket> . 134) (<symbol> . 134)
            (:parsed-name . 134) (<rcbracket> . 134)
            (<simple-intermediate-word> . 134)
            (<expr-intermediate-word> . 134)
            (<details-intermediate-word> . 134) (<rsbracket> . 134)
            (<lcbracket> . 134) (<keyword> . 134))
           ((<symbol> . 68) (:parsed-name . 68) (:generic . 68))
           ((<dot> . 94) (<lsbracket> . 94) (<lbracket> . 94)
            (<becomes> . 94) (<var-singleton-sep> . 94) (<binds> . 94)
            (<minus> . 94) (<binary-operator> . 94) (:end . 94)
            (<var-type-sep> . 94) (<statement-sep> . 94)
            (<implies> . 94) (<var-sep> . 94) (<rbracket> . 94)
            (<symbol> . 94) (<defining-word> . 94) (:parsed-name . 94)
            (<simple-intermediate-word> . 94)
            (<expr-intermediate-word> . 94)
            (<details-intermediate-word> . 94) (:define . 94)
            (<seal-word> . 94) (:parsed-defining-form . 94) (:let . 94)
            (:local . 94) (<fragment-local-declaration-word> . 94)
            (:parsed-local-declaration . 94) (<keyword> . 94)
            (<fragment-function-word> . 94) (<literal> . 94)
            (<string> . 94) (:true . 94) (:false . 94)
            (<list-open> . 94) (<vector-open> . 94)
            (:parsed-literal . 94) (<method-defining-word> . 94)
            (:generic . 94) (<generic-function-defining-word> . 94)
            (<ellipsis> . 94) (<fragment-define-word> . 94)
            (<fragment-define-bindings-word> . 94)
            (:parsed-variable . 94) (:method . 94)
            (<details-begin-word> . 94) (<expr-begin-word> . 94)
            (<simple-begin-word> . 94) (<fragment-begin-word> . 94)
            (<fragment-define-and-begin-word> . 94)
            (<fragment-define-bindings-and-begin-word> . 94)
            (:macro-case . 94) (:parsed-statement . 94)
            (:parsed-body . 94) (:parsed-expression . 94)
            (<syntax-open> . 94) (<unary-operator> . 94) (<not> . 94)
            (<rsbracket> . 94) (<rcbracket> . 94) (<lcbracket> . 94))
           ((<dot> . 91) (<lsbracket> . 91) (<lbracket> . 91)
            (<becomes> . 91) (<var-singleton-sep> . 91) (<binds> . 91)
            (<minus> . 91) (<binary-operator> . 91) (:end . 91)
            (<var-type-sep> . 91) (<statement-sep> . 91)
            (<implies> . 91) (<var-sep> . 91) (<rbracket> . 91)
            (<symbol> . 91) (<defining-word> . 91) (:parsed-name . 91)
            (<simple-intermediate-word> . 91)
            (<expr-intermediate-word> . 91)
            (<details-intermediate-word> . 91) (:define . 91)
            (<seal-word> . 91) (:parsed-defining-form . 91) (:let . 91)
            (:local . 91) (<fragment-local-declaration-word> . 91)
            (:parsed-local-declaration . 91) (<keyword> . 91)
            (<fragment-function-word> . 91) (<literal> . 91)
            (<string> . 91) (:true . 91) (:false . 91)
            (<list-open> . 91) (<vector-open> . 91)
            (:parsed-literal . 91) (<method-defining-word> . 91)
            (:generic . 91) (<generic-function-defining-word> . 91)
            (<ellipsis> . 91) (<fragment-define-word> . 91)
            (<fragment-define-bindings-word> . 91)
            (:parsed-variable . 91) (:method . 91)
            (<details-begin-word> . 91) (<expr-begin-word> . 91)
            (<simple-begin-word> . 91) (<fragment-begin-word> . 91)
            (<fragment-define-and-begin-word> . 91)
            (<fragment-define-bindings-and-begin-word> . 91)
            (:macro-case . 91) (:parsed-statement . 91)
            (:parsed-body . 91) (:parsed-expression . 91)
            (<syntax-open> . 91) (<unary-operator> . 91) (<not> . 91)
            (<rsbracket> . 91) (<rcbracket> . 91) (<lcbracket> . 91))
           ((:eoi . :accept)) ((<statement-sep> . -869))
           ((<dot> . 122) (<lsbracket> . 122) (<lbracket> . 122)
            (<becomes> . 122) (<var-singleton-sep> . 122)
            (<binds> . 122) (<minus> . 122) (<binary-operator> . 122)
            (:end . 122) (<statement-sep> . 122) (<implies> . 122)
            (<var-sep> . 122) (<rbracket> . 122) (<symbol> . 122)
            (:parsed-name . 122) (<simple-intermediate-word> . 122)
            (<expr-intermediate-word> . 122)
            (<details-intermediate-word> . 122) (<rsbracket> . 122)
            (<rcbracket> . 122) (<lcbracket> . 122) (<keyword> . 122))
           ((<dot> . 128) (<lsbracket> . 128) (<lbracket> . 128)
            (<becomes> . 128) (<var-singleton-sep> . 128)
            (<binds> . 128) (<minus> . 128) (<binary-operator> . 128)
            (:end . 128) (<statement-sep> . 128) (<implies> . 128)
            (<var-sep> . 128) (<rbracket> . 128) (<symbol> . 128)
            (:parsed-name . 128) (<simple-intermediate-word> . 128)
            (<expr-intermediate-word> . 128)
            (<details-intermediate-word> . 128) (<rsbracket> . 128)
            (<rcbracket> . 128) (<lcbracket> . 128) (<keyword> . 128))
           ((<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<keyword> . -221) (<unary-operator> . -65) (<minus> . -64)
            (<not> . -44) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((<dot> . 135) (<lsbracket> . 135) (<lbracket> . 135)
            (<becomes> . 135) (<var-singleton-sep> . 135)
            (<binds> . 135) (<minus> . 135) (<binary-operator> . 135)
            (:end . 135) (<statement-sep> . 135) (<implies> . 135)
            (<var-sep> . 135) (<rbracket> . 135) (<symbol> . 135)
            (:parsed-name . 135) (<rcbracket> . 135)
            (<simple-intermediate-word> . 135)
            (<expr-intermediate-word> . 135)
            (<details-intermediate-word> . 135) (<rsbracket> . 135)
            (<lcbracket> . 135) (<keyword> . 135))
           ((<lbracket> . 89) (:generic . -33)
            (<generic-function-defining-word> . -50) (<symbol> . -34)
            (<defining-word> . -42) (<method-defining-word> . -5)
            (<ellipsis> . -58) (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59)
            (:parsed-name . -66) (:parsed-variable . -14))
           ((<dot> . 545) (<lsbracket> . 545) (<lbracket> . 545)
            (<becomes> . 545) (<var-singleton-sep> . 545)
            (<binds> . 545) (<minus> . 545) (<binary-operator> . 545)
            (:end . 545) (<var-type-sep> . 545) (<statement-sep> . 545)
            (<implies> . 545) (<var-sep> . 545) (<rbracket> . 545)
            (<symbol> . 545) (<defining-word> . 545)
            (:parsed-name . 545) (<simple-intermediate-word> . 545)
            (<expr-intermediate-word> . 545)
            (<details-intermediate-word> . 545) (:define . 545)
            (<seal-word> . 545) (:parsed-defining-form . 545)
            (:let . 545) (:local . 545)
            (<fragment-local-declaration-word> . 545)
            (:parsed-local-declaration . 545) (<keyword> . 545)
            (<fragment-function-word> . 545) (<literal> . 545)
            (<string> . 545) (:true . 545) (:false . 545)
            (<list-open> . 545) (<vector-open> . 545)
            (:parsed-literal . 545) (<method-defining-word> . 545)
            (:generic . 545) (<generic-function-defining-word> . 545)
            (<ellipsis> . 545) (<fragment-define-word> . 545)
            (<fragment-define-bindings-word> . 545)
            (:parsed-variable . 545) (:method . 545)
            (<details-begin-word> . 545) (<expr-begin-word> . 545)
            (<simple-begin-word> . 545) (<fragment-begin-word> . 545)
            (<fragment-define-and-begin-word> . 545)
            (<fragment-define-bindings-and-begin-word> . 545)
            (:macro-case . 545) (:parsed-statement . 545)
            (:parsed-body . 545) (:parsed-expression . 545)
            (<syntax-open> . 545) (<unary-operator> . 545)
            (<not> . 545) (<rsbracket> . 545) (<rcbracket> . 545)
            (<lcbracket> . 545))
           ((<lbracket> . -412))
           ((<string> . -233) (<dot> . 133) (<lsbracket> . 133)
            (<lbracket> . 133) (<becomes> . 133)
            (<var-singleton-sep> . 133) (<binds> . 133) (<minus> . 133)
            (<binary-operator> . 133) (:end . 133)
            (<statement-sep> . 133) (<implies> . 133) (<var-sep> . 133)
            (<rbracket> . 133) (<symbol> . 133) (:parsed-name . 133)
            (<rcbracket> . 133) (<simple-intermediate-word> . 133)
            (<expr-intermediate-word> . 133)
            (<details-intermediate-word> . 133) (<rsbracket> . 133)
            (<lcbracket> . 133) (<keyword> . 133))
           ((<dot> . 284) (<lsbracket> . 284) (<lbracket> . 284)
            (<becomes> . 284) (<var-singleton-sep> . 284)
            (<binds> . 284) (<minus> . 284) (<binary-operator> . 284)
            (:end . 284) (<var-type-sep> . 284) (<statement-sep> . 284)
            (<implies> . 284) (<var-sep> . 284) (<rbracket> . 284)
            (<symbol> . 284) (<defining-word> . 284)
            (:parsed-name . 284) (<simple-intermediate-word> . 284)
            (<expr-intermediate-word> . 284)
            (<details-intermediate-word> . 284) (:define . 284)
            (<seal-word> . 284) (:parsed-defining-form . 284)
            (:let . 284) (:local . 284)
            (<fragment-local-declaration-word> . 284)
            (:parsed-local-declaration . 284) (<keyword> . 284)
            (<fragment-function-word> . 284) (<literal> . 284)
            (<string> . 284) (:true . 284) (:false . 284)
            (<list-open> . 284) (<vector-open> . 284)
            (:parsed-literal . 284) (<method-defining-word> . 284)
            (:generic . 284) (<generic-function-defining-word> . 284)
            (<ellipsis> . 284) (<fragment-define-word> . 284)
            (<fragment-define-bindings-word> . 284)
            (:parsed-variable . 284) (:method . 284)
            (<details-begin-word> . 284) (<expr-begin-word> . 284)
            (<simple-begin-word> . 284) (<fragment-begin-word> . 284)
            (<fragment-define-and-begin-word> . 284)
            (<fragment-define-bindings-and-begin-word> . 284)
            (:macro-case . 284) (:parsed-statement . 284)
            (:parsed-body . 284) (:parsed-expression . 284)
            (<syntax-open> . 284) (<unary-operator> . 284)
            (<not> . 284) (<rsbracket> . 284) (<rcbracket> . 284)
            (<lcbracket> . 284))
           ((<dot> . 130) (<lsbracket> . 130) (<lbracket> . 130)
            (<becomes> . 130) (<var-singleton-sep> . 130)
            (<binds> . 130) (<minus> . 130) (<binary-operator> . 130)
            (:end . 130) (<statement-sep> . 130) (<implies> . 130)
            (<var-sep> . 130) (<rbracket> . 130) (<symbol> . 130)
            (:parsed-name . 130) (<simple-intermediate-word> . 130)
            (<expr-intermediate-word> . 130)
            (<details-intermediate-word> . 130) (<rsbracket> . 130)
            (<rcbracket> . 130) (<lcbracket> . 130) (<keyword> . 130))
           ((:handler . -614) (<lbracket> . -615) (:generic . -33)
            (<generic-function-defining-word> . -50) (:&rest . -553)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59)
            (:parsed-name . -66) (:parsed-variable . -14))
           ((:generic . -33) (<generic-function-defining-word> . -50)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59)
            (:parsed-name . -66) (:parsed-variable . -14))
           ((<lbracket> . 89) (:generic . -33)
            (<generic-function-defining-word> . -50) (<symbol> . -34)
            (<defining-word> . -42) (<method-defining-word> . -5)
            (<ellipsis> . -58) (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59)
            (:parsed-name . -66) (:parsed-variable . -14))
           ((:otherwise . -361) (:end . 147)
            (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<seal-word> . -4) (<keyword> . -221)
            (<unary-operator> . -65) (<minus> . -64) (<not> . -44)
            (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52)
            (<details-intermediate-word> . -286)
            (<expr-intermediate-word> . -283)
            (<simple-intermediate-word> . -279) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -370)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:let . -19) (:local . -29)
            (<fragment-local-declaration-word> . -45)
            (:parsed-local-declaration . -69) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (:define . -31) (:parsed-defining-form . -23)
            (<string> . -53))
           ((:end . 551) (<statement-sep> . 551) (<rbracket> . 551)
            (<rsbracket> . 551) (<simple-intermediate-word> . 551)
            (<expr-intermediate-word> . 551)
            (<details-intermediate-word> . 551) (<rcbracket> . 551))
           ((<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<keyword> . -221) (<unary-operator> . -65) (<minus> . -64)
            (<not> . -44) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((:generic . 35) (<symbol> . -258) (:parsed-name . -257))
           ((<dot> . 127) (<lsbracket> . 127) (<lbracket> . 127)
            (<becomes> . 127) (<var-singleton-sep> . 127)
            (<binds> . 127) (<minus> . 127) (<binary-operator> . 127)
            (:end . 127) (<statement-sep> . 127) (<implies> . 127)
            (<var-sep> . 127) (<rbracket> . 127) (<symbol> . 127)
            (:parsed-name . 127) (<simple-intermediate-word> . 127)
            (<expr-intermediate-word> . 127)
            (<details-intermediate-word> . 127) (<rsbracket> . 127)
            (<rcbracket> . 127) (<lcbracket> . 127) (<keyword> . 127))
           ((<symbol> . -168) (<defining-word> . -182)
            (<fragment-begin-word> . -190)
            (<fragment-define-word> . -152)
            (<fragment-define-and-begin-word> . -207)
            (<fragment-define-bindings-word> . -204)
            (<fragment-define-bindings-and-begin-word> . -203)
            (<fragment-function-word> . -213)
            (<fragment-local-declaration-word> . -186)
            (<details-begin-word> . -156) (<expr-begin-word> . -150)
            (<simple-begin-word> . -195)
            (<details-intermediate-word> . -174)
            (<expr-intermediate-word> . -170)
            (<simple-intermediate-word> . -158)
            (<method-defining-word> . -146)
            (<generic-function-defining-word> . -193)
            (<seal-word> . -145) (:parsed-name . -211))
           ((<lbracket> . -321))
           ((:parsed-variable . 97) (:parsed-name . 97)
            (<fragment-define-bindings-word> . 97)
            (<fragment-define-word> . 97) (<ellipsis> . 97)
            (<generic-function-defining-word> . 97) (:generic . 97)
            (<method-defining-word> . 97) (<defining-word> . 97)
            (<symbol> . 97) (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:method . -312))
           ((:end . 256) (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<seal-word> . -4) (<keyword> . -221)
            (<unary-operator> . -65) (<minus> . -64) (<not> . -44)
            (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:let . -19) (:local . -29)
            (<fragment-local-declaration-word> . -45)
            (:parsed-local-declaration . -69) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (:define . -31) (:parsed-defining-form . -23)
            (<string> . -53))
           ((<clauses-defining-word> . 35) (:macro . 35)
            (<macro-defining-word> . 35)
            (<fragment-define-bindings-word> . 35)
            (<fragment-define-bindings-and-begin-word> . 35)
            (<fragment-define-word> . 35)
            (<fragment-define-and-begin-word> . 35)
            (<defining-word> . 35) (:generic . 35)
            (<generic-function-defining-word> . 35) (:method . 35)
            (<method-defining-word> . 35) (<symbol> . -258)
            (:parsed-name . -257))
           ((:end . 290) (<var-sep> . 308)
            (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (<seal-word> . -4) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<implies> . -110) (<literal> . -124) (<string> . -128)
            (<keyword> . -112) (:true . -87) (:false . -92)
            (<list-open> . -116) (<vector-open> . -122)
            (<symbol> . -105) (<defining-word> . -117)
            (<fragment-define-word> . -95)
            (<fragment-define-bindings-word> . -132)
            (<binary-operator> . -113) (<minus> . -134)
            (<binds> . -136) (<var-singleton-sep> . -104)
            (<becomes> . -120) (<not> . -119) (:let . -19)
            (:local . -29) (<fragment-local-declaration-word> . -45)
            (:parsed-local-declaration . -69) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<lbracket> . -99) (<lsbracket> . -100)
            (<lcbracket> . -107) (<dot> . -101) (:&next . -125)
            (:&rest . -135) (:&key . -85) (:&all-keys . -111)
            (:otherwise . -88) (<var-type-sep> . -114)
            (<ellipsis> . -131) (<query> . -97) (<query-query> . -139)
            (<query-equal> . -90) (:parsed-name . -137)
            (:parsed-variable . -93) (:parsed-expression . -123)
            (:parsed-body . -130) (:parsed-case-body . -89)
            (:parsed-literal . -129) (:define . -31)
            (:parsed-defining-form . -23))
           ((<dot> . 41) (<lsbracket> . 41) (<lbracket> . 41)
            (<becomes> . 41) (<var-singleton-sep> . 41) (<binds> . 41)
            (<minus> . 41) (<binary-operator> . 41) (:end . 41)
            (<var-type-sep> . 41) (<statement-sep> . 41)
            (<implies> . 41) (<var-sep> . 41) (<rbracket> . 41)
            (<symbol> . 41) (<defining-word> . 41) (:parsed-name . 41)
            (<simple-intermediate-word> . 41)
            (<expr-intermediate-word> . 41)
            (<details-intermediate-word> . 41) (:define . 41)
            (<seal-word> . 41) (:parsed-defining-form . 41) (:let . 41)
            (:local . 41) (<fragment-local-declaration-word> . 41)
            (:parsed-local-declaration . 41) (<keyword> . 41)
            (<fragment-function-word> . 41) (<literal> . 41)
            (<string> . 41) (:true . 41) (:false . 41)
            (<list-open> . 41) (<vector-open> . 41)
            (:parsed-literal . 41) (<method-defining-word> . 41)
            (:generic . 41) (<generic-function-defining-word> . 41)
            (<ellipsis> . 41) (<fragment-define-word> . 41)
            (<fragment-define-bindings-word> . 41)
            (:parsed-variable . 41) (:method . 41)
            (<details-begin-word> . 41) (<expr-begin-word> . 41)
            (<simple-begin-word> . 41) (<fragment-begin-word> . 41)
            (<fragment-define-and-begin-word> . 41)
            (<fragment-define-bindings-and-begin-word> . 41)
            (:macro-case . 41) (:parsed-statement . 41)
            (:parsed-body . 41) (:parsed-expression . 41)
            (<syntax-open> . 41) (<unary-operator> . 41) (<not> . 41)
            (<rsbracket> . 41) (<rcbracket> . 41) (<lcbracket> . 41))
           ((<dot> . 92) (<lsbracket> . 92) (<lbracket> . 92)
            (<becomes> . 92) (<var-singleton-sep> . 92) (<binds> . 92)
            (<minus> . 92) (<binary-operator> . 92) (:end . 92)
            (<var-type-sep> . 92) (<statement-sep> . 92)
            (<implies> . 92) (<var-sep> . 92) (<rbracket> . 92)
            (<symbol> . 92) (<defining-word> . 92) (:parsed-name . 92)
            (<simple-intermediate-word> . 92)
            (<expr-intermediate-word> . 92)
            (<details-intermediate-word> . 92) (:define . 92)
            (<seal-word> . 92) (:parsed-defining-form . 92) (:let . 92)
            (:local . 92) (<fragment-local-declaration-word> . 92)
            (:parsed-local-declaration . 92) (<keyword> . 92)
            (<fragment-function-word> . 92) (<literal> . 92)
            (<string> . 92) (:true . 92) (:false . 92)
            (<list-open> . 92) (<vector-open> . 92)
            (:parsed-literal . 92) (<method-defining-word> . 92)
            (:generic . 92) (<generic-function-defining-word> . 92)
            (<ellipsis> . 92) (<fragment-define-word> . 92)
            (<fragment-define-bindings-word> . 92)
            (:parsed-variable . 92) (:method . 92)
            (<details-begin-word> . 92) (<expr-begin-word> . 92)
            (<simple-begin-word> . 92) (<fragment-begin-word> . 92)
            (<fragment-define-and-begin-word> . 92)
            (<fragment-define-bindings-and-begin-word> . 92)
            (:macro-case . 92) (:parsed-statement . 92)
            (:parsed-body . 92) (:parsed-expression . 92)
            (<syntax-open> . 92) (<unary-operator> . 92) (<not> . 92)
            (<rsbracket> . 92) (<rcbracket> . 92) (<lcbracket> . 92))
           ((<dot> . 556) (<lsbracket> . 556) (<lbracket> . 556)
            (<becomes> . 556) (<var-singleton-sep> . 556)
            (<binds> . 556) (<minus> . 556) (<binary-operator> . 556)
            (:end . 556) (<statement-sep> . 556) (<implies> . 556)
            (<var-sep> . 556) (<rbracket> . 556) (<symbol> . 556)
            (:parsed-name . 556) (<simple-intermediate-word> . 556)
            (<expr-intermediate-word> . 556)
            (<details-intermediate-word> . 556) (<rsbracket> . 556)
            (<rcbracket> . 556) (<lcbracket> . 556) (<keyword> . 556))
           ((<statement-sep> . -860))
           ((:end . 164) (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<keyword> . -221) (<unary-operator> . -65) (<minus> . -64)
            (<not> . -44) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (<lbracket> . -370)
            (:otherwise . -361) (:method . -28) (<symbol> . -34)
            (<defining-word> . -42) (<method-defining-word> . -5)
            (<ellipsis> . -58) (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((<statement-sep> . 102) (<var-sep> . 102)
            (<rbracket> . 102) (<rsbracket> . 102))
           ((<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<seal-word> . -4) (<keyword> . -221)
            (<unary-operator> . -65) (<minus> . -64) (<not> . -44)
            (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:let . -19) (:local . -29)
            (<fragment-local-declaration-word> . -45)
            (:parsed-local-declaration . -69) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (:define . -31) (:parsed-defining-form . -23)
            (<string> . -53) (<statement-sep> . -855))
           ((<rbracket> . 269) (<literal> . -51) (:true . -3)
            (:false . -12) (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (<keyword> . -228)
            (:parsed-expression . -232) (<string> . -53))
           ((:end . 290) (<var-sep> . 308)
            (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (<seal-word> . -4) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<implies> . -110) (<literal> . -124) (<string> . -128)
            (<keyword> . -112) (:true . -87) (:false . -92)
            (<list-open> . -116) (<vector-open> . -122)
            (<symbol> . -105) (<defining-word> . -117)
            (<fragment-define-word> . -95)
            (<fragment-define-bindings-word> . -132)
            (<binary-operator> . -113) (<minus> . -134)
            (<binds> . -136) (<var-singleton-sep> . -104)
            (<becomes> . -120) (<not> . -119) (:let . -19)
            (:local . -29) (<fragment-local-declaration-word> . -45)
            (:parsed-local-declaration . -69) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<lbracket> . -99) (<lsbracket> . -100)
            (<lcbracket> . -107) (<dot> . -101) (:&next . -125)
            (:&rest . -135) (:&key . -85) (:&all-keys . -111)
            (:otherwise . -88) (<var-type-sep> . -114)
            (<ellipsis> . -131) (<query> . -97) (<query-query> . -139)
            (<query-equal> . -90) (:parsed-name . -137)
            (:parsed-variable . -93) (:parsed-expression . -123)
            (:parsed-body . -130) (:parsed-case-body . -89)
            (:parsed-literal . -129) (:define . -31)
            (:parsed-defining-form . -23))
           ((<dot> . 93) (<lsbracket> . 93) (<lbracket> . 93)
            (<becomes> . 93) (<var-singleton-sep> . 93) (<binds> . 93)
            (<minus> . 93) (<binary-operator> . 93) (:end . 93)
            (<var-type-sep> . 93) (<statement-sep> . 93)
            (<implies> . 93) (<var-sep> . 93) (<rbracket> . 93)
            (<symbol> . 93) (<defining-word> . 93) (:parsed-name . 93)
            (<simple-intermediate-word> . 93)
            (<expr-intermediate-word> . 93)
            (<details-intermediate-word> . 93) (:define . 93)
            (<seal-word> . 93) (:parsed-defining-form . 93) (:let . 93)
            (:local . 93) (<fragment-local-declaration-word> . 93)
            (:parsed-local-declaration . 93) (<keyword> . 93)
            (<fragment-function-word> . 93) (<literal> . 93)
            (<string> . 93) (:true . 93) (:false . 93)
            (<list-open> . 93) (<vector-open> . 93)
            (:parsed-literal . 93) (<method-defining-word> . 93)
            (:generic . 93) (<generic-function-defining-word> . 93)
            (<ellipsis> . 93) (<fragment-define-word> . 93)
            (<fragment-define-bindings-word> . 93)
            (:parsed-variable . 93) (:method . 93)
            (<details-begin-word> . 93) (<expr-begin-word> . 93)
            (<simple-begin-word> . 93) (<fragment-begin-word> . 93)
            (<fragment-define-and-begin-word> . 93)
            (<fragment-define-bindings-and-begin-word> . 93)
            (:macro-case . 93) (:parsed-statement . 93)
            (:parsed-body . 93) (:parsed-expression . 93)
            (<syntax-open> . 93) (<unary-operator> . 93) (<not> . 93)
            (<rsbracket> . 93) (<rcbracket> . 93) (<lcbracket> . 93))
           ((<dot> . 131) (<lsbracket> . 131) (<lbracket> . 131)
            (<becomes> . 131) (<var-singleton-sep> . 131)
            (<binds> . 131) (<minus> . 131) (<binary-operator> . 131)
            (:end . 131) (<statement-sep> . 131) (<implies> . 131)
            (<var-sep> . 131) (<rbracket> . 131) (<symbol> . 131)
            (:parsed-name . 131) (<simple-intermediate-word> . 131)
            (<expr-intermediate-word> . 131)
            (<details-intermediate-word> . 131) (<rsbracket> . 131)
            (<rcbracket> . 131) (<lcbracket> . 131) (<keyword> . 131))
           ((<fragment-function-word> . 112) (<literal> . 112)
            (<string> . 112) (:true . 112) (:false . 112)
            (<list-open> . 112) (<vector-open> . 112)
            (:parsed-literal . 112) (<symbol> . 112)
            (<defining-word> . 112) (<method-defining-word> . 112)
            (:generic . 112) (<generic-function-defining-word> . 112)
            (<ellipsis> . 112) (<fragment-define-word> . 112)
            (<fragment-define-bindings-word> . 112)
            (:parsed-name . 112) (:parsed-variable . 112)
            (<lbracket> . 112) (:method . 112)
            (<details-begin-word> . 112) (<expr-begin-word> . 112)
            (<simple-begin-word> . 112) (<fragment-begin-word> . 112)
            (<fragment-define-and-begin-word> . 112)
            (<fragment-define-bindings-and-begin-word> . 112)
            (:macro-case . 112) (:parsed-statement . 112)
            (:parsed-body . 112) (:parsed-expression . 112)
            (<syntax-open> . 112))
           ((<var-sep> . 308) (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (<seal-word> . -4) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<implies> . -110) (<literal> . -124) (<string> . -128)
            (<keyword> . -112) (:true . -87) (:false . -92)
            (<list-open> . -116) (<vector-open> . -122)
            (<symbol> . -105) (<defining-word> . -117)
            (<fragment-define-word> . -95)
            (<fragment-define-bindings-word> . -132)
            (<binary-operator> . -113) (<minus> . -134)
            (<binds> . -136) (<var-singleton-sep> . -104)
            (<becomes> . -120) (<not> . -119) (:let . -19)
            (:local . -29) (<fragment-local-declaration-word> . -45)
            (:parsed-local-declaration . -69) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<lbracket> . -99) (<lsbracket> . -100)
            (<lcbracket> . -107) (<dot> . -101) (:&next . -125)
            (:&rest . -135) (:&key . -85) (:&all-keys . -111)
            (:otherwise . -88) (<var-type-sep> . -114)
            (<ellipsis> . -131) (<query> . -97) (<query-query> . -139)
            (<query-equal> . -90) (:parsed-name . -137)
            (:parsed-variable . -93) (:parsed-expression . -123)
            (:parsed-body . -130) (:parsed-case-body . -89)
            (:parsed-literal . -129) (:define . -31)
            (:parsed-defining-form . -23))
           ((<rsbracket> . 269) (<literal> . -51) (:true . -3)
            (:false . -12) (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (<keyword> . -228)
            (:parsed-expression . -232) (<string> . -53))
           ((<dot> . 541) (<lsbracket> . 541) (<lbracket> . 541)
            (<becomes> . 541) (<var-singleton-sep> . 541)
            (<binds> . 541) (<minus> . 541) (<binary-operator> . 541)
            (:end . 541) (<statement-sep> . 541) (<implies> . 541)
            (<var-sep> . 541) (<rbracket> . 541) (<symbol> . 541)
            (:parsed-name . 541) (<simple-intermediate-word> . 541)
            (<expr-intermediate-word> . 541)
            (<details-intermediate-word> . 541) (<rsbracket> . 541)
            (<rcbracket> . 541) (<lcbracket> . 541) (<keyword> . 541))
           ((:end . 5) (<statement-sep> . 5)
            (:parsed-local-declaration . 5)
            (<fragment-local-declaration-word> . 5) (:local . 5)
            (:let . 5) (:parsed-defining-form . 5) (<seal-word> . 5)
            (:define . 5) (<var-sep> . 5) (<implies> . 5)
            (<syntax-open> . 5) (:parsed-literal . 5)
            (:parsed-case-body . 5) (:parsed-body . 5)
            (:parsed-expression . 5) (:parsed-variable . 5)
            (:parsed-name . 5) (<query-equal> . 5) (<query-query> . 5)
            (<query> . 5) (<ellipsis> . 5) (<var-type-sep> . 5)
            (:otherwise . 5) (:&all-keys . 5) (:&key . 5) (:&rest . 5)
            (:&next . 5) (<dot> . 5) (<fragment-function-word> . 5)
            (<lcbracket> . 5) (<lsbracket> . 5) (<lbracket> . 5)
            (<not> . 5) (<becomes> . 5) (<var-singleton-sep> . 5)
            (<binds> . 5) (<minus> . 5) (<binary-operator> . 5)
            (<fragment-define-bindings-word> . 5)
            (<fragment-define-word> . 5) (<defining-word> . 5)
            (<symbol> . 5) (<vector-open> . 5) (<list-open> . 5)
            (:false . 5) (:true . 5) (<keyword> . 5) (<string> . 5)
            (<literal> . 5) (:method . 5) (:parsed-statement . 5)
            (:macro-case . 5)
            (<fragment-define-bindings-and-begin-word> . 5)
            (<fragment-define-and-begin-word> . 5)
            (<fragment-begin-word> . 5) (<simple-begin-word> . 5)
            (<expr-begin-word> . 5) (<details-begin-word> . 5)
            (<generic-function-defining-word> . 5) (:generic . 5)
            (<method-defining-word> . 5) (<rcbracket> . 5)
            (<details-intermediate-word> . 5)
            (<expr-intermediate-word> . 5)
            (<simple-intermediate-word> . 5) (<rsbracket> . 5)
            (<rbracket> . 5))
           ((<dot> . 95) (<lsbracket> . 95) (<lbracket> . 95)
            (<becomes> . 95) (<var-singleton-sep> . 95) (<binds> . 95)
            (<minus> . 95) (<binary-operator> . 95) (:end . 95)
            (<var-type-sep> . 95) (<statement-sep> . 95)
            (<implies> . 95) (<var-sep> . 95) (<rbracket> . 95)
            (<symbol> . 95) (<defining-word> . 95) (:parsed-name . 95)
            (<simple-intermediate-word> . 95)
            (<expr-intermediate-word> . 95)
            (<details-intermediate-word> . 95) (:define . 95)
            (<seal-word> . 95) (:parsed-defining-form . 95) (:let . 95)
            (:local . 95) (<fragment-local-declaration-word> . 95)
            (:parsed-local-declaration . 95) (<keyword> . 95)
            (<fragment-function-word> . 95) (<literal> . 95)
            (<string> . 95) (:true . 95) (:false . 95)
            (<list-open> . 95) (<vector-open> . 95)
            (:parsed-literal . 95) (<method-defining-word> . 95)
            (:generic . 95) (<generic-function-defining-word> . 95)
            (<ellipsis> . 95) (<fragment-define-word> . 95)
            (<fragment-define-bindings-word> . 95)
            (:parsed-variable . 95) (:method . 95)
            (<details-begin-word> . 95) (<expr-begin-word> . 95)
            (<simple-begin-word> . 95) (<fragment-begin-word> . 95)
            (<fragment-define-and-begin-word> . 95)
            (<fragment-define-bindings-and-begin-word> . 95)
            (:macro-case . 95) (:parsed-statement . 95)
            (:parsed-body . 95) (:parsed-expression . 95)
            (<syntax-open> . 95) (<unary-operator> . 95) (<not> . 95)
            (<rsbracket> . 95) (<rcbracket> . 95) (<lcbracket> . 95))
           ((<dot> . 42) (<lsbracket> . 42) (<lbracket> . 42)
            (<becomes> . 42) (<var-singleton-sep> . 42) (<binds> . 42)
            (<minus> . 42) (<binary-operator> . 42) (:end . 42)
            (<var-type-sep> . 42) (<statement-sep> . 42)
            (<implies> . 42) (<var-sep> . 42) (<rbracket> . 42)
            (<symbol> . 42) (<defining-word> . 42) (:parsed-name . 42)
            (<simple-intermediate-word> . 42)
            (<expr-intermediate-word> . 42)
            (<details-intermediate-word> . 42) (:define . 42)
            (<seal-word> . 42) (:parsed-defining-form . 42) (:let . 42)
            (:local . 42) (<fragment-local-declaration-word> . 42)
            (:parsed-local-declaration . 42) (<keyword> . 42)
            (<fragment-function-word> . 42) (<literal> . 42)
            (<string> . 42) (:true . 42) (:false . 42)
            (<list-open> . 42) (<vector-open> . 42)
            (:parsed-literal . 42) (<method-defining-word> . 42)
            (:generic . 42) (<generic-function-defining-word> . 42)
            (<ellipsis> . 42) (<fragment-define-word> . 42)
            (<fragment-define-bindings-word> . 42)
            (:parsed-variable . 42) (:method . 42)
            (<details-begin-word> . 42) (<expr-begin-word> . 42)
            (<simple-begin-word> . 42) (<fragment-begin-word> . 42)
            (<fragment-define-and-begin-word> . 42)
            (<fragment-define-bindings-and-begin-word> . 42)
            (:macro-case . 42) (:parsed-statement . 42)
            (:parsed-body . 42) (:parsed-expression . 42)
            (<syntax-open> . 42) (<unary-operator> . 42) (<not> . 42)
            (<rsbracket> . 42) (<rcbracket> . 42) (<lcbracket> . 42))
           ((<dot> . 132) (<lsbracket> . 132) (<lbracket> . 132)
            (<becomes> . 132) (<var-singleton-sep> . 132)
            (<binds> . 132) (<minus> . 132) (<binary-operator> . 132)
            (:end . 132) (<statement-sep> . 132) (<implies> . 132)
            (<var-sep> . 132) (<rbracket> . 132) (<symbol> . 132)
            (:parsed-name . 132) (<rcbracket> . 132)
            (<simple-intermediate-word> . 132)
            (<expr-intermediate-word> . 132)
            (<details-intermediate-word> . 132) (<rsbracket> . 132)
            (<lcbracket> . 132) (<keyword> . 132))
           ((:end . 146) (<simple-intermediate-word> . 146)
            (<expr-intermediate-word> . 146)
            (<details-intermediate-word> . 146) (<not> . 146)
            (<minus> . 146) (<unary-operator> . 146)
            (<syntax-open> . 146) (:parsed-expression . 146)
            (:parsed-body . 146) (:parsed-statement . 146)
            (:macro-case . 146)
            (<fragment-define-bindings-and-begin-word> . 146)
            (<fragment-define-and-begin-word> . 146)
            (<fragment-begin-word> . 146) (<simple-begin-word> . 146)
            (<expr-begin-word> . 146) (<details-begin-word> . 146)
            (:method . 146) (<lbracket> . 146) (:parsed-variable . 146)
            (:parsed-name . 146)
            (<fragment-define-bindings-word> . 146)
            (<fragment-define-word> . 146) (<ellipsis> . 146)
            (<generic-function-defining-word> . 146) (:generic . 146)
            (<method-defining-word> . 146) (<defining-word> . 146)
            (<symbol> . 146) (:parsed-literal . 146)
            (<vector-open> . 146) (<list-open> . 146) (:false . 146)
            (:true . 146) (<string> . 146) (<literal> . 146)
            (<fragment-function-word> . 146) (<keyword> . 146)
            (:parsed-local-declaration . 146)
            (<fragment-local-declaration-word> . 146) (:local . 146)
            (:let . 146) (:parsed-defining-form . 146)
            (<seal-word> . 146) (:define . 146) (:otherwise . 146))
           ((<string> . 601) (<dot> . 601) (<lsbracket> . 601)
            (<lbracket> . 601) (<becomes> . 601)
            (<var-singleton-sep> . 601) (<binds> . 601) (<minus> . 601)
            (<binary-operator> . 601) (:end . 601)
            (<statement-sep> . 601) (<implies> . 601) (<var-sep> . 601)
            (<rbracket> . 601) (<symbol> . 601) (:parsed-name . 601)
            (<rcbracket> . 601) (<simple-intermediate-word> . 601)
            (<expr-intermediate-word> . 601)
            (<details-intermediate-word> . 601) (<rsbracket> . 601)
            (<lcbracket> . 601) (<keyword> . 601))
           ((<rcbracket> . 476) (<query> . -153) (<lbracket> . -157)
            (<lsbracket> . -161) (<lcbracket> . -169)
            (<list-open> . -180) (<vector-open> . -188)
            (<syntax-open> . -196) (<query-query> . -212)
            (<query-equal> . -148) (<string> . -197)
            (<escaped-substitution> . -155) (<dot> . -163)
            (<var-type-sep> . -179) (<ellipsis> . -202)
            (<implies> . -171) (<keyword> . -176) (<literal> . -192)
            (<unary-operator> . -208) (<not> . -185) (:true . -143)
            (:false . -149) (:&next . -194) (:&rest . -209)
            (:&key . -142) (:&all-keys . -173) (:define . -166)
            (:end . -199) (:generic . -167) (:handler . -177)
            (:let . -154) (:local . -162) (:method . -159)
            (:macro . -198) (:otherwise . -144)
            (:parsed-variable . -151) (:parsed-expression . -189)
            (:parsed-body . -201) (:parsed-case-body . -147)
            (:parsed-literal . -200) (<statement-sep> . -175)
            (<var-sep> . -183) (<binary-operator> . -178)
            (<binds> . -210) (<var-singleton-sep> . -165)
            (<becomes> . -187) (<minus> . -206) (<symbol> . -168)
            (<defining-word> . -182) (<fragment-begin-word> . -190)
            (<fragment-define-word> . -152)
            (<fragment-define-and-begin-word> . -207)
            (<fragment-define-bindings-word> . -204)
            (<fragment-define-bindings-and-begin-word> . -203)
            (<fragment-function-word> . -213)
            (<fragment-local-declaration-word> . -186)
            (<details-begin-word> . -156) (<expr-begin-word> . -150)
            (<simple-begin-word> . -195)
            (<details-intermediate-word> . -174)
            (<expr-intermediate-word> . -170)
            (<simple-intermediate-word> . -158)
            (<method-defining-word> . -146)
            (<generic-function-defining-word> . -193)
            (<seal-word> . -145) (:parsed-name . -211))
           ((<dot> . 549) (<lsbracket> . 549) (<lbracket> . 549)
            (<becomes> . 549) (<var-singleton-sep> . 549)
            (<binds> . 549) (<minus> . 549) (<binary-operator> . 549)
            (:end . 549) (<statement-sep> . 549) (<implies> . 549)
            (<var-sep> . 549) (<rbracket> . 549) (<symbol> . 549)
            (:parsed-name . 549) (<rcbracket> . 549)
            (<simple-intermediate-word> . 549)
            (<expr-intermediate-word> . 549)
            (<details-intermediate-word> . 549) (<rsbracket> . 549)
            (<lcbracket> . 549) (<keyword> . 549))
           ((<dot> . 540) (<lsbracket> . 540) (<lbracket> . 540)
            (<becomes> . 540) (<var-singleton-sep> . 540)
            (<binds> . 540) (<minus> . 540) (<binary-operator> . 540)
            (:end . 540) (<statement-sep> . 540) (<implies> . 540)
            (<var-sep> . 540) (<rbracket> . 540) (<symbol> . 540)
            (:parsed-name . 540) (<simple-intermediate-word> . 540)
            (<expr-intermediate-word> . 540)
            (<details-intermediate-word> . 540) (<rsbracket> . 540)
            (<rcbracket> . 540) (<lcbracket> . 540) (<keyword> . 540))
           ((:end . 7) (<statement-sep> . 7)
            (:parsed-local-declaration . 7)
            (<fragment-local-declaration-word> . 7) (:local . 7)
            (:let . 7) (:parsed-defining-form . 7) (<seal-word> . 7)
            (:define . 7) (<var-sep> . 7) (<implies> . 7)
            (<syntax-open> . 7) (:parsed-literal . 7)
            (:parsed-case-body . 7) (:parsed-body . 7)
            (:parsed-expression . 7) (:parsed-variable . 7)
            (:parsed-name . 7) (<query-equal> . 7) (<query-query> . 7)
            (<query> . 7) (<ellipsis> . 7) (<var-type-sep> . 7)
            (:otherwise . 7) (:&all-keys . 7) (:&key . 7) (:&rest . 7)
            (:&next . 7) (<dot> . 7) (<fragment-function-word> . 7)
            (<lcbracket> . 7) (<lsbracket> . 7) (<lbracket> . 7)
            (<not> . 7) (<becomes> . 7) (<var-singleton-sep> . 7)
            (<binds> . 7) (<minus> . 7) (<binary-operator> . 7)
            (<fragment-define-bindings-word> . 7)
            (<fragment-define-word> . 7) (<defining-word> . 7)
            (<symbol> . 7) (<vector-open> . 7) (<list-open> . 7)
            (:false . 7) (:true . 7) (<keyword> . 7) (<string> . 7)
            (<literal> . 7) (:method . 7) (:parsed-statement . 7)
            (:macro-case . 7)
            (<fragment-define-bindings-and-begin-word> . 7)
            (<fragment-define-and-begin-word> . 7)
            (<fragment-begin-word> . 7) (<simple-begin-word> . 7)
            (<expr-begin-word> . 7) (<details-begin-word> . 7)
            (<generic-function-defining-word> . 7) (:generic . 7)
            (<method-defining-word> . 7) (<rcbracket> . 7)
            (<details-intermediate-word> . 7)
            (<expr-intermediate-word> . 7)
            (<simple-intermediate-word> . 7) (<rsbracket> . 7)
            (<rbracket> . 7))
           ((<dot> . 96) (<lsbracket> . 96) (<lbracket> . 96)
            (<becomes> . 96) (<var-singleton-sep> . 96) (<binds> . 96)
            (<minus> . 96) (<binary-operator> . 96) (:end . 96)
            (<var-type-sep> . 96) (<statement-sep> . 96)
            (<implies> . 96) (<var-sep> . 96) (<rbracket> . 96)
            (<symbol> . 96) (<defining-word> . 96) (:parsed-name . 96)
            (<simple-intermediate-word> . 96)
            (<expr-intermediate-word> . 96)
            (<details-intermediate-word> . 96) (:define . 96)
            (<seal-word> . 96) (:parsed-defining-form . 96) (:let . 96)
            (:local . 96) (<fragment-local-declaration-word> . 96)
            (:parsed-local-declaration . 96) (<keyword> . 96)
            (<fragment-function-word> . 96) (<literal> . 96)
            (<string> . 96) (:true . 96) (:false . 96)
            (<list-open> . 96) (<vector-open> . 96)
            (:parsed-literal . 96) (<method-defining-word> . 96)
            (:generic . 96) (<generic-function-defining-word> . 96)
            (<ellipsis> . 96) (<fragment-define-word> . 96)
            (<fragment-define-bindings-word> . 96)
            (:parsed-variable . 96) (:method . 96)
            (<details-begin-word> . 96) (<expr-begin-word> . 96)
            (<simple-begin-word> . 96) (<fragment-begin-word> . 96)
            (<fragment-define-and-begin-word> . 96)
            (<fragment-define-bindings-and-begin-word> . 96)
            (:macro-case . 96) (:parsed-statement . 96)
            (:parsed-body . 96) (:parsed-expression . 96)
            (<syntax-open> . 96) (<unary-operator> . 96) (<not> . 96)
            (<rsbracket> . 96) (<rcbracket> . 96) (<lcbracket> . 96))
           ((<dot> . 285) (<lsbracket> . 285) (<lbracket> . 285)
            (<becomes> . 285) (<var-singleton-sep> . 285)
            (<binds> . 285) (<minus> . 285) (<binary-operator> . 285)
            (:end . 285) (<var-type-sep> . 285) (<statement-sep> . 285)
            (<implies> . 285) (<var-sep> . 285) (<rbracket> . 285)
            (<symbol> . 285) (<defining-word> . 285)
            (:parsed-name . 285) (<simple-intermediate-word> . 285)
            (<expr-intermediate-word> . 285)
            (<details-intermediate-word> . 285) (:define . 285)
            (<seal-word> . 285) (:parsed-defining-form . 285)
            (:let . 285) (:local . 285)
            (<fragment-local-declaration-word> . 285)
            (:parsed-local-declaration . 285) (<keyword> . 285)
            (<fragment-function-word> . 285) (<literal> . 285)
            (<string> . 285) (:true . 285) (:false . 285)
            (<list-open> . 285) (<vector-open> . 285)
            (:parsed-literal . 285) (<method-defining-word> . 285)
            (:generic . 285) (<generic-function-defining-word> . 285)
            (<ellipsis> . 285) (<fragment-define-word> . 285)
            (<fragment-define-bindings-word> . 285)
            (:parsed-variable . 285) (:method . 285)
            (<details-begin-word> . 285) (<expr-begin-word> . 285)
            (<simple-begin-word> . 285) (<fragment-begin-word> . 285)
            (<fragment-define-and-begin-word> . 285)
            (<fragment-define-bindings-and-begin-word> . 285)
            (:macro-case . 285) (:parsed-statement . 285)
            (:parsed-body . 285) (:parsed-expression . 285)
            (<syntax-open> . 285) (<unary-operator> . 285)
            (<not> . 285) (<rsbracket> . 285) (<rcbracket> . 285)
            (<lcbracket> . 285))
           ((<dot> . 553) (<lsbracket> . 553) (<lbracket> . 553)
            (<becomes> . 553) (<var-singleton-sep> . 553)
            (<binds> . 553) (<minus> . 553) (<binary-operator> . 553)
            (:end . 553) (<statement-sep> . 553) (<implies> . 553)
            (<var-sep> . 553) (<syntax-open> . 553)
            (:parsed-literal . 553) (:parsed-case-body . 553)
            (:parsed-body . 553) (:parsed-expression . 553)
            (:parsed-variable . 553) (:parsed-name . 553)
            (<query-equal> . 553) (<query-query> . 553) (<query> . 553)
            (<ellipsis> . 553) (<var-type-sep> . 553)
            (:otherwise . 553) (:&all-keys . 553) (:&key . 553)
            (:&rest . 553) (:&next . 553)
            (<fragment-function-word> . 553) (<lcbracket> . 553)
            (<not> . 553) (<fragment-define-bindings-word> . 553)
            (<fragment-define-word> . 553) (<defining-word> . 553)
            (<symbol> . 553) (<vector-open> . 553) (<list-open> . 553)
            (:false . 553) (:true . 553) (<keyword> . 553)
            (<string> . 553) (<literal> . 553)
            (:parsed-local-declaration . 553)
            (<fragment-local-declaration-word> . 553) (:local . 553)
            (:let . 553) (:parsed-defining-form . 553)
            (<seal-word> . 553) (:define . 553) (<rbracket> . 553)
            (<rsbracket> . 553) (<simple-intermediate-word> . 553)
            (<expr-intermediate-word> . 553)
            (<details-intermediate-word> . 553) (<rcbracket> . 553))
           ((<dot> . 121) (<lsbracket> . 121) (<lbracket> . 121)
            (<becomes> . 121) (<var-singleton-sep> . 121)
            (<binds> . 121) (<minus> . 121) (<binary-operator> . 121)
            (:end . 121) (<statement-sep> . 121) (<implies> . 121)
            (<var-sep> . 121) (<rbracket> . 121) (<symbol> . 121)
            (:parsed-name . 121) (<simple-intermediate-word> . 121)
            (<expr-intermediate-word> . 121)
            (<details-intermediate-word> . 121) (<rsbracket> . 121)
            (<rcbracket> . 121) (<lcbracket> . 121) (<keyword> . 121))
           ((<binary-operator> . -245) (<minus> . -244)
            (<binds> . -246) (<var-singleton-sep> . -247)
            (<becomes> . -243) (<statement-sep> . 103)
            (<var-sep> . 103) (<rbracket> . 103) (<rsbracket> . 103))
           ((:end . 6) (<statement-sep> . 6)
            (:parsed-local-declaration . 6)
            (<fragment-local-declaration-word> . 6) (:local . 6)
            (:let . 6) (:parsed-defining-form . 6) (<seal-word> . 6)
            (:define . 6) (<var-sep> . 6) (<implies> . 6)
            (<syntax-open> . 6) (:parsed-literal . 6)
            (:parsed-case-body . 6) (:parsed-body . 6)
            (:parsed-expression . 6) (:parsed-variable . 6)
            (:parsed-name . 6) (<query-equal> . 6) (<query-query> . 6)
            (<query> . 6) (<ellipsis> . 6) (<var-type-sep> . 6)
            (:otherwise . 6) (:&all-keys . 6) (:&key . 6) (:&rest . 6)
            (:&next . 6) (<dot> . 6) (<fragment-function-word> . 6)
            (<lcbracket> . 6) (<lsbracket> . 6) (<lbracket> . 6)
            (<not> . 6) (<becomes> . 6) (<var-singleton-sep> . 6)
            (<binds> . 6) (<minus> . 6) (<binary-operator> . 6)
            (<fragment-define-bindings-word> . 6)
            (<fragment-define-word> . 6) (<defining-word> . 6)
            (<symbol> . 6) (<vector-open> . 6) (<list-open> . 6)
            (:false . 6) (:true . 6) (<keyword> . 6) (<string> . 6)
            (<literal> . 6) (:method . 6) (:parsed-statement . 6)
            (:macro-case . 6)
            (<fragment-define-bindings-and-begin-word> . 6)
            (<fragment-define-and-begin-word> . 6)
            (<fragment-begin-word> . 6) (<simple-begin-word> . 6)
            (<expr-begin-word> . 6) (<details-begin-word> . 6)
            (<generic-function-defining-word> . 6) (:generic . 6)
            (<method-defining-word> . 6) (<rcbracket> . 6)
            (<details-intermediate-word> . 6)
            (<expr-intermediate-word> . 6)
            (<simple-intermediate-word> . 6) (<rsbracket> . 6)
            (<rbracket> . 6))
           ((<fragment-function-word> . 111) (<literal> . 111)
            (<string> . 111) (:true . 111) (:false . 111)
            (<list-open> . 111) (<vector-open> . 111)
            (:parsed-literal . 111) (<symbol> . 111)
            (<defining-word> . 111) (<method-defining-word> . 111)
            (:generic . 111) (<generic-function-defining-word> . 111)
            (<ellipsis> . 111) (<fragment-define-word> . 111)
            (<fragment-define-bindings-word> . 111)
            (:parsed-name . 111) (:parsed-variable . 111)
            (<lbracket> . 111) (:method . 111)
            (<details-begin-word> . 111) (<expr-begin-word> . 111)
            (<simple-begin-word> . 111) (<fragment-begin-word> . 111)
            (<fragment-define-and-begin-word> . 111)
            (<fragment-define-bindings-and-begin-word> . 111)
            (:macro-case . 111) (:parsed-statement . 111)
            (:parsed-body . 111) (:parsed-expression . 111)
            (<syntax-open> . 111))
           ((<fragment-function-word> . 110) (<literal> . 110)
            (<string> . 110) (:true . 110) (:false . 110)
            (<list-open> . 110) (<vector-open> . 110)
            (:parsed-literal . 110) (<symbol> . 110)
            (<defining-word> . 110) (<method-defining-word> . 110)
            (:generic . 110) (<generic-function-defining-word> . 110)
            (<ellipsis> . 110) (<fragment-define-word> . 110)
            (<fragment-define-bindings-word> . 110)
            (:parsed-name . 110) (:parsed-variable . 110)
            (<lbracket> . 110) (:method . 110)
            (<details-begin-word> . 110) (<expr-begin-word> . 110)
            (<simple-begin-word> . 110) (<fragment-begin-word> . 110)
            (<fragment-define-and-begin-word> . 110)
            (<fragment-define-bindings-and-begin-word> . 110)
            (:macro-case . 110) (:parsed-statement . 110)
            (:parsed-body . 110) (:parsed-expression . 110)
            (<syntax-open> . 110))
           ((<dot> . 542) (<lsbracket> . 542) (<lbracket> . 542)
            (<becomes> . 542) (<var-singleton-sep> . 542)
            (<binds> . 542) (<minus> . 542) (<binary-operator> . 542)
            (:end . 542) (<var-type-sep> . 542) (<statement-sep> . 542)
            (<implies> . 542) (<var-sep> . 542) (<rbracket> . 542)
            (<symbol> . 542) (<defining-word> . 542)
            (:parsed-name . 542) (<simple-intermediate-word> . 542)
            (<expr-intermediate-word> . 542)
            (<details-intermediate-word> . 542) (:define . 542)
            (<seal-word> . 542) (:parsed-defining-form . 542)
            (:let . 542) (:local . 542)
            (<fragment-local-declaration-word> . 542)
            (:parsed-local-declaration . 542) (<keyword> . 542)
            (<fragment-function-word> . 542) (<literal> . 542)
            (<string> . 542) (:true . 542) (:false . 542)
            (<list-open> . 542) (<vector-open> . 542)
            (:parsed-literal . 542) (<method-defining-word> . 542)
            (:generic . 542) (<generic-function-defining-word> . 542)
            (<ellipsis> . 542) (<fragment-define-word> . 542)
            (<fragment-define-bindings-word> . 542)
            (:parsed-variable . 542) (:method . 542)
            (<details-begin-word> . 542) (<expr-begin-word> . 542)
            (<simple-begin-word> . 542) (<fragment-begin-word> . 542)
            (<fragment-define-and-begin-word> . 542)
            (<fragment-define-bindings-and-begin-word> . 542)
            (:macro-case . 542) (:parsed-statement . 542)
            (:parsed-body . 542) (:parsed-expression . 542)
            (<syntax-open> . 542) (<unary-operator> . 542)
            (<not> . 542) (<rsbracket> . 542) (<rcbracket> . 542)
            (<lcbracket> . 542))
           ((<statement-sep> . -844)) ((<lbracket> . -84))
           ((<statement-sep> . 552) (:end . 552) (<rbracket> . 552)
            (<rsbracket> . 552) (<simple-intermediate-word> . 552)
            (<expr-intermediate-word> . 552)
            (<details-intermediate-word> . 552) (<rcbracket> . 552))
           ((<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((<dot> . -74) (<lsbracket> . -73) (<lbracket> . -72)
            (<becomes> . 107) (<var-singleton-sep> . 107)
            (<binds> . 107) (<minus> . 107) (<binary-operator> . 107)
            (:end . 107) (<statement-sep> . 107) (<implies> . 107)
            (<var-sep> . 107) (<rbracket> . 107) (<symbol> . 107)
            (:parsed-name . 107) (<simple-intermediate-word> . 107)
            (<expr-intermediate-word> . 107)
            (<details-intermediate-word> . 107) (<rsbracket> . 107)
            (<rcbracket> . 107) (<lcbracket> . 107) (<keyword> . 107))
           ((<rbracket> . 260) (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<unary-operator> . -65) (<minus> . -64) (<not> . -44)
            (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<keyword> . -78) (:parsed-property-list . -77)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<unary-operator> . -65) (<minus> . -64) (<not> . -44)
            (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<keyword> . -78) (:parsed-property-list . -77)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((:parsed-name . -66) (:parsed-variable . -14)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59))
           ((<dot> . 120) (<lsbracket> . 120) (<lbracket> . 120)
            (<becomes> . 120) (<var-singleton-sep> . 120)
            (<binds> . 120) (<minus> . 120) (<binary-operator> . 120)
            (:end . 120) (<statement-sep> . 120) (<implies> . 120)
            (<var-sep> . 120) (<rbracket> . 120) (<symbol> . 120)
            (:parsed-name . 120) (<simple-intermediate-word> . 120)
            (<expr-intermediate-word> . 120)
            (<details-intermediate-word> . 120) (<rsbracket> . 120)
            (<rcbracket> . 120) (<lcbracket> . 120) (<keyword> . 120))
           ((<var-sep> . 124) (<rbracket> . 124) (<rsbracket> . 124))
           ((<var-sep> . 548) (<rbracket> . 548) (<rsbracket> . 548))
           ((<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<keyword> . -221) (<unary-operator> . -65) (<minus> . -64)
            (<not> . -44) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53) (<var-sep> . 125) (<rbracket> . 125)
            (<rsbracket> . 125))
           ((<var-sep> . 603) (<rbracket> . 603) (<rsbracket> . 603))
           ((<var-sep> . -837) (<rsbracket> . -843))
           ((<dot> . -74) (<lsbracket> . -73) (<lbracket> . -72)
            (<rsbracket> . 108) (<details-intermediate-word> . 108)
            (<expr-intermediate-word> . 108)
            (<simple-intermediate-word> . 108) (:parsed-name . 108)
            (<symbol> . 108) (<rbracket> . 108) (<var-sep> . 108)
            (<implies> . 108) (<statement-sep> . 108) (:end . 108)
            (<binary-operator> . 108) (<minus> . 108) (<binds> . 108)
            (<var-singleton-sep> . 108) (<becomes> . 108)
            (<keyword> . 108) (<lcbracket> . 108) (<rcbracket> . 108))
           ((<rbracket> . -842))
           ((<var-sep> . -837) (<rbracket> . 259))
           ((<rbracket> . 290) (<var-sep> . 308)
            (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (<seal-word> . -4) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<implies> . -110) (<literal> . -124) (<string> . -128)
            (<keyword> . -112) (:true . -87) (:false . -92)
            (<list-open> . -116) (<vector-open> . -122)
            (<symbol> . -105) (<defining-word> . -117)
            (<fragment-define-word> . -95)
            (<fragment-define-bindings-word> . -132)
            (<binary-operator> . -113) (<minus> . -134)
            (<binds> . -136) (<var-singleton-sep> . -104)
            (<becomes> . -120) (<not> . -119) (:let . -19)
            (:local . -29) (<fragment-local-declaration-word> . -45)
            (:parsed-local-declaration . -69) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<lbracket> . -99) (<lsbracket> . -100)
            (<lcbracket> . -107) (<dot> . -101) (:&next . -125)
            (:&rest . -135) (:&key . -85) (:&all-keys . -111)
            (:otherwise . -88) (<var-type-sep> . -114)
            (<ellipsis> . -131) (<query> . -97) (<query-query> . -139)
            (<query-equal> . -90) (:parsed-name . -137)
            (:parsed-variable . -93) (:parsed-expression . -123)
            (:parsed-body . -130) (:parsed-case-body . -89)
            (:parsed-literal . -129) (:define . -31)
            (:parsed-defining-form . -23))
           ((<implies> . 328) (<syntax-open> . 328)
            (:parsed-literal . 328) (:parsed-case-body . 328)
            (:parsed-body . 328) (:parsed-expression . 328)
            (:parsed-variable . 328) (:parsed-name . 328)
            (<query-equal> . 328) (<query-query> . 328) (<query> . 328)
            (<ellipsis> . 328) (<var-type-sep> . 328)
            (:otherwise . 328) (:&all-keys . 328) (:&key . 328)
            (:&rest . 328) (:&next . 328) (<dot> . 328)
            (<fragment-function-word> . 328) (<lcbracket> . 328)
            (<lsbracket> . 328) (<lbracket> . 328) (<not> . 328)
            (<becomes> . 328) (<var-singleton-sep> . 328)
            (<binds> . 328) (<minus> . 328) (<binary-operator> . 328)
            (<fragment-define-bindings-word> . 328)
            (<fragment-define-word> . 328) (<defining-word> . 328)
            (<symbol> . 328) (<vector-open> . 328) (<list-open> . 328)
            (:false . 328) (:true . 328) (<keyword> . 328)
            (<string> . 328) (<literal> . 328) (:method . 328)
            (:parsed-statement . 328) (:macro-case . 328)
            (<fragment-define-bindings-and-begin-word> . 328)
            (<fragment-define-and-begin-word> . 328)
            (<fragment-begin-word> . 328) (<simple-begin-word> . 328)
            (<expr-begin-word> . 328) (<details-begin-word> . 328)
            (<var-sep> . 328) (:parsed-local-declaration . 328)
            (<fragment-local-declaration-word> . 328) (:local . 328)
            (:let . 328) (:parsed-defining-form . 328)
            (<seal-word> . 328) (:define . 328) (<statement-sep> . 328)
            (:end . 328) (<rbracket> . 328) (<rsbracket> . 328)
            (<rcbracket> . 328) (<details-intermediate-word> . 328)
            (<expr-intermediate-word> . 328)
            (<simple-intermediate-word> . 328))
           ((<var-sep> . 311) (:parsed-local-declaration . 311)
            (<fragment-local-declaration-word> . 311) (:local . 311)
            (:let . 311) (:parsed-defining-form . 311)
            (<seal-word> . 311) (:define . 311) (<statement-sep> . 311)
            (:end . 311) (<rbracket> . 311) (<rsbracket> . 311)
            (<rcbracket> . 311) (<details-intermediate-word> . 311)
            (<expr-intermediate-word> . 311)
            (<simple-intermediate-word> . 311))
           ((<implies> . 340) (<syntax-open> . 340)
            (:parsed-literal . 340) (:parsed-case-body . 340)
            (:parsed-body . 340) (:parsed-expression . 340)
            (:parsed-variable . 340) (:parsed-name . 340)
            (<query-equal> . 340) (<query-query> . 340) (<query> . 340)
            (<ellipsis> . 340) (<var-type-sep> . 340)
            (:otherwise . 340) (:&all-keys . 340) (:&key . 340)
            (:&rest . 340) (:&next . 340) (<dot> . 340)
            (<fragment-function-word> . 340) (<lcbracket> . 340)
            (<lsbracket> . 340) (<lbracket> . 340) (<not> . 340)
            (<becomes> . 340) (<var-singleton-sep> . 340)
            (<binds> . 340) (<minus> . 340) (<binary-operator> . 340)
            (<fragment-define-bindings-word> . 340)
            (<fragment-define-word> . 340) (<defining-word> . 340)
            (<symbol> . 340) (<vector-open> . 340) (<list-open> . 340)
            (:false . 340) (:true . 340) (<keyword> . 340)
            (<string> . 340) (<literal> . 340) (:method . 340)
            (:parsed-statement . 340) (:macro-case . 340)
            (<fragment-define-bindings-and-begin-word> . 340)
            (<fragment-define-and-begin-word> . 340)
            (<fragment-begin-word> . 340) (<simple-begin-word> . 340)
            (<expr-begin-word> . 340) (<details-begin-word> . 340)
            (<var-sep> . 340) (:parsed-local-declaration . 340)
            (<fragment-local-declaration-word> . 340) (:local . 340)
            (:let . 340) (:parsed-defining-form . 340)
            (<seal-word> . 340) (:define . 340) (<statement-sep> . 340)
            (:end . 340) (<escaped-hash-word> . 340)
            (<rcbracket> . 340) (<rbracket> . 340) (<rsbracket> . 340)
            (<details-intermediate-word> . 340)
            (<expr-intermediate-word> . 340)
            (<simple-intermediate-word> . 340))
           ((<implies> . 330) (<syntax-open> . 330)
            (:parsed-literal . 330) (:parsed-case-body . 330)
            (:parsed-body . 330) (:parsed-expression . 330)
            (:parsed-variable . 330) (:parsed-name . 330)
            (<query-equal> . 330) (<query-query> . 330) (<query> . 330)
            (<ellipsis> . 330) (<var-type-sep> . 330)
            (:otherwise . 330) (:&all-keys . 330) (:&key . 330)
            (:&rest . 330) (:&next . 330) (<dot> . 330)
            (<fragment-function-word> . 330) (<lcbracket> . 330)
            (<lsbracket> . 330) (<lbracket> . 330) (<not> . 330)
            (<becomes> . 330) (<var-singleton-sep> . 330)
            (<binds> . 330) (<minus> . 330) (<binary-operator> . 330)
            (<fragment-define-bindings-word> . 330)
            (<fragment-define-word> . 330) (<defining-word> . 330)
            (<symbol> . 330) (<vector-open> . 330) (<list-open> . 330)
            (:false . 330) (:true . 330) (<keyword> . 330)
            (<string> . 330) (<literal> . 330) (:method . 330)
            (:parsed-statement . 330) (:macro-case . 330)
            (<fragment-define-bindings-and-begin-word> . 330)
            (<fragment-define-and-begin-word> . 330)
            (<fragment-begin-word> . 330) (<simple-begin-word> . 330)
            (<expr-begin-word> . 330) (<details-begin-word> . 330)
            (<var-sep> . 330) (:parsed-local-declaration . 330)
            (<fragment-local-declaration-word> . 330) (:local . 330)
            (:let . 330) (:parsed-defining-form . 330)
            (<seal-word> . 330) (:define . 330) (<statement-sep> . 330)
            (:end . 330) (<rbracket> . 330) (<rsbracket> . 330)
            (<rcbracket> . 330) (<details-intermediate-word> . 330)
            (<expr-intermediate-word> . 330)
            (<simple-intermediate-word> . 330))
           ((<implies> . 359) (<syntax-open> . 359)
            (:parsed-literal . 359) (:parsed-case-body . 359)
            (:parsed-body . 359) (:parsed-expression . 359)
            (:parsed-variable . 359) (:parsed-name . 359)
            (<query-equal> . 359) (<query-query> . 359) (<query> . 359)
            (<ellipsis> . 359) (<var-type-sep> . 359)
            (:otherwise . 359) (:&all-keys . 359) (:&key . 359)
            (:&rest . 359) (:&next . 359) (<dot> . 359)
            (<fragment-function-word> . 359) (<lcbracket> . 359)
            (<lsbracket> . 359) (<lbracket> . 359) (<not> . 359)
            (<becomes> . 359) (<var-singleton-sep> . 359)
            (<binds> . 359) (<minus> . 359) (<binary-operator> . 359)
            (<fragment-define-bindings-word> . 359)
            (<fragment-define-word> . 359) (<defining-word> . 359)
            (<symbol> . 359) (<vector-open> . 359) (<list-open> . 359)
            (:false . 359) (:true . 359) (<keyword> . 359)
            (<string> . 359) (<literal> . 359) (:method . 359)
            (:parsed-statement . 359) (:macro-case . 359)
            (<fragment-define-bindings-and-begin-word> . 359)
            (<fragment-define-and-begin-word> . 359)
            (<fragment-begin-word> . 359) (<simple-begin-word> . 359)
            (<expr-begin-word> . 359) (<details-begin-word> . 359)
            (<var-sep> . 359) (:parsed-local-declaration . 359)
            (<fragment-local-declaration-word> . 359) (:local . 359)
            (:let . 359) (:parsed-defining-form . 359)
            (<seal-word> . 359) (:define . 359) (<statement-sep> . 359)
            (:end . 359) (<rbracket> . 359) (<rsbracket> . 359)
            (<rcbracket> . 359) (<details-intermediate-word> . 359)
            (<expr-intermediate-word> . 359)
            (<simple-intermediate-word> . 359))
           ((<implies> . 335) (<syntax-open> . 335)
            (:parsed-literal . 335) (:parsed-case-body . 335)
            (:parsed-body . 335) (:parsed-expression . 335)
            (:parsed-variable . 335) (:parsed-name . 335)
            (<query-equal> . 335) (<query-query> . 335) (<query> . 335)
            (<ellipsis> . 335) (<var-type-sep> . 335)
            (:otherwise . 335) (:&all-keys . 335) (:&key . 335)
            (:&rest . 335) (:&next . 335) (<dot> . 335)
            (<fragment-function-word> . 335) (<lcbracket> . 335)
            (<lsbracket> . 335) (<lbracket> . 335) (<not> . 335)
            (<becomes> . 335) (<var-singleton-sep> . 335)
            (<binds> . 335) (<minus> . 335) (<binary-operator> . 335)
            (<fragment-define-bindings-word> . 335)
            (<fragment-define-word> . 335) (<defining-word> . 335)
            (<symbol> . 335) (<vector-open> . 335) (<list-open> . 335)
            (:false . 335) (:true . 335) (<keyword> . 335)
            (<string> . 335) (<literal> . 335) (:method . 335)
            (:parsed-statement . 335) (:macro-case . 335)
            (<fragment-define-bindings-and-begin-word> . 335)
            (<fragment-define-and-begin-word> . 335)
            (<fragment-begin-word> . 335) (<simple-begin-word> . 335)
            (<expr-begin-word> . 335) (<details-begin-word> . 335)
            (<var-sep> . 335) (:parsed-local-declaration . 335)
            (<fragment-local-declaration-word> . 335) (:local . 335)
            (:let . 335) (:parsed-defining-form . 335)
            (<seal-word> . 335) (:define . 335) (<statement-sep> . 335)
            (:end . 335) (<rbracket> . 335) (<rsbracket> . 335)
            (<rcbracket> . 335) (<details-intermediate-word> . 335)
            (<expr-intermediate-word> . 335)
            (<simple-intermediate-word> . 335))
           ((<var-sep> . -687))
           ((<implies> . 341) (<syntax-open> . 341)
            (:parsed-literal . 341) (:parsed-case-body . 341)
            (:parsed-body . 341) (:parsed-expression . 341)
            (:parsed-variable . 341) (:parsed-name . 341)
            (<query-equal> . 341) (<query-query> . 341) (<query> . 341)
            (<ellipsis> . 341) (<var-type-sep> . 341)
            (:otherwise . 341) (:&all-keys . 341) (:&key . 341)
            (:&rest . 341) (:&next . 341) (<dot> . 341)
            (<fragment-function-word> . 341) (<lcbracket> . 341)
            (<lsbracket> . 341) (<lbracket> . 341) (<not> . 341)
            (<becomes> . 341) (<var-singleton-sep> . 341)
            (<binds> . 341) (<minus> . 341) (<binary-operator> . 341)
            (<fragment-define-bindings-word> . 341)
            (<fragment-define-word> . 341) (<defining-word> . 341)
            (<symbol> . 341) (<vector-open> . 341) (<list-open> . 341)
            (:false . 341) (:true . 341) (<keyword> . 341)
            (<string> . 341) (<literal> . 341) (:method . 341)
            (:parsed-statement . 341) (:macro-case . 341)
            (<fragment-define-bindings-and-begin-word> . 341)
            (<fragment-define-and-begin-word> . 341)
            (<fragment-begin-word> . 341) (<simple-begin-word> . 341)
            (<expr-begin-word> . 341) (<details-begin-word> . 341)
            (<var-sep> . 341) (:parsed-local-declaration . 341)
            (<fragment-local-declaration-word> . 341) (:local . 341)
            (:let . 341) (:parsed-defining-form . 341)
            (<seal-word> . 341) (:define . 341) (<statement-sep> . 341)
            (:end . 341) (<escaped-hash-word> . 341)
            (<rcbracket> . 341) (<rbracket> . 341) (<rsbracket> . 341)
            (<details-intermediate-word> . 341)
            (<expr-intermediate-word> . 341)
            (<simple-intermediate-word> . 341))
           ((<implies> . 356) (<syntax-open> . 356)
            (:parsed-literal . 356) (:parsed-case-body . 356)
            (:parsed-body . 356) (:parsed-expression . 356)
            (:parsed-variable . 356) (:parsed-name . 356)
            (<query-equal> . 356) (<query-query> . 356) (<query> . 356)
            (<ellipsis> . 356) (<var-type-sep> . 356)
            (:otherwise . 356) (:&all-keys . 356) (:&key . 356)
            (:&rest . 356) (:&next . 356) (<dot> . 356)
            (<fragment-function-word> . 356) (<lcbracket> . 356)
            (<lsbracket> . 356) (<lbracket> . 356) (<not> . 356)
            (<becomes> . 356) (<var-singleton-sep> . 356)
            (<binds> . 356) (<minus> . 356) (<binary-operator> . 356)
            (<fragment-define-bindings-word> . 356)
            (<fragment-define-word> . 356) (<defining-word> . 356)
            (<symbol> . 356) (<vector-open> . 356) (<list-open> . 356)
            (:false . 356) (:true . 356) (<keyword> . 356)
            (<string> . 356) (<literal> . 356) (:method . 356)
            (:parsed-statement . 356) (:macro-case . 356)
            (<fragment-define-bindings-and-begin-word> . 356)
            (<fragment-define-and-begin-word> . 356)
            (<fragment-begin-word> . 356) (<simple-begin-word> . 356)
            (<expr-begin-word> . 356) (<details-begin-word> . 356)
            (<var-sep> . 356) (:parsed-local-declaration . 356)
            (<fragment-local-declaration-word> . 356) (:local . 356)
            (:let . 356) (:parsed-defining-form . 356)
            (<seal-word> . 356) (:define . 356) (<statement-sep> . 356)
            (:end . 356) (<rbracket> . 356) (<rsbracket> . 356)
            (<rcbracket> . 356) (<details-intermediate-word> . 356)
            (<expr-intermediate-word> . 356)
            (<simple-intermediate-word> . 356))
           ((:end . 291) (<rbracket> . 291))
           ((<implies> . 347) (<syntax-open> . 347)
            (:parsed-literal . 347) (:parsed-case-body . 347)
            (:parsed-body . 347) (:parsed-expression . 347)
            (:parsed-variable . 347) (:parsed-name . 347)
            (<query-equal> . 347) (<query-query> . 347) (<query> . 347)
            (<ellipsis> . 347) (<var-type-sep> . 347)
            (:otherwise . 347) (:&all-keys . 347) (:&key . 347)
            (:&rest . 347) (:&next . 347) (<dot> . 347)
            (<fragment-function-word> . 347) (<lcbracket> . 347)
            (<lsbracket> . 347) (<lbracket> . 347) (<not> . 347)
            (<becomes> . 347) (<var-singleton-sep> . 347)
            (<binds> . 347) (<minus> . 347) (<binary-operator> . 347)
            (<fragment-define-bindings-word> . 347)
            (<fragment-define-word> . 347) (<defining-word> . 347)
            (<symbol> . 347) (<vector-open> . 347) (<list-open> . 347)
            (:false . 347) (:true . 347) (<keyword> . 347)
            (<string> . 347) (<literal> . 347) (:method . 347)
            (:parsed-statement . 347) (:macro-case . 347)
            (<fragment-define-bindings-and-begin-word> . 347)
            (<fragment-define-and-begin-word> . 347)
            (<fragment-begin-word> . 347) (<simple-begin-word> . 347)
            (<expr-begin-word> . 347) (<details-begin-word> . 347)
            (<var-sep> . 347) (:parsed-local-declaration . 347)
            (<fragment-local-declaration-word> . 347) (:local . 347)
            (:let . 347) (:parsed-defining-form . 347)
            (<seal-word> . 347) (:define . 347) (<statement-sep> . 347)
            (:end . 347) (<escaped-hash-word> . 347)
            (<rcbracket> . 347) (<rbracket> . 347) (<rsbracket> . 347)
            (<details-intermediate-word> . 347)
            (<expr-intermediate-word> . 347)
            (<simple-intermediate-word> . 347))
           ((<implies> . 313) (<syntax-open> . 313)
            (:parsed-literal . 313) (:parsed-case-body . 313)
            (:parsed-body . 313) (:parsed-expression . 313)
            (:parsed-variable . 313) (:parsed-name . 313)
            (<query-equal> . 313) (<query-query> . 313) (<query> . 313)
            (<ellipsis> . 313) (<var-type-sep> . 313)
            (:otherwise . 313) (:&all-keys . 313) (:&key . 313)
            (:&rest . 313) (:&next . 313) (<dot> . 313)
            (<fragment-function-word> . 313) (<lcbracket> . 313)
            (<lsbracket> . 313) (<lbracket> . 313) (<not> . 313)
            (<becomes> . 313) (<var-singleton-sep> . 313)
            (<binds> . 313) (<minus> . 313) (<binary-operator> . 313)
            (<fragment-define-bindings-word> . 313)
            (<fragment-define-word> . 313) (<defining-word> . 313)
            (<symbol> . 313) (<vector-open> . 313) (<list-open> . 313)
            (:false . 313) (:true . 313) (<keyword> . 313)
            (<string> . 313) (<literal> . 313) (<var-sep> . 313)
            (:parsed-local-declaration . 313)
            (<fragment-local-declaration-word> . 313) (:local . 313)
            (:let . 313) (:parsed-defining-form . 313)
            (<seal-word> . 313) (:define . 313) (<statement-sep> . 313)
            (:end . 313) (<rbracket> . 313) (<rsbracket> . 313)
            (<rcbracket> . 313) (<details-intermediate-word> . 313)
            (<expr-intermediate-word> . 313)
            (<simple-intermediate-word> . 313))
           ((<implies> . 333) (<syntax-open> . 333)
            (:parsed-literal . 333) (:parsed-case-body . 333)
            (:parsed-body . 333) (:parsed-expression . 333)
            (:parsed-variable . 333) (:parsed-name . 333)
            (<query-equal> . 333) (<query-query> . 333) (<query> . 333)
            (<ellipsis> . 333) (<var-type-sep> . 333)
            (:otherwise . 333) (:&all-keys . 333) (:&key . 333)
            (:&rest . 333) (:&next . 333) (<dot> . 333)
            (<fragment-function-word> . 333) (<lcbracket> . 333)
            (<lsbracket> . 333) (<lbracket> . 333) (<not> . 333)
            (<becomes> . 333) (<var-singleton-sep> . 333)
            (<binds> . 333) (<minus> . 333) (<binary-operator> . 333)
            (<fragment-define-bindings-word> . 333)
            (<fragment-define-word> . 333) (<defining-word> . 333)
            (<symbol> . 333) (<vector-open> . 333) (<list-open> . 333)
            (:false . 333) (:true . 333) (<keyword> . 333)
            (<string> . 333) (<literal> . 333) (:method . 333)
            (:parsed-statement . 333) (:macro-case . 333)
            (<fragment-define-bindings-and-begin-word> . 333)
            (<fragment-define-and-begin-word> . 333)
            (<fragment-begin-word> . 333) (<simple-begin-word> . 333)
            (<expr-begin-word> . 333) (<details-begin-word> . 333)
            (<var-sep> . 333) (:parsed-local-declaration . 333)
            (<fragment-local-declaration-word> . 333) (:local . 333)
            (:let . 333) (:parsed-defining-form . 333)
            (<seal-word> . 333) (:define . 333) (<statement-sep> . 333)
            (:end . 333) (<rbracket> . 333) (<rsbracket> . 333)
            (<rcbracket> . 333) (<details-intermediate-word> . 333)
            (<expr-intermediate-word> . 333)
            (<simple-intermediate-word> . 333))
           ((<var-sep> . 309) (:parsed-local-declaration . 304)
            (<fragment-local-declaration-word> . 304) (:local . 304)
            (:let . 304) (:parsed-defining-form . 304)
            (<seal-word> . 304) (:define . 304) (<statement-sep> . 304)
            (:end . 304) (<rbracket> . 304) (<rsbracket> . 304)
            (<rcbracket> . 304) (<details-intermediate-word> . 304)
            (<expr-intermediate-word> . 304)
            (<simple-intermediate-word> . 304))
           ((<rbracket> . 293) (<var-sep> . 308)
            (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (<seal-word> . -4) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<implies> . -110) (<literal> . -124) (<string> . -128)
            (<keyword> . -112) (:true . -87) (:false . -92)
            (<list-open> . -116) (<vector-open> . -122)
            (<symbol> . -105) (<defining-word> . -117)
            (<fragment-define-word> . -95)
            (<fragment-define-bindings-word> . -132)
            (<binary-operator> . -113) (<minus> . -134)
            (<binds> . -136) (<var-singleton-sep> . -104)
            (<becomes> . -120) (<not> . -119) (:let . -19)
            (:local . -29) (<fragment-local-declaration-word> . -45)
            (:parsed-local-declaration . -69) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<lbracket> . -99) (<lsbracket> . -100)
            (<lcbracket> . -107) (<dot> . -101) (:&next . -125)
            (:&rest . -135) (:&key . -85) (:&all-keys . -111)
            (:otherwise . -88) (<var-type-sep> . -114)
            (<ellipsis> . -131) (<query> . -97) (<query-query> . -139)
            (<query-equal> . -90) (:parsed-name . -137)
            (:parsed-variable . -93) (:parsed-expression . -123)
            (:parsed-body . -130) (:parsed-case-body . -89)
            (:parsed-literal . -129) (:define . -31)
            (:parsed-defining-form . -23))
           ((<rsbracket> . 293) (<var-sep> . 308)
            (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (<seal-word> . -4) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<implies> . -110) (<literal> . -124) (<string> . -128)
            (<keyword> . -112) (:true . -87) (:false . -92)
            (<list-open> . -116) (<vector-open> . -122)
            (<symbol> . -105) (<defining-word> . -117)
            (<fragment-define-word> . -95)
            (<fragment-define-bindings-word> . -132)
            (<binary-operator> . -113) (<minus> . -134)
            (<binds> . -136) (<var-singleton-sep> . -104)
            (<becomes> . -120) (<not> . -119) (:let . -19)
            (:local . -29) (<fragment-local-declaration-word> . -45)
            (:parsed-local-declaration . -69) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<lbracket> . -99) (<lsbracket> . -100)
            (<lcbracket> . -107) (<dot> . -101) (:&next . -125)
            (:&rest . -135) (:&key . -85) (:&all-keys . -111)
            (:otherwise . -88) (<var-type-sep> . -114)
            (<ellipsis> . -131) (<query> . -97) (<query-query> . -139)
            (<query-equal> . -90) (:parsed-name . -137)
            (:parsed-variable . -93) (:parsed-expression . -123)
            (:parsed-body . -130) (:parsed-case-body . -89)
            (:parsed-literal . -129) (:define . -31)
            (:parsed-defining-form . -23))
           ((<implies> . 325) (<syntax-open> . 325)
            (:parsed-literal . 325) (:parsed-case-body . 325)
            (:parsed-body . 325) (:parsed-expression . 325)
            (:parsed-variable . 325) (:parsed-name . 325)
            (<query-equal> . 325) (<query-query> . 325) (<query> . 325)
            (<ellipsis> . 325) (<var-type-sep> . 325)
            (:otherwise . 325) (:&all-keys . 325) (:&key . 325)
            (:&rest . 325) (:&next . 325) (<dot> . 325)
            (<fragment-function-word> . 325) (<lcbracket> . 325)
            (<lsbracket> . 325) (<lbracket> . 325) (<not> . 325)
            (<becomes> . 325) (<var-singleton-sep> . 325)
            (<binds> . 325) (<minus> . 325) (<binary-operator> . 325)
            (<fragment-define-bindings-word> . 325)
            (<fragment-define-word> . 325) (<defining-word> . 325)
            (<symbol> . 325) (<vector-open> . 325) (<list-open> . 325)
            (:false . 325) (:true . 325) (<keyword> . 325)
            (<string> . 325) (<literal> . 325) (:method . 325)
            (:parsed-statement . 325) (:macro-case . 325)
            (<fragment-define-bindings-and-begin-word> . 325)
            (<fragment-define-and-begin-word> . 325)
            (<fragment-begin-word> . 325) (<simple-begin-word> . 325)
            (<expr-begin-word> . 325) (<details-begin-word> . 325)
            (<var-sep> . 325) (:parsed-local-declaration . 325)
            (<fragment-local-declaration-word> . 325) (:local . 325)
            (:let . 325) (:parsed-defining-form . 325)
            (<seal-word> . 325) (:define . 325) (<statement-sep> . 325)
            (:end . 325) (<rbracket> . 325) (<rsbracket> . 325)
            (<rcbracket> . 325) (<details-intermediate-word> . 325)
            (<expr-intermediate-word> . 325)
            (<simple-intermediate-word> . 325))
           ((<rbracket> . -836)) ((:end . 292) (<rbracket> . 292))
           ((<implies> . 352) (<syntax-open> . 352)
            (:parsed-literal . 352) (:parsed-case-body . 352)
            (:parsed-body . 352) (:parsed-expression . 352)
            (:parsed-variable . 352) (:parsed-name . 352)
            (<query-equal> . 352) (<query-query> . 352) (<query> . 352)
            (<ellipsis> . 352) (<var-type-sep> . 352)
            (:otherwise . 352) (:&all-keys . 352) (:&key . 352)
            (:&rest . 352) (:&next . 352) (<dot> . 352)
            (<fragment-function-word> . 352) (<lcbracket> . 352)
            (<lsbracket> . 352) (<lbracket> . 352) (<not> . 352)
            (<becomes> . 352) (<var-singleton-sep> . 352)
            (<binds> . 352) (<minus> . 352) (<binary-operator> . 352)
            (<fragment-define-bindings-word> . 352)
            (<fragment-define-word> . 352) (<defining-word> . 352)
            (<symbol> . 352) (<vector-open> . 352) (<list-open> . 352)
            (:false . 352) (:true . 352) (<keyword> . 352)
            (<string> . 352) (<literal> . 352) (:method . 352)
            (:parsed-statement . 352) (:macro-case . 352)
            (<fragment-define-bindings-and-begin-word> . 352)
            (<fragment-define-and-begin-word> . 352)
            (<fragment-begin-word> . 352) (<simple-begin-word> . 352)
            (<expr-begin-word> . 352) (<details-begin-word> . 352)
            (<var-sep> . 352) (:parsed-local-declaration . 352)
            (<fragment-local-declaration-word> . 352) (:local . 352)
            (:let . 352) (:parsed-defining-form . 352)
            (<seal-word> . 352) (:define . 352) (<statement-sep> . 352)
            (:end . 352) (<escaped-hash-word> . 352)
            (<rcbracket> . 352) (<rbracket> . 352) (<rsbracket> . 352)
            (<details-intermediate-word> . 352)
            (<expr-intermediate-word> . 352)
            (<simple-intermediate-word> . 352))
           ((<implies> . 345) (<syntax-open> . 345)
            (:parsed-literal . 345) (:parsed-case-body . 345)
            (:parsed-body . 345) (:parsed-expression . 345)
            (:parsed-variable . 345) (:parsed-name . 345)
            (<query-equal> . 345) (<query-query> . 345) (<query> . 345)
            (<ellipsis> . 345) (<var-type-sep> . 345)
            (:otherwise . 345) (:&all-keys . 345) (:&key . 345)
            (:&rest . 345) (:&next . 345) (<dot> . 345)
            (<fragment-function-word> . 345) (<lcbracket> . 345)
            (<lsbracket> . 345) (<lbracket> . 345) (<not> . 345)
            (<becomes> . 345) (<var-singleton-sep> . 345)
            (<binds> . 345) (<minus> . 345) (<binary-operator> . 345)
            (<fragment-define-bindings-word> . 345)
            (<fragment-define-word> . 345) (<defining-word> . 345)
            (<symbol> . 345) (<vector-open> . 345) (<list-open> . 345)
            (:false . 345) (:true . 345) (<keyword> . 345)
            (<string> . 345) (<literal> . 345) (:method . 345)
            (:parsed-statement . 345) (:macro-case . 345)
            (<fragment-define-bindings-and-begin-word> . 345)
            (<fragment-define-and-begin-word> . 345)
            (<fragment-begin-word> . 345) (<simple-begin-word> . 345)
            (<expr-begin-word> . 345) (<details-begin-word> . 345)
            (<var-sep> . 345) (:parsed-local-declaration . 345)
            (<fragment-local-declaration-word> . 345) (:local . 345)
            (:let . 345) (:parsed-defining-form . 345)
            (<seal-word> . 345) (:define . 345) (<statement-sep> . 345)
            (:end . 345) (<escaped-hash-word> . 345)
            (<rcbracket> . 345) (<rbracket> . 345) (<rsbracket> . 345)
            (<details-intermediate-word> . 345)
            (<expr-intermediate-word> . 345)
            (<simple-intermediate-word> . 345))
           ((<implies> . 557) (<syntax-open> . 557)
            (:parsed-literal . 557) (:parsed-case-body . 557)
            (:parsed-body . 557) (:parsed-expression . 557)
            (:parsed-variable . 557) (:parsed-name . 557)
            (<query-equal> . 557) (<query-query> . 557) (<query> . 557)
            (<ellipsis> . 557) (<var-type-sep> . 557)
            (:otherwise . 557) (:&all-keys . 557) (:&key . 557)
            (:&rest . 557) (:&next . 557) (<dot> . 557)
            (<fragment-function-word> . 557) (<lcbracket> . 557)
            (<lsbracket> . 557) (<lbracket> . 557) (<not> . 557)
            (<becomes> . 557) (<var-singleton-sep> . 557)
            (<binds> . 557) (<minus> . 557) (<binary-operator> . 557)
            (<fragment-define-bindings-word> . 557)
            (<fragment-define-word> . 557) (<defining-word> . 557)
            (<symbol> . 557) (<vector-open> . 557) (<list-open> . 557)
            (:false . 557) (:true . 557) (<keyword> . 557)
            (<string> . 557) (<literal> . 557) (:method . 557)
            (:parsed-statement . 557) (:macro-case . 557)
            (<fragment-define-bindings-and-begin-word> . 557)
            (<fragment-define-and-begin-word> . 557)
            (<fragment-begin-word> . 557) (<simple-begin-word> . 557)
            (<expr-begin-word> . 557) (<details-begin-word> . 557)
            (<var-sep> . 557) (:parsed-local-declaration . 557)
            (<fragment-local-declaration-word> . 557) (:local . 557)
            (:let . 557) (:parsed-defining-form . 557)
            (<seal-word> . 557) (:define . 557) (<statement-sep> . 557)
            (:end . 557) (<rbracket> . 557) (<rsbracket> . 557)
            (<rcbracket> . 557) (<details-intermediate-word> . 557)
            (<expr-intermediate-word> . 557)
            (<simple-intermediate-word> . 557))
           ((:end . 293) (<rcbracket> . 293) (<var-sep> . 308)
            (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (<seal-word> . -4) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<implies> . -110) (<literal> . -124) (<string> . -128)
            (<keyword> . -112) (:true . -87) (:false . -92)
            (<list-open> . -116) (<vector-open> . -122)
            (<symbol> . -105) (<defining-word> . -117)
            (<fragment-define-word> . -95)
            (<fragment-define-bindings-word> . -132)
            (<binary-operator> . -113) (<minus> . -134)
            (<binds> . -136) (<var-singleton-sep> . -104)
            (<becomes> . -120) (<not> . -119) (:let . -19)
            (:local . -29) (<fragment-local-declaration-word> . -45)
            (:parsed-local-declaration . -69) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<lbracket> . -99) (<lsbracket> . -100)
            (<lcbracket> . -107) (<dot> . -101) (:&next . -125)
            (:&rest . -135) (:&key . -85) (:&all-keys . -111)
            (:otherwise . -88) (<var-type-sep> . -114)
            (<ellipsis> . -131) (<query> . -97) (<query-query> . -139)
            (<query-equal> . -90) (:parsed-name . -137)
            (:parsed-variable . -93) (:parsed-expression . -123)
            (:parsed-body . -130) (:parsed-case-body . -89)
            (:parsed-literal . -129) (:define . -31)
            (:parsed-defining-form . -23))
           ((<statement-sep> . 300) (:end . 300) (<rbracket> . 300)
            (<rsbracket> . 300) (<rcbracket> . 300)
            (<details-intermediate-word> . 300)
            (<expr-intermediate-word> . 300)
            (<simple-intermediate-word> . 300))
           ((<var-sep> . 308) (:parsed-local-declaration . 308)
            (<fragment-local-declaration-word> . 308) (:local . 308)
            (:let . 308) (:parsed-defining-form . 308)
            (<seal-word> . 308) (:define . 308) (<statement-sep> . 308)
            (:end . 308) (<rbracket> . 308) (<rsbracket> . 308)
            (<rcbracket> . 308) (<details-intermediate-word> . 308)
            (<expr-intermediate-word> . 308)
            (<simple-intermediate-word> . 308)
            (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<implies> . -110) (<literal> . -124) (<string> . -128)
            (<keyword> . -112) (:true . -87) (:false . -92)
            (<list-open> . -116) (<vector-open> . -122)
            (<symbol> . -105) (<defining-word> . -117)
            (<fragment-define-word> . -95)
            (<fragment-define-bindings-word> . -132)
            (<binary-operator> . -113) (<minus> . -134)
            (<binds> . -136) (<var-singleton-sep> . -104)
            (<becomes> . -120) (<not> . -119) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<lbracket> . -99) (<lsbracket> . -100)
            (<lcbracket> . -107) (<dot> . -101) (:&next . -125)
            (:&rest . -135) (:&key . -85) (:&all-keys . -111)
            (:otherwise . -88) (<var-type-sep> . -114)
            (<ellipsis> . -131) (<query> . -97) (<query-query> . -139)
            (<query-equal> . -90) (:parsed-name . -137)
            (:parsed-variable . -93) (:parsed-expression . -123)
            (:parsed-body . -130) (:parsed-case-body . -89)
            (:parsed-literal . -129))
           ((<implies> . 336) (<syntax-open> . 336)
            (:parsed-literal . 336) (:parsed-case-body . 336)
            (:parsed-body . 336) (:parsed-expression . 336)
            (:parsed-variable . 336) (:parsed-name . 336)
            (<query-equal> . 336) (<query-query> . 336) (<query> . 336)
            (<ellipsis> . 336) (<var-type-sep> . 336)
            (:otherwise . 336) (:&all-keys . 336) (:&key . 336)
            (:&rest . 336) (:&next . 336) (<dot> . 336)
            (<fragment-function-word> . 336) (<lcbracket> . 336)
            (<lsbracket> . 336) (<lbracket> . 336) (<not> . 336)
            (<becomes> . 336) (<var-singleton-sep> . 336)
            (<binds> . 336) (<minus> . 336) (<binary-operator> . 336)
            (<fragment-define-bindings-word> . 336)
            (<fragment-define-word> . 336) (<defining-word> . 336)
            (<symbol> . 336) (<vector-open> . 336) (<list-open> . 336)
            (:false . 336) (:true . 336) (<keyword> . 336)
            (<string> . 336) (<literal> . 336) (:method . 336)
            (:parsed-statement . 336) (:macro-case . 336)
            (<fragment-define-bindings-and-begin-word> . 336)
            (<fragment-define-and-begin-word> . 336)
            (<fragment-begin-word> . 336) (<simple-begin-word> . 336)
            (<expr-begin-word> . 336) (<details-begin-word> . 336)
            (<var-sep> . 336) (:parsed-local-declaration . 336)
            (<fragment-local-declaration-word> . 336) (:local . 336)
            (:let . 336) (:parsed-defining-form . 336)
            (<seal-word> . 336) (:define . 336) (<statement-sep> . 336)
            (:end . 336) (<rbracket> . 336) (<rsbracket> . 336)
            (<rcbracket> . 336) (<details-intermediate-word> . 336)
            (<expr-intermediate-word> . 336)
            (<simple-intermediate-word> . 336))
           ((<implies> . 329) (<syntax-open> . 329)
            (:parsed-literal . 329) (:parsed-case-body . 329)
            (:parsed-body . 329) (:parsed-expression . 329)
            (:parsed-variable . 329) (:parsed-name . 329)
            (<query-equal> . 329) (<query-query> . 329) (<query> . 329)
            (<ellipsis> . 329) (<var-type-sep> . 329)
            (:otherwise . 329) (:&all-keys . 329) (:&key . 329)
            (:&rest . 329) (:&next . 329) (<dot> . 329)
            (<fragment-function-word> . 329) (<lcbracket> . 329)
            (<lsbracket> . 329) (<lbracket> . 329) (<not> . 329)
            (<becomes> . 329) (<var-singleton-sep> . 329)
            (<binds> . 329) (<minus> . 329) (<binary-operator> . 329)
            (<fragment-define-bindings-word> . 329)
            (<fragment-define-word> . 329) (<defining-word> . 329)
            (<symbol> . 329) (<vector-open> . 329) (<list-open> . 329)
            (:false . 329) (:true . 329) (<keyword> . 329)
            (<string> . 329) (<literal> . 329) (:method . 329)
            (:parsed-statement . 329) (:macro-case . 329)
            (<fragment-define-bindings-and-begin-word> . 329)
            (<fragment-define-and-begin-word> . 329)
            (<fragment-begin-word> . 329) (<simple-begin-word> . 329)
            (<expr-begin-word> . 329) (<details-begin-word> . 329)
            (<var-sep> . 329) (:parsed-local-declaration . 329)
            (<fragment-local-declaration-word> . 329) (:local . 329)
            (:let . 329) (:parsed-defining-form . 329)
            (<seal-word> . 329) (:define . 329) (<statement-sep> . 329)
            (:end . 329) (<rbracket> . 329) (<rsbracket> . 329)
            (<rcbracket> . 329) (<details-intermediate-word> . 329)
            (<expr-intermediate-word> . 329)
            (<simple-intermediate-word> . 329))
           ((<implies> . 339) (<syntax-open> . 339)
            (:parsed-literal . 339) (:parsed-case-body . 339)
            (:parsed-body . 339) (:parsed-expression . 339)
            (:parsed-variable . 339) (:parsed-name . 339)
            (<query-equal> . 339) (<query-query> . 339) (<query> . 339)
            (<ellipsis> . 339) (<var-type-sep> . 339)
            (:otherwise . 339) (:&all-keys . 339) (:&key . 339)
            (:&rest . 339) (:&next . 339) (<dot> . 339)
            (<fragment-function-word> . 339) (<lcbracket> . 339)
            (<lsbracket> . 339) (<lbracket> . 339) (<not> . 339)
            (<becomes> . 339) (<var-singleton-sep> . 339)
            (<binds> . 339) (<minus> . 339) (<binary-operator> . 339)
            (<fragment-define-bindings-word> . 339)
            (<fragment-define-word> . 339) (<defining-word> . 339)
            (<symbol> . 339) (<vector-open> . 339) (<list-open> . 339)
            (:false . 339) (:true . 339) (<keyword> . 339)
            (<string> . 339) (<literal> . 339) (:method . 339)
            (:parsed-statement . 339) (:macro-case . 339)
            (<fragment-define-bindings-and-begin-word> . 339)
            (<fragment-define-and-begin-word> . 339)
            (<fragment-begin-word> . 339) (<simple-begin-word> . 339)
            (<expr-begin-word> . 339) (<details-begin-word> . 339)
            (<var-sep> . 339) (:parsed-local-declaration . 339)
            (<fragment-local-declaration-word> . 339) (:local . 339)
            (:let . 339) (:parsed-defining-form . 339)
            (<seal-word> . 339) (:define . 339) (<statement-sep> . 339)
            (:end . 339) (<escaped-hash-word> . 339)
            (<rcbracket> . 339) (<rbracket> . 339) (<rsbracket> . 339)
            (<details-intermediate-word> . 339)
            (<expr-intermediate-word> . 339)
            (<simple-intermediate-word> . 339))
           ((<implies> . 349) (<syntax-open> . 349)
            (:parsed-literal . 349) (:parsed-case-body . 349)
            (:parsed-body . 349) (:parsed-expression . 349)
            (:parsed-variable . 349) (:parsed-name . 349)
            (<query-equal> . 349) (<query-query> . 349) (<query> . 349)
            (<ellipsis> . 349) (<var-type-sep> . 349)
            (:otherwise . 349) (:&all-keys . 349) (:&key . 349)
            (:&rest . 349) (:&next . 349) (<dot> . 349)
            (<fragment-function-word> . 349) (<lcbracket> . 349)
            (<lsbracket> . 349) (<lbracket> . 349) (<not> . 349)
            (<becomes> . 349) (<var-singleton-sep> . 349)
            (<binds> . 349) (<minus> . 349) (<binary-operator> . 349)
            (<fragment-define-bindings-word> . 349)
            (<fragment-define-word> . 349) (<defining-word> . 349)
            (<symbol> . 349) (<vector-open> . 349) (<list-open> . 349)
            (:false . 349) (:true . 349) (<keyword> . 349)
            (<string> . 349) (<literal> . 349) (:method . 349)
            (:parsed-statement . 349) (:macro-case . 349)
            (<fragment-define-bindings-and-begin-word> . 349)
            (<fragment-define-and-begin-word> . 349)
            (<fragment-begin-word> . 349) (<simple-begin-word> . 349)
            (<expr-begin-word> . 349) (<details-begin-word> . 349)
            (<var-sep> . 349) (:parsed-local-declaration . 349)
            (<fragment-local-declaration-word> . 349) (:local . 349)
            (:let . 349) (:parsed-defining-form . 349)
            (<seal-word> . 349) (:define . 349) (<statement-sep> . 349)
            (:end . 349) (<escaped-hash-word> . 349)
            (<rcbracket> . 349) (<rbracket> . 349) (<rsbracket> . 349)
            (<details-intermediate-word> . 349)
            (<expr-intermediate-word> . 349)
            (<simple-intermediate-word> . 349))
           ((<implies> . 331) (<syntax-open> . 331)
            (:parsed-literal . 331) (:parsed-case-body . 331)
            (:parsed-body . 331) (:parsed-expression . 331)
            (:parsed-variable . 331) (:parsed-name . 331)
            (<query-equal> . 331) (<query-query> . 331) (<query> . 331)
            (<ellipsis> . 331) (<var-type-sep> . 331)
            (:otherwise . 331) (:&all-keys . 331) (:&key . 331)
            (:&rest . 331) (:&next . 331) (<dot> . 331)
            (<fragment-function-word> . 331) (<lcbracket> . 331)
            (<lsbracket> . 331) (<lbracket> . 331) (<not> . 331)
            (<becomes> . 331) (<var-singleton-sep> . 331)
            (<binds> . 331) (<minus> . 331) (<binary-operator> . 331)
            (<fragment-define-bindings-word> . 331)
            (<fragment-define-word> . 331) (<defining-word> . 331)
            (<symbol> . 331) (<vector-open> . 331) (<list-open> . 331)
            (:false . 331) (:true . 331) (<keyword> . 331)
            (<string> . 331) (<literal> . 331) (:method . 331)
            (:parsed-statement . 331) (:macro-case . 331)
            (<fragment-define-bindings-and-begin-word> . 331)
            (<fragment-define-and-begin-word> . 331)
            (<fragment-begin-word> . 331) (<simple-begin-word> . 331)
            (<expr-begin-word> . 331) (<details-begin-word> . 331)
            (<var-sep> . 331) (:parsed-local-declaration . 331)
            (<fragment-local-declaration-word> . 331) (:local . 331)
            (:let . 331) (:parsed-defining-form . 331)
            (<seal-word> . 331) (:define . 331) (<statement-sep> . 331)
            (:end . 331) (<rbracket> . 331) (<rsbracket> . 331)
            (<rcbracket> . 331) (<details-intermediate-word> . 331)
            (<expr-intermediate-word> . 331)
            (<simple-intermediate-word> . 331))
           ((<var-sep> . 308) (:parsed-local-declaration . 308)
            (<fragment-local-declaration-word> . 308) (:local . 308)
            (:let . 308) (:parsed-defining-form . 308)
            (<seal-word> . 308) (:define . 308) (<statement-sep> . 308)
            (:end . 308) (<rbracket> . 308) (<rsbracket> . 308)
            (<rcbracket> . 308) (<details-intermediate-word> . 308)
            (<expr-intermediate-word> . 308)
            (<simple-intermediate-word> . 308)
            (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<implies> . -110) (<literal> . -124) (<string> . -128)
            (<keyword> . -112) (:true . -87) (:false . -92)
            (<list-open> . -116) (<vector-open> . -122)
            (<symbol> . -105) (<defining-word> . -117)
            (<fragment-define-word> . -95)
            (<fragment-define-bindings-word> . -132)
            (<binary-operator> . -113) (<minus> . -134)
            (<binds> . -136) (<var-singleton-sep> . -104)
            (<becomes> . -120) (<not> . -119) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<lbracket> . -99) (<lsbracket> . -100)
            (<lcbracket> . -107) (<dot> . -101) (:&next . -125)
            (:&rest . -135) (:&key . -85) (:&all-keys . -111)
            (:otherwise . -88) (<var-type-sep> . -114)
            (<ellipsis> . -131) (<query> . -97) (<query-query> . -139)
            (<query-equal> . -90) (:parsed-name . -137)
            (:parsed-variable . -93) (:parsed-expression . -123)
            (:parsed-body . -130) (:parsed-case-body . -89)
            (:parsed-literal . -129))
           ((<rbracket> . 269) (<literal> . -51) (:true . -3)
            (:false . -12) (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (<keyword> . -228)
            (:parsed-expression . -232) (<string> . -53))
           ((<implies> . 346) (<syntax-open> . 346)
            (:parsed-literal . 346) (:parsed-case-body . 346)
            (:parsed-body . 346) (:parsed-expression . 346)
            (:parsed-variable . 346) (:parsed-name . 346)
            (<query-equal> . 346) (<query-query> . 346) (<query> . 346)
            (<ellipsis> . 346) (<var-type-sep> . 346)
            (:otherwise . 346) (:&all-keys . 346) (:&key . 346)
            (:&rest . 346) (:&next . 346) (<dot> . 346)
            (<fragment-function-word> . 346) (<lcbracket> . 346)
            (<lsbracket> . 346) (<lbracket> . 346) (<not> . 346)
            (<becomes> . 346) (<var-singleton-sep> . 346)
            (<binds> . 346) (<minus> . 346) (<binary-operator> . 346)
            (<fragment-define-bindings-word> . 346)
            (<fragment-define-word> . 346) (<defining-word> . 346)
            (<symbol> . 346) (<vector-open> . 346) (<list-open> . 346)
            (:false . 346) (:true . 346) (<keyword> . 346)
            (<string> . 346) (<literal> . 346) (:method . 346)
            (:parsed-statement . 346) (:macro-case . 346)
            (<fragment-define-bindings-and-begin-word> . 346)
            (<fragment-define-and-begin-word> . 346)
            (<fragment-begin-word> . 346) (<simple-begin-word> . 346)
            (<expr-begin-word> . 346) (<details-begin-word> . 346)
            (<var-sep> . 346) (:parsed-local-declaration . 346)
            (<fragment-local-declaration-word> . 346) (:local . 346)
            (:let . 346) (:parsed-defining-form . 346)
            (<seal-word> . 346) (:define . 346) (<statement-sep> . 346)
            (:end . 346) (<escaped-hash-word> . 346)
            (<rcbracket> . 346) (<rbracket> . 346) (<rsbracket> . 346)
            (<details-intermediate-word> . 346)
            (<expr-intermediate-word> . 346)
            (<simple-intermediate-word> . 346))
           ((<implies> . 312) (<syntax-open> . 312)
            (:parsed-literal . 312) (:parsed-case-body . 312)
            (:parsed-body . 312) (:parsed-expression . 312)
            (:parsed-variable . 312) (:parsed-name . 312)
            (<query-equal> . 312) (<query-query> . 312) (<query> . 312)
            (<ellipsis> . 312) (<var-type-sep> . 312)
            (:otherwise . 312) (:&all-keys . 312) (:&key . 312)
            (:&rest . 312) (:&next . 312) (<dot> . 312)
            (<fragment-function-word> . 312) (<lcbracket> . 312)
            (<lsbracket> . 312) (<lbracket> . 312) (<not> . 312)
            (<becomes> . 312) (<var-singleton-sep> . 312)
            (<binds> . 312) (<minus> . 312) (<binary-operator> . 312)
            (<fragment-define-bindings-word> . 312)
            (<fragment-define-word> . 312) (<defining-word> . 312)
            (<symbol> . 312) (<vector-open> . 312) (<list-open> . 312)
            (:false . 312) (:true . 312) (<keyword> . 312)
            (<string> . 312) (<literal> . 312) (<var-sep> . 312)
            (:parsed-local-declaration . 312)
            (<fragment-local-declaration-word> . 312) (:local . 312)
            (:let . 312) (:parsed-defining-form . 312)
            (<seal-word> . 312) (:define . 312) (<statement-sep> . 312)
            (:end . 312) (<rbracket> . 312) (<rsbracket> . 312)
            (<rcbracket> . 312) (<details-intermediate-word> . 312)
            (<expr-intermediate-word> . 312)
            (<simple-intermediate-word> . 312))
           ((<implies> . 354) (<syntax-open> . 354)
            (:parsed-literal . 354) (:parsed-case-body . 354)
            (:parsed-body . 354) (:parsed-expression . 354)
            (:parsed-variable . 354) (:parsed-name . 354)
            (<query-equal> . 354) (<query-query> . 354) (<query> . 354)
            (<ellipsis> . 354) (<var-type-sep> . 354)
            (:otherwise . 354) (:&all-keys . 354) (:&key . 354)
            (:&rest . 354) (:&next . 354) (<dot> . 354)
            (<fragment-function-word> . 354) (<lcbracket> . 354)
            (<lsbracket> . 354) (<lbracket> . 354) (<not> . 354)
            (<becomes> . 354) (<var-singleton-sep> . 354)
            (<binds> . 354) (<minus> . 354) (<binary-operator> . 354)
            (<fragment-define-bindings-word> . 354)
            (<fragment-define-word> . 354) (<defining-word> . 354)
            (<symbol> . 354) (<vector-open> . 354) (<list-open> . 354)
            (:false . 354) (:true . 354) (<keyword> . 354)
            (<string> . 354) (<literal> . 354) (:method . 354)
            (:parsed-statement . 354) (:macro-case . 354)
            (<fragment-define-bindings-and-begin-word> . 354)
            (<fragment-define-and-begin-word> . 354)
            (<fragment-begin-word> . 354) (<simple-begin-word> . 354)
            (<expr-begin-word> . 354) (<details-begin-word> . 354)
            (<var-sep> . 354) (:parsed-local-declaration . 354)
            (<fragment-local-declaration-word> . 354) (:local . 354)
            (:let . 354) (:parsed-defining-form . 354)
            (<seal-word> . 354) (:define . 354) (<statement-sep> . 354)
            (:end . 354) (<escaped-hash-word> . 354)
            (<rcbracket> . 354) (<rbracket> . 354) (<rsbracket> . 354)
            (<details-intermediate-word> . 354)
            (<expr-intermediate-word> . 354)
            (<simple-intermediate-word> . 354))
           ((<implies> . 353) (<syntax-open> . 353)
            (:parsed-literal . 353) (:parsed-case-body . 353)
            (:parsed-body . 353) (:parsed-expression . 353)
            (:parsed-variable . 353) (:parsed-name . 353)
            (<query-equal> . 353) (<query-query> . 353) (<query> . 353)
            (<ellipsis> . 353) (<var-type-sep> . 353)
            (:otherwise . 353) (:&all-keys . 353) (:&key . 353)
            (:&rest . 353) (:&next . 353) (<dot> . 353)
            (<fragment-function-word> . 353) (<lcbracket> . 353)
            (<lsbracket> . 353) (<lbracket> . 353) (<not> . 353)
            (<becomes> . 353) (<var-singleton-sep> . 353)
            (<binds> . 353) (<minus> . 353) (<binary-operator> . 353)
            (<fragment-define-bindings-word> . 353)
            (<fragment-define-word> . 353) (<defining-word> . 353)
            (<symbol> . 353) (<vector-open> . 353) (<list-open> . 353)
            (:false . 353) (:true . 353) (<keyword> . 353)
            (<string> . 353) (<literal> . 353) (:method . 353)
            (:parsed-statement . 353) (:macro-case . 353)
            (<fragment-define-bindings-and-begin-word> . 353)
            (<fragment-define-and-begin-word> . 353)
            (<fragment-begin-word> . 353) (<simple-begin-word> . 353)
            (<expr-begin-word> . 353) (<details-begin-word> . 353)
            (<var-sep> . 353) (:parsed-local-declaration . 353)
            (<fragment-local-declaration-word> . 353) (:local . 353)
            (:let . 353) (:parsed-defining-form . 353)
            (<seal-word> . 353) (:define . 353) (<statement-sep> . 353)
            (:end . 353) (<escaped-hash-word> . 353)
            (<rcbracket> . 353) (<rbracket> . 353) (<rsbracket> . 353)
            (<details-intermediate-word> . 353)
            (<expr-intermediate-word> . 353)
            (<simple-intermediate-word> . 353))
           ((<var-sep> . 314) (:parsed-local-declaration . 314)
            (<fragment-local-declaration-word> . 314) (:local . 314)
            (:let . 314) (:parsed-defining-form . 314)
            (<seal-word> . 314) (:define . 314) (<statement-sep> . 314)
            (:end . 314) (<rbracket> . 314) (<rsbracket> . 314)
            (<rcbracket> . 314) (<details-intermediate-word> . 314)
            (<expr-intermediate-word> . 314)
            (<simple-intermediate-word> . 314)
            (<fragment-function-word> . -68) (<implies> . -110)
            (<literal> . -124) (<string> . -128) (<keyword> . -112)
            (:true . -87) (:false . -92) (<list-open> . -116)
            (<vector-open> . -122) (<symbol> . -105)
            (<defining-word> . -117) (<fragment-define-word> . -95)
            (<fragment-define-bindings-word> . -132)
            (<binary-operator> . -113) (<minus> . -134)
            (<binds> . -136) (<var-singleton-sep> . -104)
            (<becomes> . -120) (<not> . -119) (<syntax-open> . -54)
            (<lbracket> . -99) (<lsbracket> . -100)
            (<lcbracket> . -107) (<dot> . -101) (:&next . -125)
            (:&rest . -135) (:&key . -85) (:&all-keys . -111)
            (:otherwise . -88) (<var-type-sep> . -114)
            (<ellipsis> . -131) (<query> . -97) (<query-query> . -139)
            (<query-equal> . -90) (:parsed-name . -137)
            (:parsed-variable . -93) (:parsed-expression . -123)
            (:parsed-body . -130) (:parsed-case-body . -89)
            (:parsed-literal . -129))
           ((<rsbracket> . 269) (<literal> . -51) (:true . -3)
            (:false . -12) (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (<keyword> . -228)
            (:parsed-expression . -232) (<string> . -53))
           ((<implies> . 357) (<syntax-open> . 357)
            (:parsed-literal . 357) (:parsed-case-body . 357)
            (:parsed-body . 357) (:parsed-expression . 357)
            (:parsed-variable . 357) (:parsed-name . 357)
            (<query-equal> . 357) (<query-query> . 357) (<query> . 357)
            (<ellipsis> . 357) (<var-type-sep> . 357)
            (:otherwise . 357) (:&all-keys . 357) (:&key . 357)
            (:&rest . 357) (:&next . 357) (<dot> . 357)
            (<fragment-function-word> . 357) (<lcbracket> . 357)
            (<lsbracket> . 357) (<lbracket> . 357) (<not> . 357)
            (<becomes> . 357) (<var-singleton-sep> . 357)
            (<binds> . 357) (<minus> . 357) (<binary-operator> . 357)
            (<fragment-define-bindings-word> . 357)
            (<fragment-define-word> . 357) (<defining-word> . 357)
            (<symbol> . 357) (<vector-open> . 357) (<list-open> . 357)
            (:false . 357) (:true . 357) (<keyword> . 357)
            (<string> . 357) (<literal> . 357) (:method . 357)
            (:parsed-statement . 357) (:macro-case . 357)
            (<fragment-define-bindings-and-begin-word> . 357)
            (<fragment-define-and-begin-word> . 357)
            (<fragment-begin-word> . 357) (<simple-begin-word> . 357)
            (<expr-begin-word> . 357) (<details-begin-word> . 357)
            (<var-sep> . 357) (:parsed-local-declaration . 357)
            (<fragment-local-declaration-word> . 357) (:local . 357)
            (:let . 357) (:parsed-defining-form . 357)
            (<seal-word> . 357) (:define . 357) (<statement-sep> . 357)
            (:end . 357) (<rbracket> . 357) (<rsbracket> . 357)
            (<rcbracket> . 357) (<details-intermediate-word> . 357)
            (<expr-intermediate-word> . 357)
            (<simple-intermediate-word> . 357))
           ((<implies> . 337) (<syntax-open> . 337)
            (:parsed-literal . 337) (:parsed-case-body . 337)
            (:parsed-body . 337) (:parsed-expression . 337)
            (:parsed-variable . 337) (:parsed-name . 337)
            (<query-equal> . 337) (<query-query> . 337) (<query> . 337)
            (<ellipsis> . 337) (<var-type-sep> . 337)
            (:otherwise . 337) (:&all-keys . 337) (:&key . 337)
            (:&rest . 337) (:&next . 337) (<dot> . 337)
            (<fragment-function-word> . 337) (<lcbracket> . 337)
            (<lsbracket> . 337) (<lbracket> . 337) (<not> . 337)
            (<becomes> . 337) (<var-singleton-sep> . 337)
            (<binds> . 337) (<minus> . 337) (<binary-operator> . 337)
            (<fragment-define-bindings-word> . 337)
            (<fragment-define-word> . 337) (<defining-word> . 337)
            (<symbol> . 337) (<vector-open> . 337) (<list-open> . 337)
            (:false . 337) (:true . 337) (<keyword> . 337)
            (<string> . 337) (<literal> . 337) (:method . 337)
            (:parsed-statement . 337) (:macro-case . 337)
            (<fragment-define-bindings-and-begin-word> . 337)
            (<fragment-define-and-begin-word> . 337)
            (<fragment-begin-word> . 337) (<simple-begin-word> . 337)
            (<expr-begin-word> . 337) (<details-begin-word> . 337)
            (<var-sep> . 337) (:parsed-local-declaration . 337)
            (<fragment-local-declaration-word> . 337) (:local . 337)
            (:let . 337) (:parsed-defining-form . 337)
            (<seal-word> . 337) (:define . 337) (<statement-sep> . 337)
            (:end . 337) (<escaped-hash-word> . 337)
            (<rcbracket> . 337) (<rbracket> . 337) (<rsbracket> . 337)
            (<details-intermediate-word> . 337)
            (<expr-intermediate-word> . 337)
            (<simple-intermediate-word> . 337))
           ((<implies> . 326) (<syntax-open> . 326)
            (:parsed-literal . 326) (:parsed-case-body . 326)
            (:parsed-body . 326) (:parsed-expression . 326)
            (:parsed-variable . 326) (:parsed-name . 326)
            (<query-equal> . 326) (<query-query> . 326) (<query> . 326)
            (<ellipsis> . 326) (<var-type-sep> . 326)
            (:otherwise . 326) (:&all-keys . 326) (:&key . 326)
            (:&rest . 326) (:&next . 326) (<dot> . 326)
            (<fragment-function-word> . 326) (<lcbracket> . 326)
            (<lsbracket> . 326) (<lbracket> . 326) (<not> . 326)
            (<becomes> . 326) (<var-singleton-sep> . 326)
            (<binds> . 326) (<minus> . 326) (<binary-operator> . 326)
            (<fragment-define-bindings-word> . 326)
            (<fragment-define-word> . 326) (<defining-word> . 326)
            (<symbol> . 326) (<vector-open> . 326) (<list-open> . 326)
            (:false . 326) (:true . 326) (<keyword> . 326)
            (<string> . 326) (<literal> . 326) (:method . 326)
            (:parsed-statement . 326) (:macro-case . 326)
            (<fragment-define-bindings-and-begin-word> . 326)
            (<fragment-define-and-begin-word> . 326)
            (<fragment-begin-word> . 326) (<simple-begin-word> . 326)
            (<expr-begin-word> . 326) (<details-begin-word> . 326)
            (<var-sep> . 326) (:parsed-local-declaration . 326)
            (<fragment-local-declaration-word> . 326) (:local . 326)
            (:let . 326) (:parsed-defining-form . 326)
            (<seal-word> . 326) (:define . 326) (<statement-sep> . 326)
            (:end . 326) (<rbracket> . 326) (<rsbracket> . 326)
            (<rcbracket> . 326) (<details-intermediate-word> . 326)
            (<expr-intermediate-word> . 326)
            (<simple-intermediate-word> . 326))
           ((<statement-sep> . -310) (:end . 295) (<rbracket> . 295)
            (<rsbracket> . 295) (<rcbracket> . 295))
           ((:let . -19) (:local . -29)
            (<fragment-local-declaration-word> . -45)
            (:parsed-local-declaration . -69) (:define . -31)
            (:parsed-defining-form . -23) (<seal-word> . -4)
            (<statement-sep> . 299) (:end . 299) (<rbracket> . 299)
            (<rsbracket> . 299) (<rcbracket> . 299)
            (<details-intermediate-word> . 299)
            (<expr-intermediate-word> . 299)
            (<simple-intermediate-word> . 299))
           ((<implies> . 338) (<syntax-open> . 338)
            (:parsed-literal . 338) (:parsed-case-body . 338)
            (:parsed-body . 338) (:parsed-expression . 338)
            (:parsed-variable . 338) (:parsed-name . 338)
            (<query-equal> . 338) (<query-query> . 338) (<query> . 338)
            (<ellipsis> . 338) (<var-type-sep> . 338)
            (:otherwise . 338) (:&all-keys . 338) (:&key . 338)
            (:&rest . 338) (:&next . 338) (<dot> . 338)
            (<fragment-function-word> . 338) (<lcbracket> . 338)
            (<lsbracket> . 338) (<lbracket> . 338) (<not> . 338)
            (<becomes> . 338) (<var-singleton-sep> . 338)
            (<binds> . 338) (<minus> . 338) (<binary-operator> . 338)
            (<fragment-define-bindings-word> . 338)
            (<fragment-define-word> . 338) (<defining-word> . 338)
            (<symbol> . 338) (<vector-open> . 338) (<list-open> . 338)
            (:false . 338) (:true . 338) (<keyword> . 338)
            (<string> . 338) (<literal> . 338) (:method . 338)
            (:parsed-statement . 338) (:macro-case . 338)
            (<fragment-define-bindings-and-begin-word> . 338)
            (<fragment-define-and-begin-word> . 338)
            (<fragment-begin-word> . 338) (<simple-begin-word> . 338)
            (<expr-begin-word> . 338) (<details-begin-word> . 338)
            (<var-sep> . 338) (:parsed-local-declaration . 338)
            (<fragment-local-declaration-word> . 338) (:local . 338)
            (:let . 338) (:parsed-defining-form . 338)
            (<seal-word> . 338) (:define . 338) (<statement-sep> . 338)
            (:end . 338) (<rbracket> . 338) (<rsbracket> . 338)
            (<rcbracket> . 338) (<details-intermediate-word> . 338)
            (<expr-intermediate-word> . 338)
            (<simple-intermediate-word> . 338))
           ((<implies> . 360) (<syntax-open> . 360)
            (:parsed-literal . 360) (:parsed-case-body . 360)
            (:parsed-body . 360) (:parsed-expression . 360)
            (:parsed-variable . 360) (:parsed-name . 360)
            (<query-equal> . 360) (<query-query> . 360) (<query> . 360)
            (<ellipsis> . 360) (<var-type-sep> . 360)
            (:otherwise . 360) (:&all-keys . 360) (:&key . 360)
            (:&rest . 360) (:&next . 360) (<dot> . 360)
            (<fragment-function-word> . 360) (<lcbracket> . 360)
            (<lsbracket> . 360) (<lbracket> . 360) (<not> . 360)
            (<becomes> . 360) (<var-singleton-sep> . 360)
            (<binds> . 360) (<minus> . 360) (<binary-operator> . 360)
            (<fragment-define-bindings-word> . 360)
            (<fragment-define-word> . 360) (<defining-word> . 360)
            (<symbol> . 360) (<vector-open> . 360) (<list-open> . 360)
            (:false . 360) (:true . 360) (<keyword> . 360)
            (<string> . 360) (<literal> . 360) (:method . 360)
            (:parsed-statement . 360) (:macro-case . 360)
            (<fragment-define-bindings-and-begin-word> . 360)
            (<fragment-define-and-begin-word> . 360)
            (<fragment-begin-word> . 360) (<simple-begin-word> . 360)
            (<expr-begin-word> . 360) (<details-begin-word> . 360)
            (<var-sep> . 360) (:parsed-local-declaration . 360)
            (<fragment-local-declaration-word> . 360) (:local . 360)
            (:let . 360) (:parsed-defining-form . 360)
            (<seal-word> . 360) (:define . 360) (<statement-sep> . 360)
            (:end . 360) (<rbracket> . 360) (<rsbracket> . 360)
            (<rcbracket> . 360) (<details-intermediate-word> . 360)
            (<expr-intermediate-word> . 360)
            (<simple-intermediate-word> . 360))
           ((<implies> . 358) (<syntax-open> . 358)
            (:parsed-literal . 358) (:parsed-case-body . 358)
            (:parsed-body . 358) (:parsed-expression . 358)
            (:parsed-variable . 358) (:parsed-name . 358)
            (<query-equal> . 358) (<query-query> . 358) (<query> . 358)
            (<ellipsis> . 358) (<var-type-sep> . 358)
            (:otherwise . 358) (:&all-keys . 358) (:&key . 358)
            (:&rest . 358) (:&next . 358) (<dot> . 358)
            (<fragment-function-word> . 358) (<lcbracket> . 358)
            (<lsbracket> . 358) (<lbracket> . 358) (<not> . 358)
            (<becomes> . 358) (<var-singleton-sep> . 358)
            (<binds> . 358) (<minus> . 358) (<binary-operator> . 358)
            (<fragment-define-bindings-word> . 358)
            (<fragment-define-word> . 358) (<defining-word> . 358)
            (<symbol> . 358) (<vector-open> . 358) (<list-open> . 358)
            (:false . 358) (:true . 358) (<keyword> . 358)
            (<string> . 358) (<literal> . 358) (:method . 358)
            (:parsed-statement . 358) (:macro-case . 358)
            (<fragment-define-bindings-and-begin-word> . 358)
            (<fragment-define-and-begin-word> . 358)
            (<fragment-begin-word> . 358) (<simple-begin-word> . 358)
            (<expr-begin-word> . 358) (<details-begin-word> . 358)
            (<var-sep> . 358) (:parsed-local-declaration . 358)
            (<fragment-local-declaration-word> . 358) (:local . 358)
            (:let . 358) (:parsed-defining-form . 358)
            (<seal-word> . 358) (:define . 358) (<statement-sep> . 358)
            (:end . 358) (<rbracket> . 358) (<rsbracket> . 358)
            (<rcbracket> . 358) (<details-intermediate-word> . 358)
            (<expr-intermediate-word> . 358)
            (<simple-intermediate-word> . 358))
           ((<implies> . 332) (<syntax-open> . 332)
            (:parsed-literal . 332) (:parsed-case-body . 332)
            (:parsed-body . 332) (:parsed-expression . 332)
            (:parsed-variable . 332) (:parsed-name . 332)
            (<query-equal> . 332) (<query-query> . 332) (<query> . 332)
            (<ellipsis> . 332) (<var-type-sep> . 332)
            (:otherwise . 332) (:&all-keys . 332) (:&key . 332)
            (:&rest . 332) (:&next . 332) (<dot> . 332)
            (<fragment-function-word> . 332) (<lcbracket> . 332)
            (<lsbracket> . 332) (<lbracket> . 332) (<not> . 332)
            (<becomes> . 332) (<var-singleton-sep> . 332)
            (<binds> . 332) (<minus> . 332) (<binary-operator> . 332)
            (<fragment-define-bindings-word> . 332)
            (<fragment-define-word> . 332) (<defining-word> . 332)
            (<symbol> . 332) (<vector-open> . 332) (<list-open> . 332)
            (:false . 332) (:true . 332) (<keyword> . 332)
            (<string> . 332) (<literal> . 332) (:method . 332)
            (:parsed-statement . 332) (:macro-case . 332)
            (<fragment-define-bindings-and-begin-word> . 332)
            (<fragment-define-and-begin-word> . 332)
            (<fragment-begin-word> . 332) (<simple-begin-word> . 332)
            (<expr-begin-word> . 332) (<details-begin-word> . 332)
            (<var-sep> . 332) (:parsed-local-declaration . 332)
            (<fragment-local-declaration-word> . 332) (:local . 332)
            (:let . 332) (:parsed-defining-form . 332)
            (<seal-word> . 332) (:define . 332) (<statement-sep> . 332)
            (:end . 332) (<rbracket> . 332) (<rsbracket> . 332)
            (<rcbracket> . 332) (<details-intermediate-word> . 332)
            (<expr-intermediate-word> . 332)
            (<simple-intermediate-word> . 332))
           ((<implies> . 348) (<syntax-open> . 348)
            (:parsed-literal . 348) (:parsed-case-body . 348)
            (:parsed-body . 348) (:parsed-expression . 348)
            (:parsed-variable . 348) (:parsed-name . 348)
            (<query-equal> . 348) (<query-query> . 348) (<query> . 348)
            (<ellipsis> . 348) (<var-type-sep> . 348)
            (:otherwise . 348) (:&all-keys . 348) (:&key . 348)
            (:&rest . 348) (:&next . 348) (<dot> . 348)
            (<fragment-function-word> . 348) (<lcbracket> . 348)
            (<lsbracket> . 348) (<lbracket> . 348) (<not> . 348)
            (<becomes> . 348) (<var-singleton-sep> . 348)
            (<binds> . 348) (<minus> . 348) (<binary-operator> . 348)
            (<fragment-define-bindings-word> . 348)
            (<fragment-define-word> . 348) (<defining-word> . 348)
            (<symbol> . 348) (<vector-open> . 348) (<list-open> . 348)
            (:false . 348) (:true . 348) (<keyword> . 348)
            (<string> . 348) (<literal> . 348) (:method . 348)
            (:parsed-statement . 348) (:macro-case . 348)
            (<fragment-define-bindings-and-begin-word> . 348)
            (<fragment-define-and-begin-word> . 348)
            (<fragment-begin-word> . 348) (<simple-begin-word> . 348)
            (<expr-begin-word> . 348) (<details-begin-word> . 348)
            (<var-sep> . 348) (:parsed-local-declaration . 348)
            (<fragment-local-declaration-word> . 348) (:local . 348)
            (:let . 348) (:parsed-defining-form . 348)
            (<seal-word> . 348) (:define . 348) (<statement-sep> . 348)
            (:end . 348) (<escaped-hash-word> . 348)
            (<rcbracket> . 348) (<rbracket> . 348) (<rsbracket> . 348)
            (<details-intermediate-word> . 348)
            (<expr-intermediate-word> . 348)
            (<simple-intermediate-word> . 348))
           ((<implies> . 324) (<syntax-open> . 324)
            (:parsed-literal . 324) (:parsed-case-body . 324)
            (:parsed-body . 324) (:parsed-expression . 324)
            (:parsed-variable . 324) (:parsed-name . 324)
            (<query-equal> . 324) (<query-query> . 324) (<query> . 324)
            (<ellipsis> . 324) (<var-type-sep> . 324)
            (:otherwise . 324) (:&all-keys . 324) (:&key . 324)
            (:&rest . 324) (:&next . 324) (<dot> . 324)
            (<fragment-function-word> . 324) (<lcbracket> . 324)
            (<lsbracket> . 324) (<lbracket> . 324) (<not> . 324)
            (<becomes> . 324) (<var-singleton-sep> . 324)
            (<binds> . 324) (<minus> . 324) (<binary-operator> . 324)
            (<fragment-define-bindings-word> . 324)
            (<fragment-define-word> . 324) (<defining-word> . 324)
            (<symbol> . 324) (<vector-open> . 324) (<list-open> . 324)
            (:false . 324) (:true . 324) (<keyword> . 324)
            (<string> . 324) (<literal> . 324) (:method . 324)
            (:parsed-statement . 324) (:macro-case . 324)
            (<fragment-define-bindings-and-begin-word> . 324)
            (<fragment-define-and-begin-word> . 324)
            (<fragment-begin-word> . 324) (<simple-begin-word> . 324)
            (<expr-begin-word> . 324) (<details-begin-word> . 324)
            (<var-sep> . 324) (:parsed-local-declaration . 324)
            (<fragment-local-declaration-word> . 324) (:local . 324)
            (:let . 324) (:parsed-defining-form . 324)
            (<seal-word> . 324) (:define . 324) (<statement-sep> . 324)
            (:end . 324) (<rbracket> . 324) (<rsbracket> . 324)
            (<rcbracket> . 324) (<details-intermediate-word> . 324)
            (<expr-intermediate-word> . 324)
            (<simple-intermediate-word> . 324))
           ((<implies> . 350) (<syntax-open> . 350)
            (:parsed-literal . 350) (:parsed-case-body . 350)
            (:parsed-body . 350) (:parsed-expression . 350)
            (:parsed-variable . 350) (:parsed-name . 350)
            (<query-equal> . 350) (<query-query> . 350) (<query> . 350)
            (<ellipsis> . 350) (<var-type-sep> . 350)
            (:otherwise . 350) (:&all-keys . 350) (:&key . 350)
            (:&rest . 350) (:&next . 350) (<dot> . 350)
            (<fragment-function-word> . 350) (<lcbracket> . 350)
            (<lsbracket> . 350) (<lbracket> . 350) (<not> . 350)
            (<becomes> . 350) (<var-singleton-sep> . 350)
            (<binds> . 350) (<minus> . 350) (<binary-operator> . 350)
            (<fragment-define-bindings-word> . 350)
            (<fragment-define-word> . 350) (<defining-word> . 350)
            (<symbol> . 350) (<vector-open> . 350) (<list-open> . 350)
            (:false . 350) (:true . 350) (<keyword> . 350)
            (<string> . 350) (<literal> . 350) (:method . 350)
            (:parsed-statement . 350) (:macro-case . 350)
            (<fragment-define-bindings-and-begin-word> . 350)
            (<fragment-define-and-begin-word> . 350)
            (<fragment-begin-word> . 350) (<simple-begin-word> . 350)
            (<expr-begin-word> . 350) (<details-begin-word> . 350)
            (<var-sep> . 350) (:parsed-local-declaration . 350)
            (<fragment-local-declaration-word> . 350) (:local . 350)
            (:let . 350) (:parsed-defining-form . 350)
            (<seal-word> . 350) (:define . 350) (<statement-sep> . 350)
            (:end . 350) (<escaped-hash-word> . 350)
            (<rcbracket> . 350) (<rbracket> . 350) (<rsbracket> . 350)
            (<details-intermediate-word> . 350)
            (<expr-intermediate-word> . 350)
            (<simple-intermediate-word> . 350))
           ((<implies> . 327) (<syntax-open> . 327)
            (:parsed-literal . 327) (:parsed-case-body . 327)
            (:parsed-body . 327) (:parsed-expression . 327)
            (:parsed-variable . 327) (:parsed-name . 327)
            (<query-equal> . 327) (<query-query> . 327) (<query> . 327)
            (<ellipsis> . 327) (<var-type-sep> . 327)
            (:otherwise . 327) (:&all-keys . 327) (:&key . 327)
            (:&rest . 327) (:&next . 327) (<dot> . 327)
            (<fragment-function-word> . 327) (<lcbracket> . 327)
            (<lsbracket> . 327) (<lbracket> . 327) (<not> . 327)
            (<becomes> . 327) (<var-singleton-sep> . 327)
            (<binds> . 327) (<minus> . 327) (<binary-operator> . 327)
            (<fragment-define-bindings-word> . 327)
            (<fragment-define-word> . 327) (<defining-word> . 327)
            (<symbol> . 327) (<vector-open> . 327) (<list-open> . 327)
            (:false . 327) (:true . 327) (<keyword> . 327)
            (<string> . 327) (<literal> . 327) (:method . 327)
            (:parsed-statement . 327) (:macro-case . 327)
            (<fragment-define-bindings-and-begin-word> . 327)
            (<fragment-define-and-begin-word> . 327)
            (<fragment-begin-word> . 327) (<simple-begin-word> . 327)
            (<expr-begin-word> . 327) (<details-begin-word> . 327)
            (<var-sep> . 327) (:parsed-local-declaration . 327)
            (<fragment-local-declaration-word> . 327) (:local . 327)
            (:let . 327) (:parsed-defining-form . 327)
            (<seal-word> . 327) (:define . 327) (<statement-sep> . 327)
            (:end . 327) (<rbracket> . 327) (<rsbracket> . 327)
            (<rcbracket> . 327) (<details-intermediate-word> . 327)
            (<expr-intermediate-word> . 327)
            (<simple-intermediate-word> . 327))
           ((<implies> . 351) (<syntax-open> . 351)
            (:parsed-literal . 351) (:parsed-case-body . 351)
            (:parsed-body . 351) (:parsed-expression . 351)
            (:parsed-variable . 351) (:parsed-name . 351)
            (<query-equal> . 351) (<query-query> . 351) (<query> . 351)
            (<ellipsis> . 351) (<var-type-sep> . 351)
            (:otherwise . 351) (:&all-keys . 351) (:&key . 351)
            (:&rest . 351) (:&next . 351) (<dot> . 351)
            (<fragment-function-word> . 351) (<lcbracket> . 351)
            (<lsbracket> . 351) (<lbracket> . 351) (<not> . 351)
            (<becomes> . 351) (<var-singleton-sep> . 351)
            (<binds> . 351) (<minus> . 351) (<binary-operator> . 351)
            (<fragment-define-bindings-word> . 351)
            (<fragment-define-word> . 351) (<defining-word> . 351)
            (<symbol> . 351) (<vector-open> . 351) (<list-open> . 351)
            (:false . 351) (:true . 351) (<keyword> . 351)
            (<string> . 351) (<literal> . 351) (:method . 351)
            (:parsed-statement . 351) (:macro-case . 351)
            (<fragment-define-bindings-and-begin-word> . 351)
            (<fragment-define-and-begin-word> . 351)
            (<fragment-begin-word> . 351) (<simple-begin-word> . 351)
            (<expr-begin-word> . 351) (<details-begin-word> . 351)
            (<var-sep> . 351) (:parsed-local-declaration . 351)
            (<fragment-local-declaration-word> . 351) (:local . 351)
            (:let . 351) (:parsed-defining-form . 351)
            (<seal-word> . 351) (:define . 351) (<statement-sep> . 351)
            (:end . 351) (<escaped-hash-word> . 351)
            (<rcbracket> . 351) (<rbracket> . 351) (<rsbracket> . 351)
            (<details-intermediate-word> . 351)
            (<expr-intermediate-word> . 351)
            (<simple-intermediate-word> . 351))
           ((<implies> . 355) (<syntax-open> . 355)
            (:parsed-literal . 355) (:parsed-case-body . 355)
            (:parsed-body . 355) (:parsed-expression . 355)
            (:parsed-variable . 355) (:parsed-name . 355)
            (<query-equal> . 355) (<query-query> . 355) (<query> . 355)
            (<ellipsis> . 355) (<var-type-sep> . 355)
            (:otherwise . 355) (:&all-keys . 355) (:&key . 355)
            (:&rest . 355) (:&next . 355) (<dot> . 355)
            (<fragment-function-word> . 355) (<lcbracket> . 355)
            (<lsbracket> . 355) (<lbracket> . 355) (<not> . 355)
            (<becomes> . 355) (<var-singleton-sep> . 355)
            (<binds> . 355) (<minus> . 355) (<binary-operator> . 355)
            (<fragment-define-bindings-word> . 355)
            (<fragment-define-word> . 355) (<defining-word> . 355)
            (<symbol> . 355) (<vector-open> . 355) (<list-open> . 355)
            (:false . 355) (:true . 355) (<keyword> . 355)
            (<string> . 355) (<literal> . 355) (:method . 355)
            (:parsed-statement . 355) (:macro-case . 355)
            (<fragment-define-bindings-and-begin-word> . 355)
            (<fragment-define-and-begin-word> . 355)
            (<fragment-begin-word> . 355) (<simple-begin-word> . 355)
            (<expr-begin-word> . 355) (<details-begin-word> . 355)
            (<var-sep> . 355) (:parsed-local-declaration . 355)
            (<fragment-local-declaration-word> . 355) (:local . 355)
            (:let . 355) (:parsed-defining-form . 355)
            (<seal-word> . 355) (:define . 355) (<statement-sep> . 355)
            (:end . 355) (<rbracket> . 355) (<rsbracket> . 355)
            (<rcbracket> . 355) (<details-intermediate-word> . 355)
            (<expr-intermediate-word> . 355)
            (<simple-intermediate-word> . 355))
           ((<statement-sep> . 302) (:end . 302) (<rbracket> . 302)
            (<rsbracket> . 302) (<rcbracket> . 302)
            (<details-intermediate-word> . 302)
            (<expr-intermediate-word> . 302)
            (<simple-intermediate-word> . 302))
           ((<implies> . 334) (<syntax-open> . 334)
            (:parsed-literal . 334) (:parsed-case-body . 334)
            (:parsed-body . 334) (:parsed-expression . 334)
            (:parsed-variable . 334) (:parsed-name . 334)
            (<query-equal> . 334) (<query-query> . 334) (<query> . 334)
            (<ellipsis> . 334) (<var-type-sep> . 334)
            (:otherwise . 334) (:&all-keys . 334) (:&key . 334)
            (:&rest . 334) (:&next . 334) (<dot> . 334)
            (<fragment-function-word> . 334) (<lcbracket> . 334)
            (<lsbracket> . 334) (<lbracket> . 334) (<not> . 334)
            (<becomes> . 334) (<var-singleton-sep> . 334)
            (<binds> . 334) (<minus> . 334) (<binary-operator> . 334)
            (<fragment-define-bindings-word> . 334)
            (<fragment-define-word> . 334) (<defining-word> . 334)
            (<symbol> . 334) (<vector-open> . 334) (<list-open> . 334)
            (:false . 334) (:true . 334) (<keyword> . 334)
            (<string> . 334) (<literal> . 334) (:method . 334)
            (:parsed-statement . 334) (:macro-case . 334)
            (<fragment-define-bindings-and-begin-word> . 334)
            (<fragment-define-and-begin-word> . 334)
            (<fragment-begin-word> . 334) (<simple-begin-word> . 334)
            (<expr-begin-word> . 334) (<details-begin-word> . 334)
            (<var-sep> . 334) (:parsed-local-declaration . 334)
            (<fragment-local-declaration-word> . 334) (:local . 334)
            (:let . 334) (:parsed-defining-form . 334)
            (<seal-word> . 334) (:define . 334) (<statement-sep> . 334)
            (:end . 334) (<rbracket> . 334) (<rsbracket> . 334)
            (<rcbracket> . 334) (<details-intermediate-word> . 334)
            (<expr-intermediate-word> . 334)
            (<simple-intermediate-word> . 334))
           ((<implies> . 318) (<syntax-open> . 318)
            (:parsed-literal . 318) (:parsed-case-body . 318)
            (:parsed-body . 318) (:parsed-expression . 318)
            (:parsed-variable . 318) (:parsed-name . 318)
            (<query-equal> . 318) (<query-query> . 318) (<query> . 318)
            (<ellipsis> . 318) (<var-type-sep> . 318)
            (:otherwise . 318) (:&all-keys . 318) (:&key . 318)
            (:&rest . 318) (:&next . 318) (<dot> . 318)
            (<fragment-function-word> . 318) (<lcbracket> . 318)
            (<lsbracket> . 318) (<lbracket> . 318) (<not> . 318)
            (<becomes> . 318) (<var-singleton-sep> . 318)
            (<binds> . 318) (<minus> . 318) (<binary-operator> . 318)
            (<fragment-define-bindings-word> . 318)
            (<fragment-define-word> . 318) (<defining-word> . 318)
            (<symbol> . 318) (<vector-open> . 318) (<list-open> . 318)
            (:false . 318) (:true . 318) (<keyword> . 318)
            (<string> . 318) (<literal> . 318) (:method . 318)
            (:parsed-statement . 318) (:macro-case . 318)
            (<fragment-define-bindings-and-begin-word> . 318)
            (<fragment-define-and-begin-word> . 318)
            (<fragment-begin-word> . 318) (<simple-begin-word> . 318)
            (<expr-begin-word> . 318) (<details-begin-word> . 318)
            (<var-sep> . 318) (:parsed-local-declaration . 318)
            (<fragment-local-declaration-word> . 318) (:local . 318)
            (:let . 318) (:parsed-defining-form . 318)
            (<seal-word> . 318) (:define . 318) (<statement-sep> . 318)
            (:end . 318) (<rbracket> . 318) (<rsbracket> . 318)
            (<rcbracket> . 318) (<details-intermediate-word> . 318)
            (<expr-intermediate-word> . 318)
            (<simple-intermediate-word> . 318))
           ((<implies> . 319) (<syntax-open> . 319)
            (:parsed-literal . 319) (:parsed-case-body . 319)
            (:parsed-body . 319) (:parsed-expression . 319)
            (:parsed-variable . 319) (:parsed-name . 319)
            (<query-equal> . 319) (<query-query> . 319) (<query> . 319)
            (<ellipsis> . 319) (<var-type-sep> . 319)
            (:otherwise . 319) (:&all-keys . 319) (:&key . 319)
            (:&rest . 319) (:&next . 319) (<dot> . 319)
            (<fragment-function-word> . 319) (<lcbracket> . 319)
            (<lsbracket> . 319) (<lbracket> . 319) (<not> . 319)
            (<becomes> . 319) (<var-singleton-sep> . 319)
            (<binds> . 319) (<minus> . 319) (<binary-operator> . 319)
            (<fragment-define-bindings-word> . 319)
            (<fragment-define-word> . 319) (<defining-word> . 319)
            (<symbol> . 319) (<vector-open> . 319) (<list-open> . 319)
            (:false . 319) (:true . 319) (<keyword> . 319)
            (<string> . 319) (<literal> . 319) (:method . 319)
            (:parsed-statement . 319) (:macro-case . 319)
            (<fragment-define-bindings-and-begin-word> . 319)
            (<fragment-define-and-begin-word> . 319)
            (<fragment-begin-word> . 319) (<simple-begin-word> . 319)
            (<expr-begin-word> . 319) (<details-begin-word> . 319)
            (<var-sep> . 319) (:parsed-local-declaration . 319)
            (<fragment-local-declaration-word> . 319) (:local . 319)
            (:let . 319) (:parsed-defining-form . 319)
            (<seal-word> . 319) (:define . 319) (<statement-sep> . 319)
            (:end . 319) (<rbracket> . 319) (<rsbracket> . 319)
            (<rcbracket> . 319) (<details-intermediate-word> . 319)
            (<expr-intermediate-word> . 319)
            (<simple-intermediate-word> . 319))
           ((:parsed-literal . 513) (:parsed-case-body . 513)
            (:parsed-body . 513) (:parsed-expression . 513)
            (:parsed-variable . 513) (<minus> . 513) (<becomes> . 513)
            (<var-singleton-sep> . 513) (<binds> . 513)
            (<binary-operator> . 513) (<var-sep> . 513)
            (<statement-sep> . 513) (:parsed-name . 513)
            (<seal-word> . 513)
            (<generic-function-defining-word> . 513)
            (<method-defining-word> . 513)
            (<simple-intermediate-word> . 513)
            (<expr-intermediate-word> . 513)
            (<details-intermediate-word> . 513)
            (<simple-begin-word> . 513) (<expr-begin-word> . 513)
            (<details-begin-word> . 513)
            (<fragment-local-declaration-word> . 513)
            (<fragment-function-word> . 513)
            (<fragment-define-bindings-and-begin-word> . 513)
            (<fragment-define-bindings-word> . 513)
            (<fragment-define-and-begin-word> . 513)
            (<fragment-define-word> . 513)
            (<fragment-begin-word> . 513) (<defining-word> . 513)
            (<symbol> . 513) (:otherwise . 513) (:macro . 513)
            (:method . 513) (:local . 513) (:let . 513)
            (:handler . 513) (:generic . 513) (:end . 513)
            (:define . 513) (:&all-keys . 513) (:&key . 513)
            (:&rest . 513) (:&next . 513) (:false . 513) (:true . 513)
            (<not> . 513) (<unary-operator> . 513) (<literal> . 513)
            (<keyword> . 513) (<implies> . 513) (<ellipsis> . 513)
            (<var-type-sep> . 513) (<dot> . 513)
            (<escaped-substitution> . 513) (<string> . 513)
            (<query> . 513) (<query-equal> . 513) (<query-query> . 513)
            (<syntax-open> . 513) (<vector-open> . 513)
            (<list-open> . 513) (<lcbracket> . 513) (<lsbracket> . 513)
            (<lbracket> . 513) (<rcbracket> . 513) (<rbracket> . 513)
            (<rsbracket> . 513))
           ((:parsed-literal . 509) (:parsed-case-body . 509)
            (:parsed-body . 509) (:parsed-expression . 509)
            (:parsed-variable . 509) (<minus> . 509) (<becomes> . 509)
            (<var-singleton-sep> . 509) (<binds> . 509)
            (<binary-operator> . 509) (<var-sep> . 509)
            (<statement-sep> . 509) (:parsed-name . 509)
            (<seal-word> . 509)
            (<generic-function-defining-word> . 509)
            (<method-defining-word> . 509)
            (<simple-intermediate-word> . 509)
            (<expr-intermediate-word> . 509)
            (<details-intermediate-word> . 509)
            (<simple-begin-word> . 509) (<expr-begin-word> . 509)
            (<details-begin-word> . 509)
            (<fragment-local-declaration-word> . 509)
            (<fragment-function-word> . 509)
            (<fragment-define-bindings-and-begin-word> . 509)
            (<fragment-define-bindings-word> . 509)
            (<fragment-define-and-begin-word> . 509)
            (<fragment-define-word> . 509)
            (<fragment-begin-word> . 509) (<defining-word> . 509)
            (<symbol> . 509) (:otherwise . 509) (:macro . 509)
            (:method . 509) (:local . 509) (:let . 509)
            (:handler . 509) (:generic . 509) (:end . 509)
            (:define . 509) (:&all-keys . 509) (:&key . 509)
            (:&rest . 509) (:&next . 509) (:false . 509) (:true . 509)
            (<not> . 509) (<unary-operator> . 509) (<literal> . 509)
            (<keyword> . 509) (<implies> . 509) (<ellipsis> . 509)
            (<var-type-sep> . 509) (<dot> . 509)
            (<escaped-substitution> . 509) (<string> . 509)
            (<query> . 509) (<query-equal> . 509) (<query-query> . 509)
            (<syntax-open> . 509) (<vector-open> . 509)
            (<list-open> . 509) (<lcbracket> . 509) (<lsbracket> . 509)
            (<lbracket> . 509) (<rcbracket> . 509) (<rbracket> . 509)
            (<rsbracket> . 509))
           ((:parsed-literal . 523) (:parsed-case-body . 523)
            (:parsed-body . 523) (:parsed-expression . 523)
            (:parsed-variable . 523) (<minus> . 523) (<becomes> . 523)
            (<var-singleton-sep> . 523) (<binds> . 523)
            (<binary-operator> . 523) (<var-sep> . 523)
            (<statement-sep> . 523) (:parsed-name . 523)
            (<seal-word> . 523)
            (<generic-function-defining-word> . 523)
            (<method-defining-word> . 523)
            (<simple-intermediate-word> . 523)
            (<expr-intermediate-word> . 523)
            (<details-intermediate-word> . 523)
            (<simple-begin-word> . 523) (<expr-begin-word> . 523)
            (<details-begin-word> . 523)
            (<fragment-local-declaration-word> . 523)
            (<fragment-function-word> . 523)
            (<fragment-define-bindings-and-begin-word> . 523)
            (<fragment-define-bindings-word> . 523)
            (<fragment-define-and-begin-word> . 523)
            (<fragment-define-word> . 523)
            (<fragment-begin-word> . 523) (<defining-word> . 523)
            (<symbol> . 523) (:otherwise . 523) (:macro . 523)
            (:method . 523) (:local . 523) (:let . 523)
            (:handler . 523) (:generic . 523) (:end . 523)
            (:define . 523) (:&all-keys . 523) (:&key . 523)
            (:&rest . 523) (:&next . 523) (:false . 523) (:true . 523)
            (<not> . 523) (<unary-operator> . 523) (<literal> . 523)
            (<keyword> . 523) (<implies> . 523) (<ellipsis> . 523)
            (<var-type-sep> . 523) (<dot> . 523)
            (<escaped-substitution> . 523) (<string> . 523)
            (<query> . 523) (<query-equal> . 523) (<query-query> . 523)
            (<syntax-open> . 523) (<vector-open> . 523)
            (<list-open> . 523) (<lcbracket> . 523) (<lsbracket> . 523)
            (<lbracket> . 523) (<rcbracket> . 523) (<rbracket> . 523)
            (<rsbracket> . 523))
           ((:end . 454) (<query> . 454) (<ellipsis> . 454)
            (<lbracket> . 454) (<lsbracket> . 454) (<lcbracket> . 454)
            (<symbol> . 454) (<defining-word> . 454)
            (<fragment-define-word> . 454)
            (<fragment-define-bindings-word> . 454)
            (<binary-operator> . 454) (<minus> . 454) (<binds> . 454)
            (<var-singleton-sep> . 454) (<becomes> . 454) (<not> . 454)
            (:parsed-name . 454) (:otherwise . 454) (<implies> . 454)
            (<escaped-hash-word> . 454) (<literal> . 454)
            (<string> . 454) (<keyword> . 454) (:true . 454)
            (:false . 454) (<list-open> . 454) (<vector-open> . 454)
            (:&rest . 454) (:&key . 454) (<rcbracket> . 454)
            (:parsed-literal . 454) (:parsed-case-body . 454)
            (:parsed-body . 454) (:parsed-expression . 454)
            (:parsed-variable . 454) (<var-sep> . 454)
            (<statement-sep> . 454) (<seal-word> . 454)
            (<generic-function-defining-word> . 454)
            (<method-defining-word> . 454)
            (<simple-intermediate-word> . 454)
            (<expr-intermediate-word> . 454)
            (<details-intermediate-word> . 454)
            (<simple-begin-word> . 454) (<expr-begin-word> . 454)
            (<details-begin-word> . 454)
            (<fragment-local-declaration-word> . 454)
            (<fragment-function-word> . 454)
            (<fragment-define-bindings-and-begin-word> . 454)
            (<fragment-define-and-begin-word> . 454)
            (<fragment-begin-word> . 454) (:macro . 454)
            (:method . 454) (:local . 454) (:let . 454)
            (:handler . 454) (:generic . 454) (:define . 454)
            (:&all-keys . 454) (:&next . 454) (<unary-operator> . 454)
            (<var-type-sep> . 454) (<dot> . 454)
            (<escaped-substitution> . 454) (<query-equal> . 454)
            (<query-query> . 454) (<syntax-open> . 454)
            (<rbracket> . 454) (<rsbracket> . 454) (<splice> . 454))
           ((:end . 452) (<query> . 452) (<ellipsis> . 452)
            (<lbracket> . 452) (<lsbracket> . 452) (<lcbracket> . 452)
            (<symbol> . 452) (<defining-word> . 452)
            (<fragment-define-word> . 452)
            (<fragment-define-bindings-word> . 452)
            (<binary-operator> . 452) (<minus> . 452) (<binds> . 452)
            (<var-singleton-sep> . 452) (<becomes> . 452) (<not> . 452)
            (:parsed-name . 452) (:otherwise . 452) (<implies> . 452)
            (<escaped-hash-word> . 452) (<literal> . 452)
            (<string> . 452) (<keyword> . 452) (:true . 452)
            (:false . 452) (<list-open> . 452) (<vector-open> . 452)
            (:&rest . 452) (:&key . 452) (<rcbracket> . 452)
            (:parsed-literal . 452) (:parsed-case-body . 452)
            (:parsed-body . 452) (:parsed-expression . 452)
            (:parsed-variable . 452) (<var-sep> . 452)
            (<statement-sep> . 452) (<seal-word> . 452)
            (<generic-function-defining-word> . 452)
            (<method-defining-word> . 452)
            (<simple-intermediate-word> . 452)
            (<expr-intermediate-word> . 452)
            (<details-intermediate-word> . 452)
            (<simple-begin-word> . 452) (<expr-begin-word> . 452)
            (<details-begin-word> . 452)
            (<fragment-local-declaration-word> . 452)
            (<fragment-function-word> . 452)
            (<fragment-define-bindings-and-begin-word> . 452)
            (<fragment-define-and-begin-word> . 452)
            (<fragment-begin-word> . 452) (:macro . 452)
            (:method . 452) (:local . 452) (:let . 452)
            (:handler . 452) (:generic . 452) (:define . 452)
            (:&all-keys . 452) (:&next . 452) (<unary-operator> . 452)
            (<var-type-sep> . 452) (<dot> . 452)
            (<escaped-substitution> . 452) (<query-equal> . 452)
            (<query-query> . 452) (<syntax-open> . 452)
            (<rbracket> . 452) (<rsbracket> . 452) (<splice> . 452))
           ((:parsed-literal . 529) (:parsed-case-body . 529)
            (:parsed-body . 529) (:parsed-expression . 529)
            (:parsed-variable . 529) (<minus> . 529) (<becomes> . 529)
            (<var-singleton-sep> . 529) (<binds> . 529)
            (<binary-operator> . 529) (<var-sep> . 529)
            (<statement-sep> . 529) (:parsed-name . 529)
            (<seal-word> . 529)
            (<generic-function-defining-word> . 529)
            (<method-defining-word> . 529)
            (<simple-intermediate-word> . 529)
            (<expr-intermediate-word> . 529)
            (<details-intermediate-word> . 529)
            (<simple-begin-word> . 529) (<expr-begin-word> . 529)
            (<details-begin-word> . 529)
            (<fragment-local-declaration-word> . 529)
            (<fragment-function-word> . 529)
            (<fragment-define-bindings-and-begin-word> . 529)
            (<fragment-define-bindings-word> . 529)
            (<fragment-define-and-begin-word> . 529)
            (<fragment-define-word> . 529)
            (<fragment-begin-word> . 529) (<defining-word> . 529)
            (<symbol> . 529) (:otherwise . 529) (:macro . 529)
            (:method . 529) (:local . 529) (:let . 529)
            (:handler . 529) (:generic . 529) (:end . 529)
            (:define . 529) (:&all-keys . 529) (:&key . 529)
            (:&rest . 529) (:&next . 529) (:false . 529) (:true . 529)
            (<not> . 529) (<unary-operator> . 529) (<literal> . 529)
            (<keyword> . 529) (<implies> . 529) (<ellipsis> . 529)
            (<var-type-sep> . 529) (<dot> . 529)
            (<escaped-substitution> . 529) (<string> . 529)
            (<query> . 529) (<query-equal> . 529) (<query-query> . 529)
            (<syntax-open> . 529) (<vector-open> . 529)
            (<list-open> . 529) (<lcbracket> . 529) (<lsbracket> . 529)
            (<lbracket> . 529) (<rcbracket> . 529) (<rbracket> . 529)
            (<rsbracket> . 529))
           ((<symbol> . -168) (<defining-word> . -182)
            (<fragment-begin-word> . -190)
            (<fragment-define-word> . -152)
            (<fragment-define-and-begin-word> . -207)
            (<fragment-define-bindings-word> . -204)
            (<fragment-define-bindings-and-begin-word> . -203)
            (<fragment-function-word> . -213)
            (<fragment-local-declaration-word> . -186)
            (<details-begin-word> . -156) (<expr-begin-word> . -150)
            (<simple-begin-word> . -195)
            (<details-intermediate-word> . -174)
            (<expr-intermediate-word> . -170)
            (<simple-intermediate-word> . -158)
            (<method-defining-word> . -146)
            (<generic-function-defining-word> . -193)
            (<seal-word> . -145) (:parsed-name . -211))
           ((:parsed-literal . 510) (:parsed-case-body . 510)
            (:parsed-body . 510) (:parsed-expression . 510)
            (:parsed-variable . 510) (<minus> . 510) (<becomes> . 510)
            (<var-singleton-sep> . 510) (<binds> . 510)
            (<binary-operator> . 510) (<var-sep> . 510)
            (<statement-sep> . 510) (:parsed-name . 510)
            (<seal-word> . 510)
            (<generic-function-defining-word> . 510)
            (<method-defining-word> . 510)
            (<simple-intermediate-word> . 510)
            (<expr-intermediate-word> . 510)
            (<details-intermediate-word> . 510)
            (<simple-begin-word> . 510) (<expr-begin-word> . 510)
            (<details-begin-word> . 510)
            (<fragment-local-declaration-word> . 510)
            (<fragment-function-word> . 510)
            (<fragment-define-bindings-and-begin-word> . 510)
            (<fragment-define-bindings-word> . 510)
            (<fragment-define-and-begin-word> . 510)
            (<fragment-define-word> . 510)
            (<fragment-begin-word> . 510) (<defining-word> . 510)
            (<symbol> . 510) (:otherwise . 510) (:macro . 510)
            (:method . 510) (:local . 510) (:let . 510)
            (:handler . 510) (:generic . 510) (:end . 510)
            (:define . 510) (:&all-keys . 510) (:&key . 510)
            (:&rest . 510) (:&next . 510) (:false . 510) (:true . 510)
            (<not> . 510) (<unary-operator> . 510) (<literal> . 510)
            (<keyword> . 510) (<implies> . 510) (<ellipsis> . 510)
            (<var-type-sep> . 510) (<dot> . 510)
            (<escaped-substitution> . 510) (<string> . 510)
            (<query> . 510) (<query-equal> . 510) (<query-query> . 510)
            (<syntax-open> . 510) (<vector-open> . 510)
            (<list-open> . 510) (<lcbracket> . 510) (<lsbracket> . 510)
            (<lbracket> . 510) (<rcbracket> . 510) (<rbracket> . 510)
            (<rsbracket> . 510))
           ((:end . 447) (<query> . 447) (<ellipsis> . 447)
            (<lbracket> . 447) (<lsbracket> . 447) (<lcbracket> . 447)
            (<symbol> . 447) (<defining-word> . 447)
            (<fragment-define-word> . 447)
            (<fragment-define-bindings-word> . 447)
            (<binary-operator> . 447) (<minus> . 447) (<binds> . 447)
            (<var-singleton-sep> . 447) (<becomes> . 447) (<not> . 447)
            (:parsed-name . 447) (:otherwise . 447) (<implies> . 447)
            (<escaped-hash-word> . 447) (<literal> . 447)
            (<string> . 447) (<keyword> . 447) (:true . 447)
            (:false . 447) (<list-open> . 447) (<vector-open> . 447)
            (:&rest . 447) (:&key . 447) (<rcbracket> . 447)
            (:parsed-literal . 447) (:parsed-case-body . 447)
            (:parsed-body . 447) (:parsed-expression . 447)
            (:parsed-variable . 447) (<var-sep> . 447)
            (<statement-sep> . 447) (<seal-word> . 447)
            (<generic-function-defining-word> . 447)
            (<method-defining-word> . 447)
            (<simple-intermediate-word> . 447)
            (<expr-intermediate-word> . 447)
            (<details-intermediate-word> . 447)
            (<simple-begin-word> . 447) (<expr-begin-word> . 447)
            (<details-begin-word> . 447)
            (<fragment-local-declaration-word> . 447)
            (<fragment-function-word> . 447)
            (<fragment-define-bindings-and-begin-word> . 447)
            (<fragment-define-and-begin-word> . 447)
            (<fragment-begin-word> . 447) (:macro . 447)
            (:method . 447) (:local . 447) (:let . 447)
            (:handler . 447) (:generic . 447) (:define . 447)
            (:&all-keys . 447) (:&next . 447) (<unary-operator> . 447)
            (<var-type-sep> . 447) (<dot> . 447)
            (<escaped-substitution> . 447) (<query-equal> . 447)
            (<query-query> . 447) (<syntax-open> . 447)
            (<rbracket> . 447) (<rsbracket> . 447) (<splice> . 447))
           ((:parsed-literal . 526) (:parsed-case-body . 526)
            (:parsed-body . 526) (:parsed-expression . 526)
            (:parsed-variable . 526) (<minus> . 526) (<becomes> . 526)
            (<var-singleton-sep> . 526) (<binds> . 526)
            (<binary-operator> . 526) (<var-sep> . 526)
            (<statement-sep> . 526) (:parsed-name . 526)
            (<seal-word> . 526)
            (<generic-function-defining-word> . 526)
            (<method-defining-word> . 526)
            (<simple-intermediate-word> . 526)
            (<expr-intermediate-word> . 526)
            (<details-intermediate-word> . 526)
            (<simple-begin-word> . 526) (<expr-begin-word> . 526)
            (<details-begin-word> . 526)
            (<fragment-local-declaration-word> . 526)
            (<fragment-function-word> . 526)
            (<fragment-define-bindings-and-begin-word> . 526)
            (<fragment-define-bindings-word> . 526)
            (<fragment-define-and-begin-word> . 526)
            (<fragment-define-word> . 526)
            (<fragment-begin-word> . 526) (<defining-word> . 526)
            (<symbol> . 526) (:otherwise . 526) (:macro . 526)
            (:method . 526) (:local . 526) (:let . 526)
            (:handler . 526) (:generic . 526) (:end . 526)
            (:define . 526) (:&all-keys . 526) (:&key . 526)
            (:&rest . 526) (:&next . 526) (:false . 526) (:true . 526)
            (<not> . 526) (<unary-operator> . 526) (<literal> . 526)
            (<keyword> . 526) (<implies> . 526) (<ellipsis> . 526)
            (<var-type-sep> . 526) (<dot> . 526)
            (<escaped-substitution> . 526) (<string> . 526)
            (<query> . 526) (<query-equal> . 526) (<query-query> . 526)
            (<syntax-open> . 526) (<vector-open> . 526)
            (<list-open> . 526) (<lcbracket> . 526) (<lsbracket> . 526)
            (<lbracket> . 526) (<rcbracket> . 526) (<rbracket> . 526)
            (<rsbracket> . 526))
           ((:end . 440) (<query> . 440) (<ellipsis> . 440)
            (<lbracket> . 440) (<lsbracket> . 440) (<lcbracket> . 440)
            (<symbol> . 440) (<defining-word> . 440)
            (<fragment-define-word> . 440)
            (<fragment-define-bindings-word> . 440)
            (<binary-operator> . 440) (<minus> . 440) (<binds> . 440)
            (<var-singleton-sep> . 440) (<becomes> . 440) (<not> . 440)
            (:parsed-name . 440) (:otherwise . 440) (<implies> . 440)
            (<escaped-hash-word> . 440) (<literal> . 440)
            (<string> . 440) (<keyword> . 440) (:true . 440)
            (:false . 440) (<list-open> . 440) (<vector-open> . 440)
            (:&rest . 440) (:&key . 440) (<rcbracket> . 440)
            (:parsed-literal . 440) (:parsed-case-body . 440)
            (:parsed-body . 440) (:parsed-expression . 440)
            (:parsed-variable . 440) (<var-sep> . 440)
            (<statement-sep> . 440) (<seal-word> . 440)
            (<generic-function-defining-word> . 440)
            (<method-defining-word> . 440)
            (<simple-intermediate-word> . 440)
            (<expr-intermediate-word> . 440)
            (<details-intermediate-word> . 440)
            (<simple-begin-word> . 440) (<expr-begin-word> . 440)
            (<details-begin-word> . 440)
            (<fragment-local-declaration-word> . 440)
            (<fragment-function-word> . 440)
            (<fragment-define-bindings-and-begin-word> . 440)
            (<fragment-define-and-begin-word> . 440)
            (<fragment-begin-word> . 440) (:macro . 440)
            (:method . 440) (:local . 440) (:let . 440)
            (:handler . 440) (:generic . 440) (:define . 440)
            (:&all-keys . 440) (:&next . 440) (<unary-operator> . 440)
            (<var-type-sep> . 440) (<dot> . 440)
            (<escaped-substitution> . 440) (<query-equal> . 440)
            (<query-query> . 440) (<syntax-open> . 440)
            (<rbracket> . 440) (<rsbracket> . 440) (<splice> . 440))
           ((<lbracket> . -478) (<literal> . -466) (<string> . -467)
            (<symbol> . -168) (<defining-word> . -182)
            (<fragment-begin-word> . -190)
            (<fragment-define-word> . -152)
            (<fragment-define-and-begin-word> . -207)
            (<fragment-define-bindings-word> . -204)
            (<fragment-define-bindings-and-begin-word> . -203)
            (<fragment-function-word> . -213)
            (<fragment-local-declaration-word> . -186)
            (<details-begin-word> . -156) (<expr-begin-word> . -150)
            (<simple-begin-word> . -195)
            (<details-intermediate-word> . -174)
            (<expr-intermediate-word> . -170)
            (<simple-intermediate-word> . -158)
            (<method-defining-word> . -146)
            (<generic-function-defining-word> . -193)
            (<seal-word> . -145) (:parsed-name . -211))
           ((:parsed-literal . 519) (:parsed-case-body . 519)
            (:parsed-body . 519) (:parsed-expression . 519)
            (:parsed-variable . 519) (<minus> . 519) (<becomes> . 519)
            (<var-singleton-sep> . 519) (<binds> . 519)
            (<binary-operator> . 519) (<var-sep> . 519)
            (<statement-sep> . 519) (:parsed-name . 519)
            (<seal-word> . 519)
            (<generic-function-defining-word> . 519)
            (<method-defining-word> . 519)
            (<simple-intermediate-word> . 519)
            (<expr-intermediate-word> . 519)
            (<details-intermediate-word> . 519)
            (<simple-begin-word> . 519) (<expr-begin-word> . 519)
            (<details-begin-word> . 519)
            (<fragment-local-declaration-word> . 519)
            (<fragment-function-word> . 519)
            (<fragment-define-bindings-and-begin-word> . 519)
            (<fragment-define-bindings-word> . 519)
            (<fragment-define-and-begin-word> . 519)
            (<fragment-define-word> . 519)
            (<fragment-begin-word> . 519) (<defining-word> . 519)
            (<symbol> . 519) (:otherwise . 519) (:macro . 519)
            (:method . 519) (:local . 519) (:let . 519)
            (:handler . 519) (:generic . 519) (:end . 519)
            (:define . 519) (:&all-keys . 519) (:&key . 519)
            (:&rest . 519) (:&next . 519) (:false . 519) (:true . 519)
            (<not> . 519) (<unary-operator> . 519) (<literal> . 519)
            (<keyword> . 519) (<implies> . 519) (<ellipsis> . 519)
            (<var-type-sep> . 519) (<dot> . 519)
            (<escaped-substitution> . 519) (<string> . 519)
            (<query> . 519) (<query-equal> . 519) (<query-query> . 519)
            (<syntax-open> . 519) (<vector-open> . 519)
            (<list-open> . 519) (<lcbracket> . 519) (<lsbracket> . 519)
            (<lbracket> . 519) (<rcbracket> . 519) (<rbracket> . 519)
            (<rsbracket> . 519))
           ((:parsed-literal . 499) (:parsed-case-body . 499)
            (:parsed-body . 499) (:parsed-expression . 499)
            (:parsed-variable . 499) (<minus> . 499) (<becomes> . 499)
            (<var-singleton-sep> . 499) (<binds> . 499)
            (<binary-operator> . 499) (<var-sep> . 499)
            (<statement-sep> . 499) (:parsed-name . 499)
            (<seal-word> . 499)
            (<generic-function-defining-word> . 499)
            (<method-defining-word> . 499)
            (<simple-intermediate-word> . 499)
            (<expr-intermediate-word> . 499)
            (<details-intermediate-word> . 499)
            (<simple-begin-word> . 499) (<expr-begin-word> . 499)
            (<details-begin-word> . 499)
            (<fragment-local-declaration-word> . 499)
            (<fragment-function-word> . 499)
            (<fragment-define-bindings-and-begin-word> . 499)
            (<fragment-define-bindings-word> . 499)
            (<fragment-define-and-begin-word> . 499)
            (<fragment-define-word> . 499)
            (<fragment-begin-word> . 499) (<defining-word> . 499)
            (<symbol> . 499) (:otherwise . 499) (:macro . 499)
            (:method . 499) (:local . 499) (:let . 499)
            (:handler . 499) (:generic . 499) (:end . 499)
            (:define . 499) (:&all-keys . 499) (:&key . 499)
            (:&rest . 499) (:&next . 499) (:false . 499) (:true . 499)
            (<not> . 499) (<unary-operator> . 499) (<literal> . 499)
            (<keyword> . 499) (<implies> . 499) (<ellipsis> . 499)
            (<var-type-sep> . 499) (<dot> . 499)
            (<escaped-substitution> . 499) (<string> . 499)
            (<query> . 499) (<query-equal> . 499) (<query-query> . 499)
            (<syntax-open> . 499) (<vector-open> . 499)
            (<list-open> . 499) (<lcbracket> . 499) (<lsbracket> . 499)
            (<lbracket> . 499) (<rcbracket> . 499) (<rbracket> . 499)
            (<rsbracket> . 499))
           ((:end . 446) (<query> . 446) (<ellipsis> . 446)
            (<lbracket> . 446) (<lsbracket> . 446) (<lcbracket> . 446)
            (<symbol> . 446) (<defining-word> . 446)
            (<fragment-define-word> . 446)
            (<fragment-define-bindings-word> . 446)
            (<binary-operator> . 446) (<minus> . 446) (<binds> . 446)
            (<var-singleton-sep> . 446) (<becomes> . 446) (<not> . 446)
            (:parsed-name . 446) (:otherwise . 446) (<implies> . 446)
            (<escaped-hash-word> . 446) (<literal> . 446)
            (<string> . 446) (<keyword> . 446) (:true . 446)
            (:false . 446) (<list-open> . 446) (<vector-open> . 446)
            (:&rest . 446) (:&key . 446) (<rcbracket> . 446)
            (:parsed-literal . 446) (:parsed-case-body . 446)
            (:parsed-body . 446) (:parsed-expression . 446)
            (:parsed-variable . 446) (<var-sep> . 446)
            (<statement-sep> . 446) (<seal-word> . 446)
            (<generic-function-defining-word> . 446)
            (<method-defining-word> . 446)
            (<simple-intermediate-word> . 446)
            (<expr-intermediate-word> . 446)
            (<details-intermediate-word> . 446)
            (<simple-begin-word> . 446) (<expr-begin-word> . 446)
            (<details-begin-word> . 446)
            (<fragment-local-declaration-word> . 446)
            (<fragment-function-word> . 446)
            (<fragment-define-bindings-and-begin-word> . 446)
            (<fragment-define-and-begin-word> . 446)
            (<fragment-begin-word> . 446) (:macro . 446)
            (:method . 446) (:local . 446) (:let . 446)
            (:handler . 446) (:generic . 446) (:define . 446)
            (:&all-keys . 446) (:&next . 446) (<unary-operator> . 446)
            (<var-type-sep> . 446) (<dot> . 446)
            (<escaped-substitution> . 446) (<query-equal> . 446)
            (<query-query> . 446) (<syntax-open> . 446)
            (<rbracket> . 446) (<rsbracket> . 446) (<splice> . 446))
           ((<rbracket> . 479) (<query> . -153) (<lbracket> . -157)
            (<lsbracket> . -161) (<lcbracket> . -169)
            (<list-open> . -180) (<vector-open> . -188)
            (<syntax-open> . -196) (<query-query> . -212)
            (<query-equal> . -148) (<string> . -197)
            (<escaped-substitution> . -155) (<dot> . -163)
            (<var-type-sep> . -179) (<ellipsis> . -202)
            (<implies> . -171) (<keyword> . -176) (<literal> . -192)
            (<unary-operator> . -208) (<not> . -185) (:true . -143)
            (:false . -149) (:&next . -194) (:&rest . -209)
            (:&key . -142) (:&all-keys . -173) (:define . -166)
            (:end . -199) (:generic . -167) (:handler . -177)
            (:let . -154) (:local . -162) (:method . -159)
            (:macro . -198) (:otherwise . -144)
            (:parsed-variable . -151) (:parsed-expression . -189)
            (:parsed-body . -201) (:parsed-case-body . -147)
            (:parsed-literal . -200) (<statement-sep> . -175)
            (<var-sep> . -183) (<binary-operator> . -178)
            (<binds> . -210) (<var-singleton-sep> . -165)
            (<becomes> . -187) (<minus> . -206) (<symbol> . -168)
            (<defining-word> . -182) (<fragment-begin-word> . -190)
            (<fragment-define-word> . -152)
            (<fragment-define-and-begin-word> . -207)
            (<fragment-define-bindings-word> . -204)
            (<fragment-define-bindings-and-begin-word> . -203)
            (<fragment-function-word> . -213)
            (<fragment-local-declaration-word> . -186)
            (<details-begin-word> . -156) (<expr-begin-word> . -150)
            (<simple-begin-word> . -195)
            (<details-intermediate-word> . -174)
            (<expr-intermediate-word> . -170)
            (<simple-intermediate-word> . -158)
            (<method-defining-word> . -146)
            (<generic-function-defining-word> . -193)
            (<seal-word> . -145) (:parsed-name . -211))
           ((:end . 451) (<query> . 451) (<ellipsis> . 451)
            (<lbracket> . 451) (<lsbracket> . 451) (<lcbracket> . 451)
            (<symbol> . 451) (<defining-word> . 451)
            (<fragment-define-word> . 451)
            (<fragment-define-bindings-word> . 451)
            (<binary-operator> . 451) (<minus> . 451) (<binds> . 451)
            (<var-singleton-sep> . 451) (<becomes> . 451) (<not> . 451)
            (:parsed-name . 451) (:otherwise . 451) (<implies> . 451)
            (<escaped-hash-word> . 451) (<literal> . 451)
            (<string> . 451) (<keyword> . 451) (:true . 451)
            (:false . 451) (<list-open> . 451) (<vector-open> . 451)
            (:&rest . 451) (:&key . 451) (<rcbracket> . 451)
            (:parsed-literal . 451) (:parsed-case-body . 451)
            (:parsed-body . 451) (:parsed-expression . 451)
            (:parsed-variable . 451) (<var-sep> . 451)
            (<statement-sep> . 451) (<seal-word> . 451)
            (<generic-function-defining-word> . 451)
            (<method-defining-word> . 451)
            (<simple-intermediate-word> . 451)
            (<expr-intermediate-word> . 451)
            (<details-intermediate-word> . 451)
            (<simple-begin-word> . 451) (<expr-begin-word> . 451)
            (<details-begin-word> . 451)
            (<fragment-local-declaration-word> . 451)
            (<fragment-function-word> . 451)
            (<fragment-define-bindings-and-begin-word> . 451)
            (<fragment-define-and-begin-word> . 451)
            (<fragment-begin-word> . 451) (:macro . 451)
            (:method . 451) (:local . 451) (:let . 451)
            (:handler . 451) (:generic . 451) (:define . 451)
            (:&all-keys . 451) (:&next . 451) (<unary-operator> . 451)
            (<var-type-sep> . 451) (<dot> . 451)
            (<escaped-substitution> . 451) (<query-equal> . 451)
            (<query-query> . 451) (<syntax-open> . 451)
            (<rbracket> . 451) (<rsbracket> . 451) (<splice> . 451))
           ((:parsed-literal . 521) (:parsed-case-body . 521)
            (:parsed-body . 521) (:parsed-expression . 521)
            (:parsed-variable . 521) (<minus> . 521) (<becomes> . 521)
            (<var-singleton-sep> . 521) (<binds> . 521)
            (<binary-operator> . 521) (<var-sep> . 521)
            (<statement-sep> . 521) (:parsed-name . 521)
            (<seal-word> . 521)
            (<generic-function-defining-word> . 521)
            (<method-defining-word> . 521)
            (<simple-intermediate-word> . 521)
            (<expr-intermediate-word> . 521)
            (<details-intermediate-word> . 521)
            (<simple-begin-word> . 521) (<expr-begin-word> . 521)
            (<details-begin-word> . 521)
            (<fragment-local-declaration-word> . 521)
            (<fragment-function-word> . 521)
            (<fragment-define-bindings-and-begin-word> . 521)
            (<fragment-define-bindings-word> . 521)
            (<fragment-define-and-begin-word> . 521)
            (<fragment-define-word> . 521)
            (<fragment-begin-word> . 521) (<defining-word> . 521)
            (<symbol> . 521) (:otherwise . 521) (:macro . 521)
            (:method . 521) (:local . 521) (:let . 521)
            (:handler . 521) (:generic . 521) (:end . 521)
            (:define . 521) (:&all-keys . 521) (:&key . 521)
            (:&rest . 521) (:&next . 521) (:false . 521) (:true . 521)
            (<not> . 521) (<unary-operator> . 521) (<literal> . 521)
            (<keyword> . 521) (<implies> . 521) (<ellipsis> . 521)
            (<var-type-sep> . 521) (<dot> . 521)
            (<escaped-substitution> . 521) (<string> . 521)
            (<query> . 521) (<query-equal> . 521) (<query-query> . 521)
            (<syntax-open> . 521) (<vector-open> . 521)
            (<list-open> . 521) (<lcbracket> . 521) (<lsbracket> . 521)
            (<lbracket> . 521) (<rcbracket> . 521) (<rbracket> . 521)
            (<rsbracket> . 521))
           ((:parsed-literal . 585) (:parsed-case-body . 585)
            (:parsed-body . 585) (:parsed-expression . 585)
            (:parsed-variable . 585) (<minus> . 585) (<becomes> . 585)
            (<var-singleton-sep> . 585) (<binds> . 585)
            (<binary-operator> . 585) (<var-sep> . 585)
            (<statement-sep> . 585) (:parsed-name . 585)
            (<seal-word> . 585)
            (<generic-function-defining-word> . 585)
            (<method-defining-word> . 585)
            (<simple-intermediate-word> . 585)
            (<expr-intermediate-word> . 585)
            (<details-intermediate-word> . 585)
            (<simple-begin-word> . 585) (<expr-begin-word> . 585)
            (<details-begin-word> . 585)
            (<fragment-local-declaration-word> . 585)
            (<fragment-function-word> . 585)
            (<fragment-define-bindings-and-begin-word> . 585)
            (<fragment-define-bindings-word> . 585)
            (<fragment-define-and-begin-word> . 585)
            (<fragment-define-word> . 585)
            (<fragment-begin-word> . 585) (<defining-word> . 585)
            (<symbol> . 585) (:otherwise . 585) (:macro . 585)
            (:method . 585) (:local . 585) (:let . 585)
            (:handler . 585) (:generic . 585) (:end . 585)
            (:define . 585) (:&all-keys . 585) (:&key . 585)
            (:&rest . 585) (:&next . 585) (:false . 585) (:true . 585)
            (<not> . 585) (<unary-operator> . 585) (<literal> . 585)
            (<keyword> . 585) (<implies> . 585) (<ellipsis> . 585)
            (<var-type-sep> . 585) (<dot> . 585)
            (<escaped-substitution> . 585) (<string> . 585)
            (<query> . 585) (<query-equal> . 585) (<query-query> . 585)
            (<syntax-open> . 585) (<vector-open> . 585)
            (<list-open> . 585) (<lcbracket> . 585) (<lsbracket> . 585)
            (<lbracket> . 585) (<rcbracket> . 585) (<rbracket> . 585)
            (<rsbracket> . 585))
           ((<rsbracket> . 479) (<query> . -153) (<lbracket> . -157)
            (<lsbracket> . -161) (<lcbracket> . -169)
            (<list-open> . -180) (<vector-open> . -188)
            (<syntax-open> . -196) (<query-query> . -212)
            (<query-equal> . -148) (<string> . -197)
            (<escaped-substitution> . -155) (<dot> . -163)
            (<var-type-sep> . -179) (<ellipsis> . -202)
            (<implies> . -171) (<keyword> . -176) (<literal> . -192)
            (<unary-operator> . -208) (<not> . -185) (:true . -143)
            (:false . -149) (:&next . -194) (:&rest . -209)
            (:&key . -142) (:&all-keys . -173) (:define . -166)
            (:end . -199) (:generic . -167) (:handler . -177)
            (:let . -154) (:local . -162) (:method . -159)
            (:macro . -198) (:otherwise . -144)
            (:parsed-variable . -151) (:parsed-expression . -189)
            (:parsed-body . -201) (:parsed-case-body . -147)
            (:parsed-literal . -200) (<statement-sep> . -175)
            (<var-sep> . -183) (<binary-operator> . -178)
            (<binds> . -210) (<var-singleton-sep> . -165)
            (<becomes> . -187) (<minus> . -206) (<symbol> . -168)
            (<defining-word> . -182) (<fragment-begin-word> . -190)
            (<fragment-define-word> . -152)
            (<fragment-define-and-begin-word> . -207)
            (<fragment-define-bindings-word> . -204)
            (<fragment-define-bindings-and-begin-word> . -203)
            (<fragment-function-word> . -213)
            (<fragment-local-declaration-word> . -186)
            (<details-begin-word> . -156) (<expr-begin-word> . -150)
            (<simple-begin-word> . -195)
            (<details-intermediate-word> . -174)
            (<expr-intermediate-word> . -170)
            (<simple-intermediate-word> . -158)
            (<method-defining-word> . -146)
            (<generic-function-defining-word> . -193)
            (<seal-word> . -145) (:parsed-name . -211))
           ((:parsed-literal . 520) (:parsed-case-body . 520)
            (:parsed-body . 520) (:parsed-expression . 520)
            (:parsed-variable . 520) (<minus> . 520) (<becomes> . 520)
            (<var-singleton-sep> . 520) (<binds> . 520)
            (<binary-operator> . 520) (<var-sep> . 520)
            (<statement-sep> . 520) (:parsed-name . 520)
            (<seal-word> . 520)
            (<generic-function-defining-word> . 520)
            (<method-defining-word> . 520)
            (<simple-intermediate-word> . 520)
            (<expr-intermediate-word> . 520)
            (<details-intermediate-word> . 520)
            (<simple-begin-word> . 520) (<expr-begin-word> . 520)
            (<details-begin-word> . 520)
            (<fragment-local-declaration-word> . 520)
            (<fragment-function-word> . 520)
            (<fragment-define-bindings-and-begin-word> . 520)
            (<fragment-define-bindings-word> . 520)
            (<fragment-define-and-begin-word> . 520)
            (<fragment-define-word> . 520)
            (<fragment-begin-word> . 520) (<defining-word> . 520)
            (<symbol> . 520) (:otherwise . 520) (:macro . 520)
            (:method . 520) (:local . 520) (:let . 520)
            (:handler . 520) (:generic . 520) (:end . 520)
            (:define . 520) (:&all-keys . 520) (:&key . 520)
            (:&rest . 520) (:&next . 520) (:false . 520) (:true . 520)
            (<not> . 520) (<unary-operator> . 520) (<literal> . 520)
            (<keyword> . 520) (<implies> . 520) (<ellipsis> . 520)
            (<var-type-sep> . 520) (<dot> . 520)
            (<escaped-substitution> . 520) (<string> . 520)
            (<query> . 520) (<query-equal> . 520) (<query-query> . 520)
            (<syntax-open> . 520) (<vector-open> . 520)
            (<list-open> . 520) (<lcbracket> . 520) (<lsbracket> . 520)
            (<lbracket> . 520) (<rcbracket> . 520) (<rbracket> . 520)
            (<rsbracket> . 520))
           ((:parsed-literal . 500) (:parsed-case-body . 500)
            (:parsed-body . 500) (:parsed-expression . 500)
            (:parsed-variable . 500) (<minus> . 500) (<becomes> . 500)
            (<var-singleton-sep> . 500) (<binds> . 500)
            (<binary-operator> . 500) (<var-sep> . 500)
            (<statement-sep> . 500) (:parsed-name . 500)
            (<seal-word> . 500)
            (<generic-function-defining-word> . 500)
            (<method-defining-word> . 500)
            (<simple-intermediate-word> . 500)
            (<expr-intermediate-word> . 500)
            (<details-intermediate-word> . 500)
            (<simple-begin-word> . 500) (<expr-begin-word> . 500)
            (<details-begin-word> . 500)
            (<fragment-local-declaration-word> . 500)
            (<fragment-function-word> . 500)
            (<fragment-define-bindings-and-begin-word> . 500)
            (<fragment-define-bindings-word> . 500)
            (<fragment-define-and-begin-word> . 500)
            (<fragment-define-word> . 500)
            (<fragment-begin-word> . 500) (<defining-word> . 500)
            (<symbol> . 500) (:otherwise . 500) (:macro . 500)
            (:method . 500) (:local . 500) (:let . 500)
            (:handler . 500) (:generic . 500) (:end . 500)
            (:define . 500) (:&all-keys . 500) (:&key . 500)
            (:&rest . 500) (:&next . 500) (:false . 500) (:true . 500)
            (<not> . 500) (<unary-operator> . 500) (<literal> . 500)
            (<keyword> . 500) (<implies> . 500) (<ellipsis> . 500)
            (<var-type-sep> . 500) (<dot> . 500)
            (<escaped-substitution> . 500) (<string> . 500)
            (<query> . 500) (<query-equal> . 500) (<query-query> . 500)
            (<syntax-open> . 500) (<vector-open> . 500)
            (<list-open> . 500) (<lcbracket> . 500) (<lsbracket> . 500)
            (<lbracket> . 500) (<rcbracket> . 500) (<rbracket> . 500)
            (<rsbracket> . 500))
           ((:parsed-literal . 525) (:parsed-case-body . 525)
            (:parsed-body . 525) (:parsed-expression . 525)
            (:parsed-variable . 525) (<minus> . 525) (<becomes> . 525)
            (<var-singleton-sep> . 525) (<binds> . 525)
            (<binary-operator> . 525) (<var-sep> . 525)
            (<statement-sep> . 525) (:parsed-name . 525)
            (<seal-word> . 525)
            (<generic-function-defining-word> . 525)
            (<method-defining-word> . 525)
            (<simple-intermediate-word> . 525)
            (<expr-intermediate-word> . 525)
            (<details-intermediate-word> . 525)
            (<simple-begin-word> . 525) (<expr-begin-word> . 525)
            (<details-begin-word> . 525)
            (<fragment-local-declaration-word> . 525)
            (<fragment-function-word> . 525)
            (<fragment-define-bindings-and-begin-word> . 525)
            (<fragment-define-bindings-word> . 525)
            (<fragment-define-and-begin-word> . 525)
            (<fragment-define-word> . 525)
            (<fragment-begin-word> . 525) (<defining-word> . 525)
            (<symbol> . 525) (:otherwise . 525) (:macro . 525)
            (:method . 525) (:local . 525) (:let . 525)
            (:handler . 525) (:generic . 525) (:end . 525)
            (:define . 525) (:&all-keys . 525) (:&key . 525)
            (:&rest . 525) (:&next . 525) (:false . 525) (:true . 525)
            (<not> . 525) (<unary-operator> . 525) (<literal> . 525)
            (<keyword> . 525) (<implies> . 525) (<ellipsis> . 525)
            (<var-type-sep> . 525) (<dot> . 525)
            (<escaped-substitution> . 525) (<string> . 525)
            (<query> . 525) (<query-equal> . 525) (<query-query> . 525)
            (<syntax-open> . 525) (<vector-open> . 525)
            (<list-open> . 525) (<lcbracket> . 525) (<lsbracket> . 525)
            (<lbracket> . 525) (<rcbracket> . 525) (<rbracket> . 525)
            (<rsbracket> . 525))
           ((:parsed-literal . 535) (:parsed-case-body . 535)
            (:parsed-body . 535) (:parsed-expression . 535)
            (:parsed-variable . 535) (<minus> . 535) (<becomes> . 535)
            (<var-singleton-sep> . 535) (<binds> . 535)
            (<binary-operator> . 535) (<var-sep> . 535)
            (<statement-sep> . 535) (:parsed-name . 535)
            (<seal-word> . 535)
            (<generic-function-defining-word> . 535)
            (<method-defining-word> . 535)
            (<simple-intermediate-word> . 535)
            (<expr-intermediate-word> . 535)
            (<details-intermediate-word> . 535)
            (<simple-begin-word> . 535) (<expr-begin-word> . 535)
            (<details-begin-word> . 535)
            (<fragment-local-declaration-word> . 535)
            (<fragment-function-word> . 535)
            (<fragment-define-bindings-and-begin-word> . 535)
            (<fragment-define-bindings-word> . 535)
            (<fragment-define-and-begin-word> . 535)
            (<fragment-define-word> . 535)
            (<fragment-begin-word> . 535) (<defining-word> . 535)
            (<symbol> . 535) (:otherwise . 535) (:macro . 535)
            (:method . 535) (:local . 535) (:let . 535)
            (:handler . 535) (:generic . 535) (:end . 535)
            (:define . 535) (:&all-keys . 535) (:&key . 535)
            (:&rest . 535) (:&next . 535) (:false . 535) (:true . 535)
            (<not> . 535) (<unary-operator> . 535) (<literal> . 535)
            (<keyword> . 535) (<implies> . 535) (<ellipsis> . 535)
            (<var-type-sep> . 535) (<dot> . 535)
            (<escaped-substitution> . 535) (<string> . 535)
            (<query> . 535) (<query-equal> . 535) (<query-query> . 535)
            (<syntax-open> . 535) (<vector-open> . 535)
            (<list-open> . 535) (<lcbracket> . 535) (<lsbracket> . 535)
            (<lbracket> . 535) (<rcbracket> . 535) (<rbracket> . 535)
            (<rsbracket> . 535))
           ((:parsed-literal . 515) (:parsed-case-body . 515)
            (:parsed-body . 515) (:parsed-expression . 515)
            (:parsed-variable . 515) (<minus> . 515) (<becomes> . 515)
            (<var-singleton-sep> . 515) (<binds> . 515)
            (<binary-operator> . 515) (<var-sep> . 515)
            (<statement-sep> . 515) (:parsed-name . 515)
            (<seal-word> . 515)
            (<generic-function-defining-word> . 515)
            (<method-defining-word> . 515)
            (<simple-intermediate-word> . 515)
            (<expr-intermediate-word> . 515)
            (<details-intermediate-word> . 515)
            (<simple-begin-word> . 515) (<expr-begin-word> . 515)
            (<details-begin-word> . 515)
            (<fragment-local-declaration-word> . 515)
            (<fragment-function-word> . 515)
            (<fragment-define-bindings-and-begin-word> . 515)
            (<fragment-define-bindings-word> . 515)
            (<fragment-define-and-begin-word> . 515)
            (<fragment-define-word> . 515)
            (<fragment-begin-word> . 515) (<defining-word> . 515)
            (<symbol> . 515) (:otherwise . 515) (:macro . 515)
            (:method . 515) (:local . 515) (:let . 515)
            (:handler . 515) (:generic . 515) (:end . 515)
            (:define . 515) (:&all-keys . 515) (:&key . 515)
            (:&rest . 515) (:&next . 515) (:false . 515) (:true . 515)
            (<not> . 515) (<unary-operator> . 515) (<literal> . 515)
            (<keyword> . 515) (<implies> . 515) (<ellipsis> . 515)
            (<var-type-sep> . 515) (<dot> . 515)
            (<escaped-substitution> . 515) (<string> . 515)
            (<query> . 515) (<query-equal> . 515) (<query-query> . 515)
            (<syntax-open> . 515) (<vector-open> . 515)
            (<list-open> . 515) (<lcbracket> . 515) (<lsbracket> . 515)
            (<lbracket> . 515) (<rcbracket> . 515) (<rbracket> . 515)
            (<rsbracket> . 515))
           ((:parsed-literal . 517) (:parsed-case-body . 517)
            (:parsed-body . 517) (:parsed-expression . 517)
            (:parsed-variable . 517) (<minus> . 517) (<becomes> . 517)
            (<var-singleton-sep> . 517) (<binds> . 517)
            (<binary-operator> . 517) (<var-sep> . 517)
            (<statement-sep> . 517) (:parsed-name . 517)
            (<seal-word> . 517)
            (<generic-function-defining-word> . 517)
            (<method-defining-word> . 517)
            (<simple-intermediate-word> . 517)
            (<expr-intermediate-word> . 517)
            (<details-intermediate-word> . 517)
            (<simple-begin-word> . 517) (<expr-begin-word> . 517)
            (<details-begin-word> . 517)
            (<fragment-local-declaration-word> . 517)
            (<fragment-function-word> . 517)
            (<fragment-define-bindings-and-begin-word> . 517)
            (<fragment-define-bindings-word> . 517)
            (<fragment-define-and-begin-word> . 517)
            (<fragment-define-word> . 517)
            (<fragment-begin-word> . 517) (<defining-word> . 517)
            (<symbol> . 517) (:otherwise . 517) (:macro . 517)
            (:method . 517) (:local . 517) (:let . 517)
            (:handler . 517) (:generic . 517) (:end . 517)
            (:define . 517) (:&all-keys . 517) (:&key . 517)
            (:&rest . 517) (:&next . 517) (:false . 517) (:true . 517)
            (<not> . 517) (<unary-operator> . 517) (<literal> . 517)
            (<keyword> . 517) (<implies> . 517) (<ellipsis> . 517)
            (<var-type-sep> . 517) (<dot> . 517)
            (<escaped-substitution> . 517) (<string> . 517)
            (<query> . 517) (<query-equal> . 517) (<query-query> . 517)
            (<syntax-open> . 517) (<vector-open> . 517)
            (<list-open> . 517) (<lcbracket> . 517) (<lsbracket> . 517)
            (<lbracket> . 517) (<rcbracket> . 517) (<rbracket> . 517)
            (<rsbracket> . 517))
           ((:end . 437) (<query> . 437) (<ellipsis> . 437)
            (<lbracket> . 437) (<lsbracket> . 437) (<lcbracket> . 437)
            (<symbol> . 437) (<defining-word> . 437)
            (<fragment-define-word> . 437)
            (<fragment-define-bindings-word> . 437)
            (<binary-operator> . 437) (<minus> . 437) (<binds> . 437)
            (<var-singleton-sep> . 437) (<becomes> . 437) (<not> . 437)
            (:parsed-name . 437) (:otherwise . 437) (<implies> . 437)
            (<escaped-hash-word> . 437) (<literal> . 437)
            (<string> . 437) (<keyword> . 437) (:true . 437)
            (:false . 437) (<list-open> . 437) (<vector-open> . 437)
            (:&rest . 437) (:&key . 437) (<rcbracket> . 437)
            (:parsed-literal . 437) (:parsed-case-body . 437)
            (:parsed-body . 437) (:parsed-expression . 437)
            (:parsed-variable . 437) (<var-sep> . 437)
            (<statement-sep> . 437) (<seal-word> . 437)
            (<generic-function-defining-word> . 437)
            (<method-defining-word> . 437)
            (<simple-intermediate-word> . 437)
            (<expr-intermediate-word> . 437)
            (<details-intermediate-word> . 437)
            (<simple-begin-word> . 437) (<expr-begin-word> . 437)
            (<details-begin-word> . 437)
            (<fragment-local-declaration-word> . 437)
            (<fragment-function-word> . 437)
            (<fragment-define-bindings-and-begin-word> . 437)
            (<fragment-define-and-begin-word> . 437)
            (<fragment-begin-word> . 437) (:macro . 437)
            (:method . 437) (:local . 437) (:let . 437)
            (:handler . 437) (:generic . 437) (:define . 437)
            (:&all-keys . 437) (:&next . 437) (<unary-operator> . 437)
            (<var-type-sep> . 437) (<dot> . 437)
            (<escaped-substitution> . 437) (<query-equal> . 437)
            (<query-query> . 437) (<syntax-open> . 437)
            (<rbracket> . 437) (<rsbracket> . 437) (<splice> . 437))
           ((<rcbracket> . 479) (<query> . -153) (<lbracket> . -157)
            (<lsbracket> . -161) (<lcbracket> . -169)
            (<list-open> . -180) (<vector-open> . -188)
            (<syntax-open> . -196) (<query-query> . -212)
            (<query-equal> . -148) (<string> . -197)
            (<escaped-substitution> . -155) (<dot> . -163)
            (<var-type-sep> . -179) (<ellipsis> . -202)
            (<implies> . -171) (<keyword> . -176) (<literal> . -192)
            (<unary-operator> . -208) (<not> . -185) (:true . -143)
            (:false . -149) (:&next . -194) (:&rest . -209)
            (:&key . -142) (:&all-keys . -173) (:define . -166)
            (:end . -199) (:generic . -167) (:handler . -177)
            (:let . -154) (:local . -162) (:method . -159)
            (:macro . -198) (:otherwise . -144)
            (:parsed-variable . -151) (:parsed-expression . -189)
            (:parsed-body . -201) (:parsed-case-body . -147)
            (:parsed-literal . -200) (<statement-sep> . -175)
            (<var-sep> . -183) (<binary-operator> . -178)
            (<binds> . -210) (<var-singleton-sep> . -165)
            (<becomes> . -187) (<minus> . -206) (<symbol> . -168)
            (<defining-word> . -182) (<fragment-begin-word> . -190)
            (<fragment-define-word> . -152)
            (<fragment-define-and-begin-word> . -207)
            (<fragment-define-bindings-word> . -204)
            (<fragment-define-bindings-and-begin-word> . -203)
            (<fragment-function-word> . -213)
            (<fragment-local-declaration-word> . -186)
            (<details-begin-word> . -156) (<expr-begin-word> . -150)
            (<simple-begin-word> . -195)
            (<details-intermediate-word> . -174)
            (<expr-intermediate-word> . -170)
            (<simple-intermediate-word> . -158)
            (<method-defining-word> . -146)
            (<generic-function-defining-word> . -193)
            (<seal-word> . -145) (:parsed-name . -211))
           ((:end . 450) (<query> . 450) (<ellipsis> . 450)
            (<lbracket> . 450) (<lsbracket> . 450) (<lcbracket> . 450)
            (<symbol> . 450) (<defining-word> . 450)
            (<fragment-define-word> . 450)
            (<fragment-define-bindings-word> . 450)
            (<binary-operator> . 450) (<minus> . 450) (<binds> . 450)
            (<var-singleton-sep> . 450) (<becomes> . 450) (<not> . 450)
            (:parsed-name . 450) (:otherwise . 450) (<implies> . 450)
            (<escaped-hash-word> . 450) (<literal> . 450)
            (<string> . 450) (<keyword> . 450) (:true . 450)
            (:false . 450) (<list-open> . 450) (<vector-open> . 450)
            (:&rest . 450) (:&key . 450) (<rcbracket> . 450)
            (:parsed-literal . 450) (:parsed-case-body . 450)
            (:parsed-body . 450) (:parsed-expression . 450)
            (:parsed-variable . 450) (<var-sep> . 450)
            (<statement-sep> . 450) (<seal-word> . 450)
            (<generic-function-defining-word> . 450)
            (<method-defining-word> . 450)
            (<simple-intermediate-word> . 450)
            (<expr-intermediate-word> . 450)
            (<details-intermediate-word> . 450)
            (<simple-begin-word> . 450) (<expr-begin-word> . 450)
            (<details-begin-word> . 450)
            (<fragment-local-declaration-word> . 450)
            (<fragment-function-word> . 450)
            (<fragment-define-bindings-and-begin-word> . 450)
            (<fragment-define-and-begin-word> . 450)
            (<fragment-begin-word> . 450) (:macro . 450)
            (:method . 450) (:local . 450) (:let . 450)
            (:handler . 450) (:generic . 450) (:define . 450)
            (:&all-keys . 450) (:&next . 450) (<unary-operator> . 450)
            (<var-type-sep> . 450) (<dot> . 450)
            (<escaped-substitution> . 450) (<query-equal> . 450)
            (<query-query> . 450) (<syntax-open> . 450)
            (<rbracket> . 450) (<rsbracket> . 450) (<splice> . 450))
           ((:parsed-literal . 503) (:parsed-case-body . 503)
            (:parsed-body . 503) (:parsed-expression . 503)
            (:parsed-variable . 503) (<minus> . 503) (<becomes> . 503)
            (<var-singleton-sep> . 503) (<binds> . 503)
            (<binary-operator> . 503) (<var-sep> . 503)
            (<statement-sep> . 503) (:parsed-name . 503)
            (<seal-word> . 503)
            (<generic-function-defining-word> . 503)
            (<method-defining-word> . 503)
            (<simple-intermediate-word> . 503)
            (<expr-intermediate-word> . 503)
            (<details-intermediate-word> . 503)
            (<simple-begin-word> . 503) (<expr-begin-word> . 503)
            (<details-begin-word> . 503)
            (<fragment-local-declaration-word> . 503)
            (<fragment-function-word> . 503)
            (<fragment-define-bindings-and-begin-word> . 503)
            (<fragment-define-bindings-word> . 503)
            (<fragment-define-and-begin-word> . 503)
            (<fragment-define-word> . 503)
            (<fragment-begin-word> . 503) (<defining-word> . 503)
            (<symbol> . 503) (:otherwise . 503) (:macro . 503)
            (:method . 503) (:local . 503) (:let . 503)
            (:handler . 503) (:generic . 503) (:end . 503)
            (:define . 503) (:&all-keys . 503) (:&key . 503)
            (:&rest . 503) (:&next . 503) (:false . 503) (:true . 503)
            (<not> . 503) (<unary-operator> . 503) (<literal> . 503)
            (<keyword> . 503) (<implies> . 503) (<ellipsis> . 503)
            (<var-type-sep> . 503) (<dot> . 503)
            (<escaped-substitution> . 503) (<string> . 503)
            (<query> . 503) (<query-equal> . 503) (<query-query> . 503)
            (<syntax-open> . 503) (<vector-open> . 503)
            (<list-open> . 503) (<lcbracket> . 503) (<lsbracket> . 503)
            (<lbracket> . 503) (<rcbracket> . 503) (<rbracket> . 503)
            (<rsbracket> . 503))
           ((:parsed-literal . 524) (:parsed-case-body . 524)
            (:parsed-body . 524) (:parsed-expression . 524)
            (:parsed-variable . 524) (<minus> . 524) (<becomes> . 524)
            (<var-singleton-sep> . 524) (<binds> . 524)
            (<binary-operator> . 524) (<var-sep> . 524)
            (<statement-sep> . 524) (:parsed-name . 524)
            (<seal-word> . 524)
            (<generic-function-defining-word> . 524)
            (<method-defining-word> . 524)
            (<simple-intermediate-word> . 524)
            (<expr-intermediate-word> . 524)
            (<details-intermediate-word> . 524)
            (<simple-begin-word> . 524) (<expr-begin-word> . 524)
            (<details-begin-word> . 524)
            (<fragment-local-declaration-word> . 524)
            (<fragment-function-word> . 524)
            (<fragment-define-bindings-and-begin-word> . 524)
            (<fragment-define-bindings-word> . 524)
            (<fragment-define-and-begin-word> . 524)
            (<fragment-define-word> . 524)
            (<fragment-begin-word> . 524) (<defining-word> . 524)
            (<symbol> . 524) (:otherwise . 524) (:macro . 524)
            (:method . 524) (:local . 524) (:let . 524)
            (:handler . 524) (:generic . 524) (:end . 524)
            (:define . 524) (:&all-keys . 524) (:&key . 524)
            (:&rest . 524) (:&next . 524) (:false . 524) (:true . 524)
            (<not> . 524) (<unary-operator> . 524) (<literal> . 524)
            (<keyword> . 524) (<implies> . 524) (<ellipsis> . 524)
            (<var-type-sep> . 524) (<dot> . 524)
            (<escaped-substitution> . 524) (<string> . 524)
            (<query> . 524) (<query-equal> . 524) (<query-query> . 524)
            (<syntax-open> . 524) (<vector-open> . 524)
            (<list-open> . 524) (<lcbracket> . 524) (<lsbracket> . 524)
            (<lbracket> . 524) (<rcbracket> . 524) (<rbracket> . 524)
            (<rsbracket> . 524))
           ((:parsed-literal . 514) (:parsed-case-body . 514)
            (:parsed-body . 514) (:parsed-expression . 514)
            (:parsed-variable . 514) (<minus> . 514) (<becomes> . 514)
            (<var-singleton-sep> . 514) (<binds> . 514)
            (<binary-operator> . 514) (<var-sep> . 514)
            (<statement-sep> . 514) (:parsed-name . 514)
            (<seal-word> . 514)
            (<generic-function-defining-word> . 514)
            (<method-defining-word> . 514)
            (<simple-intermediate-word> . 514)
            (<expr-intermediate-word> . 514)
            (<details-intermediate-word> . 514)
            (<simple-begin-word> . 514) (<expr-begin-word> . 514)
            (<details-begin-word> . 514)
            (<fragment-local-declaration-word> . 514)
            (<fragment-function-word> . 514)
            (<fragment-define-bindings-and-begin-word> . 514)
            (<fragment-define-bindings-word> . 514)
            (<fragment-define-and-begin-word> . 514)
            (<fragment-define-word> . 514)
            (<fragment-begin-word> . 514) (<defining-word> . 514)
            (<symbol> . 514) (:otherwise . 514) (:macro . 514)
            (:method . 514) (:local . 514) (:let . 514)
            (:handler . 514) (:generic . 514) (:end . 514)
            (:define . 514) (:&all-keys . 514) (:&key . 514)
            (:&rest . 514) (:&next . 514) (:false . 514) (:true . 514)
            (<not> . 514) (<unary-operator> . 514) (<literal> . 514)
            (<keyword> . 514) (<implies> . 514) (<ellipsis> . 514)
            (<var-type-sep> . 514) (<dot> . 514)
            (<escaped-substitution> . 514) (<string> . 514)
            (<query> . 514) (<query-equal> . 514) (<query-query> . 514)
            (<syntax-open> . 514) (<vector-open> . 514)
            (<list-open> . 514) (<lcbracket> . 514) (<lsbracket> . 514)
            (<lbracket> . 514) (<rcbracket> . 514) (<rbracket> . 514)
            (<rsbracket> . 514))
           ((:end . 449) (<query> . 449) (<ellipsis> . 449)
            (<lbracket> . 449) (<lsbracket> . 449) (<lcbracket> . 449)
            (<symbol> . 449) (<defining-word> . 449)
            (<fragment-define-word> . 449)
            (<fragment-define-bindings-word> . 449)
            (<binary-operator> . 449) (<minus> . 449) (<binds> . 449)
            (<var-singleton-sep> . 449) (<becomes> . 449) (<not> . 449)
            (:parsed-name . 449) (:otherwise . 449) (<implies> . 449)
            (<escaped-hash-word> . 449) (<literal> . 449)
            (<string> . 449) (<keyword> . 449) (:true . 449)
            (:false . 449) (<list-open> . 449) (<vector-open> . 449)
            (:&rest . 449) (:&key . 449) (<rcbracket> . 449)
            (:parsed-literal . 449) (:parsed-case-body . 449)
            (:parsed-body . 449) (:parsed-expression . 449)
            (:parsed-variable . 449) (<var-sep> . 449)
            (<statement-sep> . 449) (<seal-word> . 449)
            (<generic-function-defining-word> . 449)
            (<method-defining-word> . 449)
            (<simple-intermediate-word> . 449)
            (<expr-intermediate-word> . 449)
            (<details-intermediate-word> . 449)
            (<simple-begin-word> . 449) (<expr-begin-word> . 449)
            (<details-begin-word> . 449)
            (<fragment-local-declaration-word> . 449)
            (<fragment-function-word> . 449)
            (<fragment-define-bindings-and-begin-word> . 449)
            (<fragment-define-and-begin-word> . 449)
            (<fragment-begin-word> . 449) (:macro . 449)
            (:method . 449) (:local . 449) (:let . 449)
            (:handler . 449) (:generic . 449) (:define . 449)
            (:&all-keys . 449) (:&next . 449) (<unary-operator> . 449)
            (<var-type-sep> . 449) (<dot> . 449)
            (<escaped-substitution> . 449) (<query-equal> . 449)
            (<query-query> . 449) (<syntax-open> . 449)
            (<rbracket> . 449) (<rsbracket> . 449) (<splice> . 449))
           ((:parsed-literal . 531) (:parsed-case-body . 531)
            (:parsed-body . 531) (:parsed-expression . 531)
            (:parsed-variable . 531) (<minus> . 531) (<becomes> . 531)
            (<var-singleton-sep> . 531) (<binds> . 531)
            (<binary-operator> . 531) (<var-sep> . 531)
            (<statement-sep> . 531) (:parsed-name . 531)
            (<seal-word> . 531)
            (<generic-function-defining-word> . 531)
            (<method-defining-word> . 531)
            (<simple-intermediate-word> . 531)
            (<expr-intermediate-word> . 531)
            (<details-intermediate-word> . 531)
            (<simple-begin-word> . 531) (<expr-begin-word> . 531)
            (<details-begin-word> . 531)
            (<fragment-local-declaration-word> . 531)
            (<fragment-function-word> . 531)
            (<fragment-define-bindings-and-begin-word> . 531)
            (<fragment-define-bindings-word> . 531)
            (<fragment-define-and-begin-word> . 531)
            (<fragment-define-word> . 531)
            (<fragment-begin-word> . 531) (<defining-word> . 531)
            (<symbol> . 531) (:otherwise . 531) (:macro . 531)
            (:method . 531) (:local . 531) (:let . 531)
            (:handler . 531) (:generic . 531) (:end . 531)
            (:define . 531) (:&all-keys . 531) (:&key . 531)
            (:&rest . 531) (:&next . 531) (:false . 531) (:true . 531)
            (<not> . 531) (<unary-operator> . 531) (<literal> . 531)
            (<keyword> . 531) (<implies> . 531) (<ellipsis> . 531)
            (<var-type-sep> . 531) (<dot> . 531)
            (<escaped-substitution> . 531) (<string> . 531)
            (<query> . 531) (<query-equal> . 531) (<query-query> . 531)
            (<syntax-open> . 531) (<vector-open> . 531)
            (<list-open> . 531) (<lcbracket> . 531) (<lsbracket> . 531)
            (<lbracket> . 531) (<rcbracket> . 531) (<rbracket> . 531)
            (<rsbracket> . 531))
           ((:parsed-literal . 504) (:parsed-case-body . 504)
            (:parsed-body . 504) (:parsed-expression . 504)
            (:parsed-variable . 504) (<minus> . 504) (<becomes> . 504)
            (<var-singleton-sep> . 504) (<binds> . 504)
            (<binary-operator> . 504) (<var-sep> . 504)
            (<statement-sep> . 504) (:parsed-name . 504)
            (<seal-word> . 504)
            (<generic-function-defining-word> . 504)
            (<method-defining-word> . 504)
            (<simple-intermediate-word> . 504)
            (<expr-intermediate-word> . 504)
            (<details-intermediate-word> . 504)
            (<simple-begin-word> . 504) (<expr-begin-word> . 504)
            (<details-begin-word> . 504)
            (<fragment-local-declaration-word> . 504)
            (<fragment-function-word> . 504)
            (<fragment-define-bindings-and-begin-word> . 504)
            (<fragment-define-bindings-word> . 504)
            (<fragment-define-and-begin-word> . 504)
            (<fragment-define-word> . 504)
            (<fragment-begin-word> . 504) (<defining-word> . 504)
            (<symbol> . 504) (:otherwise . 504) (:macro . 504)
            (:method . 504) (:local . 504) (:let . 504)
            (:handler . 504) (:generic . 504) (:end . 504)
            (:define . 504) (:&all-keys . 504) (:&key . 504)
            (:&rest . 504) (:&next . 504) (:false . 504) (:true . 504)
            (<not> . 504) (<unary-operator> . 504) (<literal> . 504)
            (<keyword> . 504) (<implies> . 504) (<ellipsis> . 504)
            (<var-type-sep> . 504) (<dot> . 504)
            (<escaped-substitution> . 504) (<string> . 504)
            (<query> . 504) (<query-equal> . 504) (<query-query> . 504)
            (<syntax-open> . 504) (<vector-open> . 504)
            (<list-open> . 504) (<lcbracket> . 504) (<lsbracket> . 504)
            (<lbracket> . 504) (<rcbracket> . 504) (<rbracket> . 504)
            (<rsbracket> . 504))
           ((:parsed-literal . 518) (:parsed-case-body . 518)
            (:parsed-body . 518) (:parsed-expression . 518)
            (:parsed-variable . 518) (<minus> . 518) (<becomes> . 518)
            (<var-singleton-sep> . 518) (<binds> . 518)
            (<binary-operator> . 518) (<var-sep> . 518)
            (<statement-sep> . 518) (:parsed-name . 518)
            (<seal-word> . 518)
            (<generic-function-defining-word> . 518)
            (<method-defining-word> . 518)
            (<simple-intermediate-word> . 518)
            (<expr-intermediate-word> . 518)
            (<details-intermediate-word> . 518)
            (<simple-begin-word> . 518) (<expr-begin-word> . 518)
            (<details-begin-word> . 518)
            (<fragment-local-declaration-word> . 518)
            (<fragment-function-word> . 518)
            (<fragment-define-bindings-and-begin-word> . 518)
            (<fragment-define-bindings-word> . 518)
            (<fragment-define-and-begin-word> . 518)
            (<fragment-define-word> . 518)
            (<fragment-begin-word> . 518) (<defining-word> . 518)
            (<symbol> . 518) (:otherwise . 518) (:macro . 518)
            (:method . 518) (:local . 518) (:let . 518)
            (:handler . 518) (:generic . 518) (:end . 518)
            (:define . 518) (:&all-keys . 518) (:&key . 518)
            (:&rest . 518) (:&next . 518) (:false . 518) (:true . 518)
            (<not> . 518) (<unary-operator> . 518) (<literal> . 518)
            (<keyword> . 518) (<implies> . 518) (<ellipsis> . 518)
            (<var-type-sep> . 518) (<dot> . 518)
            (<escaped-substitution> . 518) (<string> . 518)
            (<query> . 518) (<query-equal> . 518) (<query-query> . 518)
            (<syntax-open> . 518) (<vector-open> . 518)
            (<list-open> . 518) (<lcbracket> . 518) (<lsbracket> . 518)
            (<lbracket> . 518) (<rcbracket> . 518) (<rbracket> . 518)
            (<rsbracket> . 518))
           ((:parsed-literal . 533) (:parsed-case-body . 533)
            (:parsed-body . 533) (:parsed-expression . 533)
            (:parsed-variable . 533) (<minus> . 533) (<becomes> . 533)
            (<var-singleton-sep> . 533) (<binds> . 533)
            (<binary-operator> . 533) (<var-sep> . 533)
            (<statement-sep> . 533) (:parsed-name . 533)
            (<seal-word> . 533)
            (<generic-function-defining-word> . 533)
            (<method-defining-word> . 533)
            (<simple-intermediate-word> . 533)
            (<expr-intermediate-word> . 533)
            (<details-intermediate-word> . 533)
            (<simple-begin-word> . 533) (<expr-begin-word> . 533)
            (<details-begin-word> . 533)
            (<fragment-local-declaration-word> . 533)
            (<fragment-function-word> . 533)
            (<fragment-define-bindings-and-begin-word> . 533)
            (<fragment-define-bindings-word> . 533)
            (<fragment-define-and-begin-word> . 533)
            (<fragment-define-word> . 533)
            (<fragment-begin-word> . 533) (<defining-word> . 533)
            (<symbol> . 533) (:otherwise . 533) (:macro . 533)
            (:method . 533) (:local . 533) (:let . 533)
            (:handler . 533) (:generic . 533) (:end . 533)
            (:define . 533) (:&all-keys . 533) (:&key . 533)
            (:&rest . 533) (:&next . 533) (:false . 533) (:true . 533)
            (<not> . 533) (<unary-operator> . 533) (<literal> . 533)
            (<keyword> . 533) (<implies> . 533) (<ellipsis> . 533)
            (<var-type-sep> . 533) (<dot> . 533)
            (<escaped-substitution> . 533) (<string> . 533)
            (<query> . 533) (<query-equal> . 533) (<query-query> . 533)
            (<syntax-open> . 533) (<vector-open> . 533)
            (<list-open> . 533) (<lcbracket> . 533) (<lsbracket> . 533)
            (<lbracket> . 533) (<rcbracket> . 533) (<rbracket> . 533)
            (<rsbracket> . 533))
           ((:parsed-literal . 501) (:parsed-case-body . 501)
            (:parsed-body . 501) (:parsed-expression . 501)
            (:parsed-variable . 501) (<minus> . 501) (<becomes> . 501)
            (<var-singleton-sep> . 501) (<binds> . 501)
            (<binary-operator> . 501) (<var-sep> . 501)
            (<statement-sep> . 501) (:parsed-name . 501)
            (<seal-word> . 501)
            (<generic-function-defining-word> . 501)
            (<method-defining-word> . 501)
            (<simple-intermediate-word> . 501)
            (<expr-intermediate-word> . 501)
            (<details-intermediate-word> . 501)
            (<simple-begin-word> . 501) (<expr-begin-word> . 501)
            (<details-begin-word> . 501)
            (<fragment-local-declaration-word> . 501)
            (<fragment-function-word> . 501)
            (<fragment-define-bindings-and-begin-word> . 501)
            (<fragment-define-bindings-word> . 501)
            (<fragment-define-and-begin-word> . 501)
            (<fragment-define-word> . 501)
            (<fragment-begin-word> . 501) (<defining-word> . 501)
            (<symbol> . 501) (:otherwise . 501) (:macro . 501)
            (:method . 501) (:local . 501) (:let . 501)
            (:handler . 501) (:generic . 501) (:end . 501)
            (:define . 501) (:&all-keys . 501) (:&key . 501)
            (:&rest . 501) (:&next . 501) (:false . 501) (:true . 501)
            (<not> . 501) (<unary-operator> . 501) (<literal> . 501)
            (<keyword> . 501) (<implies> . 501) (<ellipsis> . 501)
            (<var-type-sep> . 501) (<dot> . 501)
            (<escaped-substitution> . 501) (<string> . 501)
            (<query> . 501) (<query-equal> . 501) (<query-query> . 501)
            (<syntax-open> . 501) (<vector-open> . 501)
            (<list-open> . 501) (<lcbracket> . 501) (<lsbracket> . 501)
            (<lbracket> . 501) (<rcbracket> . 501) (<rbracket> . 501)
            (<rsbracket> . 501))
           ((<rbracket> . 479) (<query> . -153) (<lbracket> . -157)
            (<lsbracket> . -161) (<lcbracket> . -169)
            (<list-open> . -180) (<vector-open> . -188)
            (<syntax-open> . -196) (<query-query> . -212)
            (<query-equal> . -148) (<string> . -197)
            (<escaped-substitution> . -155) (<dot> . -163)
            (<var-type-sep> . -179) (<ellipsis> . -202)
            (<implies> . -171) (<keyword> . -176) (<literal> . -192)
            (<unary-operator> . -208) (<not> . -185) (:true . -143)
            (:false . -149) (:&next . -194) (:&rest . -209)
            (:&key . -142) (:&all-keys . -173) (:define . -166)
            (:end . -199) (:generic . -167) (:handler . -177)
            (:let . -154) (:local . -162) (:method . -159)
            (:macro . -198) (:otherwise . -144)
            (:parsed-variable . -151) (:parsed-expression . -189)
            (:parsed-body . -201) (:parsed-case-body . -147)
            (:parsed-literal . -200) (<statement-sep> . -175)
            (<var-sep> . -183) (<binary-operator> . -178)
            (<binds> . -210) (<var-singleton-sep> . -165)
            (<becomes> . -187) (<minus> . -206) (<symbol> . -168)
            (<defining-word> . -182) (<fragment-begin-word> . -190)
            (<fragment-define-word> . -152)
            (<fragment-define-and-begin-word> . -207)
            (<fragment-define-bindings-word> . -204)
            (<fragment-define-bindings-and-begin-word> . -203)
            (<fragment-function-word> . -213)
            (<fragment-local-declaration-word> . -186)
            (<details-begin-word> . -156) (<expr-begin-word> . -150)
            (<simple-begin-word> . -195)
            (<details-intermediate-word> . -174)
            (<expr-intermediate-word> . -170)
            (<simple-intermediate-word> . -158)
            (<method-defining-word> . -146)
            (<generic-function-defining-word> . -193)
            (<seal-word> . -145) (:parsed-name . -211))
           ((<rcbracket> . 477))
           ((:end . 438) (<query> . 438) (<ellipsis> . 438)
            (<lbracket> . 438) (<lsbracket> . 438) (<lcbracket> . 438)
            (<symbol> . 438) (<defining-word> . 438)
            (<fragment-define-word> . 438)
            (<fragment-define-bindings-word> . 438)
            (<binary-operator> . 438) (<minus> . 438) (<binds> . 438)
            (<var-singleton-sep> . 438) (<becomes> . 438) (<not> . 438)
            (:parsed-name . 438) (:otherwise . 438) (<implies> . 438)
            (<escaped-hash-word> . 438) (<literal> . 438)
            (<string> . 438) (<keyword> . 438) (:true . 438)
            (:false . 438) (<list-open> . 438) (<vector-open> . 438)
            (:&rest . 438) (:&key . 438) (<rcbracket> . 438)
            (:parsed-literal . 438) (:parsed-case-body . 438)
            (:parsed-body . 438) (:parsed-expression . 438)
            (:parsed-variable . 438) (<var-sep> . 438)
            (<statement-sep> . 438) (<seal-word> . 438)
            (<generic-function-defining-word> . 438)
            (<method-defining-word> . 438)
            (<simple-intermediate-word> . 438)
            (<expr-intermediate-word> . 438)
            (<details-intermediate-word> . 438)
            (<simple-begin-word> . 438) (<expr-begin-word> . 438)
            (<details-begin-word> . 438)
            (<fragment-local-declaration-word> . 438)
            (<fragment-function-word> . 438)
            (<fragment-define-bindings-and-begin-word> . 438)
            (<fragment-define-and-begin-word> . 438)
            (<fragment-begin-word> . 438) (:macro . 438)
            (:method . 438) (:local . 438) (:let . 438)
            (:handler . 438) (:generic . 438) (:define . 438)
            (:&all-keys . 438) (:&next . 438) (<unary-operator> . 438)
            (<var-type-sep> . 438) (<dot> . 438)
            (<escaped-substitution> . 438) (<query-equal> . 438)
            (<query-query> . 438) (<syntax-open> . 438)
            (<rbracket> . 438) (<rsbracket> . 438) (<splice> . 438))
           ((:parsed-literal . 532) (:parsed-case-body . 532)
            (:parsed-body . 532) (:parsed-expression . 532)
            (:parsed-variable . 532) (<minus> . 532) (<becomes> . 532)
            (<var-singleton-sep> . 532) (<binds> . 532)
            (<binary-operator> . 532) (<var-sep> . 532)
            (<statement-sep> . 532) (:parsed-name . 532)
            (<seal-word> . 532)
            (<generic-function-defining-word> . 532)
            (<method-defining-word> . 532)
            (<simple-intermediate-word> . 532)
            (<expr-intermediate-word> . 532)
            (<details-intermediate-word> . 532)
            (<simple-begin-word> . 532) (<expr-begin-word> . 532)
            (<details-begin-word> . 532)
            (<fragment-local-declaration-word> . 532)
            (<fragment-function-word> . 532)
            (<fragment-define-bindings-and-begin-word> . 532)
            (<fragment-define-bindings-word> . 532)
            (<fragment-define-and-begin-word> . 532)
            (<fragment-define-word> . 532)
            (<fragment-begin-word> . 532) (<defining-word> . 532)
            (<symbol> . 532) (:otherwise . 532) (:macro . 532)
            (:method . 532) (:local . 532) (:let . 532)
            (:handler . 532) (:generic . 532) (:end . 532)
            (:define . 532) (:&all-keys . 532) (:&key . 532)
            (:&rest . 532) (:&next . 532) (:false . 532) (:true . 532)
            (<not> . 532) (<unary-operator> . 532) (<literal> . 532)
            (<keyword> . 532) (<implies> . 532) (<ellipsis> . 532)
            (<var-type-sep> . 532) (<dot> . 532)
            (<escaped-substitution> . 532) (<string> . 532)
            (<query> . 532) (<query-equal> . 532) (<query-query> . 532)
            (<syntax-open> . 532) (<vector-open> . 532)
            (<list-open> . 532) (<lcbracket> . 532) (<lsbracket> . 532)
            (<lbracket> . 532) (<rcbracket> . 532) (<rbracket> . 532)
            (<rsbracket> . 532))
           ((<lbracket> . -157) (<lsbracket> . -161)
            (<lcbracket> . -169) (<list-open> . -180)
            (<vector-open> . -188) (<syntax-open> . -196)
            (<query-query> . -212) (<query-equal> . -148)
            (<string> . -197) (<query> . -153)
            (<escaped-substitution> . -155) (<dot> . -163)
            (<var-type-sep> . -179) (<ellipsis> . -202)
            (<implies> . -171) (<keyword> . -176) (<literal> . -192)
            (<unary-operator> . -208) (<not> . -185) (:true . -143)
            (:false . -149) (:&next . -194) (:&rest . -209)
            (:&key . -142) (:&all-keys . -173) (:define . -166)
            (:end . -199) (:generic . -167) (:handler . -177)
            (:let . -154) (:local . -162) (:method . -159)
            (:macro . -198) (:otherwise . -144)
            (:parsed-variable . -151) (:parsed-expression . -189)
            (:parsed-body . -201) (:parsed-case-body . -147)
            (:parsed-literal . -200) (<statement-sep> . -175)
            (<var-sep> . -183) (<binary-operator> . -178)
            (<binds> . -210) (<var-singleton-sep> . -165)
            (<becomes> . -187) (<minus> . -206) (<symbol> . -168)
            (<defining-word> . -182) (<fragment-begin-word> . -190)
            (<fragment-define-word> . -152)
            (<fragment-define-and-begin-word> . -207)
            (<fragment-define-bindings-word> . -204)
            (<fragment-define-bindings-and-begin-word> . -203)
            (<fragment-function-word> . -213)
            (<fragment-local-declaration-word> . -186)
            (<details-begin-word> . -156) (<expr-begin-word> . -150)
            (<simple-begin-word> . -195)
            (<details-intermediate-word> . -174)
            (<expr-intermediate-word> . -170)
            (<simple-intermediate-word> . -158)
            (<method-defining-word> . -146)
            (<generic-function-defining-word> . -193)
            (<seal-word> . -145) (:parsed-name . -211)
            (<rcbracket> . 478))
           ((:parsed-literal . 508) (:parsed-case-body . 508)
            (:parsed-body . 508) (:parsed-expression . 508)
            (:parsed-variable . 508) (<minus> . 508) (<becomes> . 508)
            (<var-singleton-sep> . 508) (<binds> . 508)
            (<binary-operator> . 508) (<var-sep> . 508)
            (<statement-sep> . 508) (:parsed-name . 508)
            (<seal-word> . 508)
            (<generic-function-defining-word> . 508)
            (<method-defining-word> . 508)
            (<simple-intermediate-word> . 508)
            (<expr-intermediate-word> . 508)
            (<details-intermediate-word> . 508)
            (<simple-begin-word> . 508) (<expr-begin-word> . 508)
            (<details-begin-word> . 508)
            (<fragment-local-declaration-word> . 508)
            (<fragment-function-word> . 508)
            (<fragment-define-bindings-and-begin-word> . 508)
            (<fragment-define-bindings-word> . 508)
            (<fragment-define-and-begin-word> . 508)
            (<fragment-define-word> . 508)
            (<fragment-begin-word> . 508) (<defining-word> . 508)
            (<symbol> . 508) (:otherwise . 508) (:macro . 508)
            (:method . 508) (:local . 508) (:let . 508)
            (:handler . 508) (:generic . 508) (:end . 508)
            (:define . 508) (:&all-keys . 508) (:&key . 508)
            (:&rest . 508) (:&next . 508) (:false . 508) (:true . 508)
            (<not> . 508) (<unary-operator> . 508) (<literal> . 508)
            (<keyword> . 508) (<implies> . 508) (<ellipsis> . 508)
            (<var-type-sep> . 508) (<dot> . 508)
            (<escaped-substitution> . 508) (<string> . 508)
            (<query> . 508) (<query-equal> . 508) (<query-query> . 508)
            (<syntax-open> . 508) (<vector-open> . 508)
            (<list-open> . 508) (<lcbracket> . 508) (<lsbracket> . 508)
            (<lbracket> . 508) (<rcbracket> . 508) (<rbracket> . 508)
            (<rsbracket> . 508))
           ((:end . 445) (<query> . 445) (<ellipsis> . 445)
            (<lbracket> . 445) (<lsbracket> . 445) (<lcbracket> . 445)
            (<symbol> . 445) (<defining-word> . 445)
            (<fragment-define-word> . 445)
            (<fragment-define-bindings-word> . 445)
            (<binary-operator> . 445) (<minus> . 445) (<binds> . 445)
            (<var-singleton-sep> . 445) (<becomes> . 445) (<not> . 445)
            (:parsed-name . 445) (:otherwise . 445) (<implies> . 445)
            (<escaped-hash-word> . 445) (<literal> . 445)
            (<string> . 445) (<keyword> . 445) (:true . 445)
            (:false . 445) (<list-open> . 445) (<vector-open> . 445)
            (:&rest . 445) (:&key . 445) (<rcbracket> . 445)
            (:parsed-literal . 445) (:parsed-case-body . 445)
            (:parsed-body . 445) (:parsed-expression . 445)
            (:parsed-variable . 445) (<var-sep> . 445)
            (<statement-sep> . 445) (<seal-word> . 445)
            (<generic-function-defining-word> . 445)
            (<method-defining-word> . 445)
            (<simple-intermediate-word> . 445)
            (<expr-intermediate-word> . 445)
            (<details-intermediate-word> . 445)
            (<simple-begin-word> . 445) (<expr-begin-word> . 445)
            (<details-begin-word> . 445)
            (<fragment-local-declaration-word> . 445)
            (<fragment-function-word> . 445)
            (<fragment-define-bindings-and-begin-word> . 445)
            (<fragment-define-and-begin-word> . 445)
            (<fragment-begin-word> . 445) (:macro . 445)
            (:method . 445) (:local . 445) (:let . 445)
            (:handler . 445) (:generic . 445) (:define . 445)
            (:&all-keys . 445) (:&next . 445) (<unary-operator> . 445)
            (<var-type-sep> . 445) (<dot> . 445)
            (<escaped-substitution> . 445) (<query-equal> . 445)
            (<query-query> . 445) (<syntax-open> . 445)
            (<rbracket> . 445) (<rsbracket> . 445) (<splice> . 445))
           ((:parsed-literal . 536) (:parsed-case-body . 536)
            (:parsed-body . 536) (:parsed-expression . 536)
            (:parsed-variable . 536) (<minus> . 536) (<becomes> . 536)
            (<var-singleton-sep> . 536) (<binds> . 536)
            (<binary-operator> . 536) (<var-sep> . 536)
            (<statement-sep> . 536) (:parsed-name . 536)
            (<seal-word> . 536)
            (<generic-function-defining-word> . 536)
            (<method-defining-word> . 536)
            (<simple-intermediate-word> . 536)
            (<expr-intermediate-word> . 536)
            (<details-intermediate-word> . 536)
            (<simple-begin-word> . 536) (<expr-begin-word> . 536)
            (<details-begin-word> . 536)
            (<fragment-local-declaration-word> . 536)
            (<fragment-function-word> . 536)
            (<fragment-define-bindings-and-begin-word> . 536)
            (<fragment-define-bindings-word> . 536)
            (<fragment-define-and-begin-word> . 536)
            (<fragment-define-word> . 536)
            (<fragment-begin-word> . 536) (<defining-word> . 536)
            (<symbol> . 536) (:otherwise . 536) (:macro . 536)
            (:method . 536) (:local . 536) (:let . 536)
            (:handler . 536) (:generic . 536) (:end . 536)
            (:define . 536) (:&all-keys . 536) (:&key . 536)
            (:&rest . 536) (:&next . 536) (:false . 536) (:true . 536)
            (<not> . 536) (<unary-operator> . 536) (<literal> . 536)
            (<keyword> . 536) (<implies> . 536) (<ellipsis> . 536)
            (<var-type-sep> . 536) (<dot> . 536)
            (<escaped-substitution> . 536) (<string> . 536)
            (<query> . 536) (<query-equal> . 536) (<query-query> . 536)
            (<syntax-open> . 536) (<vector-open> . 536)
            (<list-open> . 536) (<lcbracket> . 536) (<lsbracket> . 536)
            (<lbracket> . 536) (<rcbracket> . 536) (<rbracket> . 536)
            (<rsbracket> . 536))
           ((<rsbracket> . 479) (<query> . -153) (<lbracket> . -157)
            (<lsbracket> . -161) (<lcbracket> . -169)
            (<list-open> . -180) (<vector-open> . -188)
            (<syntax-open> . -196) (<query-query> . -212)
            (<query-equal> . -148) (<string> . -197)
            (<escaped-substitution> . -155) (<dot> . -163)
            (<var-type-sep> . -179) (<ellipsis> . -202)
            (<implies> . -171) (<keyword> . -176) (<literal> . -192)
            (<unary-operator> . -208) (<not> . -185) (:true . -143)
            (:false . -149) (:&next . -194) (:&rest . -209)
            (:&key . -142) (:&all-keys . -173) (:define . -166)
            (:end . -199) (:generic . -167) (:handler . -177)
            (:let . -154) (:local . -162) (:method . -159)
            (:macro . -198) (:otherwise . -144)
            (:parsed-variable . -151) (:parsed-expression . -189)
            (:parsed-body . -201) (:parsed-case-body . -147)
            (:parsed-literal . -200) (<statement-sep> . -175)
            (<var-sep> . -183) (<binary-operator> . -178)
            (<binds> . -210) (<var-singleton-sep> . -165)
            (<becomes> . -187) (<minus> . -206) (<symbol> . -168)
            (<defining-word> . -182) (<fragment-begin-word> . -190)
            (<fragment-define-word> . -152)
            (<fragment-define-and-begin-word> . -207)
            (<fragment-define-bindings-word> . -204)
            (<fragment-define-bindings-and-begin-word> . -203)
            (<fragment-function-word> . -213)
            (<fragment-local-declaration-word> . -186)
            (<details-begin-word> . -156) (<expr-begin-word> . -150)
            (<simple-begin-word> . -195)
            (<details-intermediate-word> . -174)
            (<expr-intermediate-word> . -170)
            (<simple-intermediate-word> . -158)
            (<method-defining-word> . -146)
            (<generic-function-defining-word> . -193)
            (<seal-word> . -145) (:parsed-name . -211))
           ((:parsed-literal . 527) (:parsed-case-body . 527)
            (:parsed-body . 527) (:parsed-expression . 527)
            (:parsed-variable . 527) (<minus> . 527) (<becomes> . 527)
            (<var-singleton-sep> . 527) (<binds> . 527)
            (<binary-operator> . 527) (<var-sep> . 527)
            (<statement-sep> . 527) (:parsed-name . 527)
            (<seal-word> . 527)
            (<generic-function-defining-word> . 527)
            (<method-defining-word> . 527)
            (<simple-intermediate-word> . 527)
            (<expr-intermediate-word> . 527)
            (<details-intermediate-word> . 527)
            (<simple-begin-word> . 527) (<expr-begin-word> . 527)
            (<details-begin-word> . 527)
            (<fragment-local-declaration-word> . 527)
            (<fragment-function-word> . 527)
            (<fragment-define-bindings-and-begin-word> . 527)
            (<fragment-define-bindings-word> . 527)
            (<fragment-define-and-begin-word> . 527)
            (<fragment-define-word> . 527)
            (<fragment-begin-word> . 527) (<defining-word> . 527)
            (<symbol> . 527) (:otherwise . 527) (:macro . 527)
            (:method . 527) (:local . 527) (:let . 527)
            (:handler . 527) (:generic . 527) (:end . 527)
            (:define . 527) (:&all-keys . 527) (:&key . 527)
            (:&rest . 527) (:&next . 527) (:false . 527) (:true . 527)
            (<not> . 527) (<unary-operator> . 527) (<literal> . 527)
            (<keyword> . 527) (<implies> . 527) (<ellipsis> . 527)
            (<var-type-sep> . 527) (<dot> . 527)
            (<escaped-substitution> . 527) (<string> . 527)
            (<query> . 527) (<query-equal> . 527) (<query-query> . 527)
            (<syntax-open> . 527) (<vector-open> . 527)
            (<list-open> . 527) (<lcbracket> . 527) (<lsbracket> . 527)
            (<lbracket> . 527) (<rcbracket> . 527) (<rbracket> . 527)
            (<rsbracket> . 527))
           ((:end . 439) (<query> . 439) (<ellipsis> . 439)
            (<lbracket> . 439) (<lsbracket> . 439) (<lcbracket> . 439)
            (<symbol> . 439) (<defining-word> . 439)
            (<fragment-define-word> . 439)
            (<fragment-define-bindings-word> . 439)
            (<binary-operator> . 439) (<minus> . 439) (<binds> . 439)
            (<var-singleton-sep> . 439) (<becomes> . 439) (<not> . 439)
            (:parsed-name . 439) (:otherwise . 439) (<implies> . 439)
            (<escaped-hash-word> . 439) (<literal> . 439)
            (<string> . 439) (<keyword> . 439) (:true . 439)
            (:false . 439) (<list-open> . 439) (<vector-open> . 439)
            (:&rest . 439) (:&key . 439) (<rcbracket> . 439)
            (:parsed-literal . 439) (:parsed-case-body . 439)
            (:parsed-body . 439) (:parsed-expression . 439)
            (:parsed-variable . 439) (<var-sep> . 439)
            (<statement-sep> . 439) (<seal-word> . 439)
            (<generic-function-defining-word> . 439)
            (<method-defining-word> . 439)
            (<simple-intermediate-word> . 439)
            (<expr-intermediate-word> . 439)
            (<details-intermediate-word> . 439)
            (<simple-begin-word> . 439) (<expr-begin-word> . 439)
            (<details-begin-word> . 439)
            (<fragment-local-declaration-word> . 439)
            (<fragment-function-word> . 439)
            (<fragment-define-bindings-and-begin-word> . 439)
            (<fragment-define-and-begin-word> . 439)
            (<fragment-begin-word> . 439) (:macro . 439)
            (:method . 439) (:local . 439) (:let . 439)
            (:handler . 439) (:generic . 439) (:define . 439)
            (:&all-keys . 439) (:&next . 439) (<unary-operator> . 439)
            (<var-type-sep> . 439) (<dot> . 439)
            (<escaped-substitution> . 439) (<query-equal> . 439)
            (<query-query> . 439) (<syntax-open> . 439)
            (<rbracket> . 439) (<rsbracket> . 439) (<splice> . 439))
           ((<splice> . -470) (:parsed-literal . 490)
            (:parsed-case-body . 490) (:parsed-body . 490)
            (:parsed-expression . 490) (:parsed-variable . 490)
            (<minus> . 490) (<becomes> . 490)
            (<var-singleton-sep> . 490) (<binds> . 490)
            (<binary-operator> . 490) (<var-sep> . 490)
            (<statement-sep> . 490) (:parsed-name . 490)
            (<seal-word> . 490)
            (<generic-function-defining-word> . 490)
            (<method-defining-word> . 490)
            (<simple-intermediate-word> . 490)
            (<expr-intermediate-word> . 490)
            (<details-intermediate-word> . 490)
            (<simple-begin-word> . 490) (<expr-begin-word> . 490)
            (<details-begin-word> . 490)
            (<fragment-local-declaration-word> . 490)
            (<fragment-function-word> . 490)
            (<fragment-define-bindings-and-begin-word> . 490)
            (<fragment-define-bindings-word> . 490)
            (<fragment-define-and-begin-word> . 490)
            (<fragment-define-word> . 490)
            (<fragment-begin-word> . 490) (<defining-word> . 490)
            (<symbol> . 490) (:otherwise . 490) (:macro . 490)
            (:method . 490) (:local . 490) (:let . 490)
            (:handler . 490) (:generic . 490) (:end . 490)
            (:define . 490) (:&all-keys . 490) (:&key . 490)
            (:&rest . 490) (:&next . 490) (:false . 490) (:true . 490)
            (<not> . 490) (<unary-operator> . 490) (<literal> . 490)
            (<keyword> . 490) (<implies> . 490) (<ellipsis> . 490)
            (<var-type-sep> . 490) (<dot> . 490)
            (<escaped-substitution> . 490) (<string> . 490)
            (<query> . 490) (<query-equal> . 490) (<query-query> . 490)
            (<syntax-open> . 490) (<vector-open> . 490)
            (<list-open> . 490) (<lcbracket> . 490) (<lsbracket> . 490)
            (<lbracket> . 490) (<rcbracket> . 490) (<rbracket> . 490)
            (<rsbracket> . 490))
           ((:parsed-literal . 505) (:parsed-case-body . 505)
            (:parsed-body . 505) (:parsed-expression . 505)
            (:parsed-variable . 505) (<minus> . 505) (<becomes> . 505)
            (<var-singleton-sep> . 505) (<binds> . 505)
            (<binary-operator> . 505) (<var-sep> . 505)
            (<statement-sep> . 505) (:parsed-name . 505)
            (<seal-word> . 505)
            (<generic-function-defining-word> . 505)
            (<method-defining-word> . 505)
            (<simple-intermediate-word> . 505)
            (<expr-intermediate-word> . 505)
            (<details-intermediate-word> . 505)
            (<simple-begin-word> . 505) (<expr-begin-word> . 505)
            (<details-begin-word> . 505)
            (<fragment-local-declaration-word> . 505)
            (<fragment-function-word> . 505)
            (<fragment-define-bindings-and-begin-word> . 505)
            (<fragment-define-bindings-word> . 505)
            (<fragment-define-and-begin-word> . 505)
            (<fragment-define-word> . 505)
            (<fragment-begin-word> . 505) (<defining-word> . 505)
            (<symbol> . 505) (:otherwise . 505) (:macro . 505)
            (:method . 505) (:local . 505) (:let . 505)
            (:handler . 505) (:generic . 505) (:end . 505)
            (:define . 505) (:&all-keys . 505) (:&key . 505)
            (:&rest . 505) (:&next . 505) (:false . 505) (:true . 505)
            (<not> . 505) (<unary-operator> . 505) (<literal> . 505)
            (<keyword> . 505) (<implies> . 505) (<ellipsis> . 505)
            (<var-type-sep> . 505) (<dot> . 505)
            (<escaped-substitution> . 505) (<string> . 505)
            (<query> . 505) (<query-equal> . 505) (<query-query> . 505)
            (<syntax-open> . 505) (<vector-open> . 505)
            (<list-open> . 505) (<lcbracket> . 505) (<lsbracket> . 505)
            (<lbracket> . 505) (<rcbracket> . 505) (<rbracket> . 505)
            (<rsbracket> . 505))
           ((:end . 453) (<query> . 453) (<ellipsis> . 453)
            (<lbracket> . 453) (<lsbracket> . 453) (<lcbracket> . 453)
            (<symbol> . 453) (<defining-word> . 453)
            (<fragment-define-word> . 453)
            (<fragment-define-bindings-word> . 453)
            (<binary-operator> . 453) (<minus> . 453) (<binds> . 453)
            (<var-singleton-sep> . 453) (<becomes> . 453) (<not> . 453)
            (:parsed-name . 453) (:otherwise . 453) (<implies> . 453)
            (<escaped-hash-word> . 453) (<literal> . 453)
            (<string> . 453) (<keyword> . 453) (:true . 453)
            (:false . 453) (<list-open> . 453) (<vector-open> . 453)
            (:&rest . 453) (:&key . 453) (<rcbracket> . 453)
            (:parsed-literal . 453) (:parsed-case-body . 453)
            (:parsed-body . 453) (:parsed-expression . 453)
            (:parsed-variable . 453) (<var-sep> . 453)
            (<statement-sep> . 453) (<seal-word> . 453)
            (<generic-function-defining-word> . 453)
            (<method-defining-word> . 453)
            (<simple-intermediate-word> . 453)
            (<expr-intermediate-word> . 453)
            (<details-intermediate-word> . 453)
            (<simple-begin-word> . 453) (<expr-begin-word> . 453)
            (<details-begin-word> . 453)
            (<fragment-local-declaration-word> . 453)
            (<fragment-function-word> . 453)
            (<fragment-define-bindings-and-begin-word> . 453)
            (<fragment-define-and-begin-word> . 453)
            (<fragment-begin-word> . 453) (:macro . 453)
            (:method . 453) (:local . 453) (:let . 453)
            (:handler . 453) (:generic . 453) (:define . 453)
            (:&all-keys . 453) (:&next . 453) (<unary-operator> . 453)
            (<var-type-sep> . 453) (<dot> . 453)
            (<escaped-substitution> . 453) (<query-equal> . 453)
            (<query-query> . 453) (<syntax-open> . 453)
            (<rbracket> . 453) (<rsbracket> . 453) (<splice> . 453))
           ((:parsed-literal . 511) (:parsed-case-body . 511)
            (:parsed-body . 511) (:parsed-expression . 511)
            (:parsed-variable . 511) (<minus> . 511) (<becomes> . 511)
            (<var-singleton-sep> . 511) (<binds> . 511)
            (<binary-operator> . 511) (<var-sep> . 511)
            (<statement-sep> . 511) (:parsed-name . 511)
            (<seal-word> . 511)
            (<generic-function-defining-word> . 511)
            (<method-defining-word> . 511)
            (<simple-intermediate-word> . 511)
            (<expr-intermediate-word> . 511)
            (<details-intermediate-word> . 511)
            (<simple-begin-word> . 511) (<expr-begin-word> . 511)
            (<details-begin-word> . 511)
            (<fragment-local-declaration-word> . 511)
            (<fragment-function-word> . 511)
            (<fragment-define-bindings-and-begin-word> . 511)
            (<fragment-define-bindings-word> . 511)
            (<fragment-define-and-begin-word> . 511)
            (<fragment-define-word> . 511)
            (<fragment-begin-word> . 511) (<defining-word> . 511)
            (<symbol> . 511) (:otherwise . 511) (:macro . 511)
            (:method . 511) (:local . 511) (:let . 511)
            (:handler . 511) (:generic . 511) (:end . 511)
            (:define . 511) (:&all-keys . 511) (:&key . 511)
            (:&rest . 511) (:&next . 511) (:false . 511) (:true . 511)
            (<not> . 511) (<unary-operator> . 511) (<literal> . 511)
            (<keyword> . 511) (<implies> . 511) (<ellipsis> . 511)
            (<var-type-sep> . 511) (<dot> . 511)
            (<escaped-substitution> . 511) (<string> . 511)
            (<query> . 511) (<query-equal> . 511) (<query-query> . 511)
            (<syntax-open> . 511) (<vector-open> . 511)
            (<list-open> . 511) (<lcbracket> . 511) (<lsbracket> . 511)
            (<lbracket> . 511) (<rcbracket> . 511) (<rbracket> . 511)
            (<rsbracket> . 511))
           ((:end . 448) (<query> . 448) (<ellipsis> . 448)
            (<lbracket> . 448) (<lsbracket> . 448) (<lcbracket> . 448)
            (<symbol> . 448) (<defining-word> . 448)
            (<fragment-define-word> . 448)
            (<fragment-define-bindings-word> . 448)
            (<binary-operator> . 448) (<minus> . 448) (<binds> . 448)
            (<var-singleton-sep> . 448) (<becomes> . 448) (<not> . 448)
            (:parsed-name . 448) (:otherwise . 448) (<implies> . 448)
            (<escaped-hash-word> . 448) (<literal> . 448)
            (<string> . 448) (<keyword> . 448) (:true . 448)
            (:false . 448) (<list-open> . 448) (<vector-open> . 448)
            (:&rest . 448) (:&key . 448) (<rcbracket> . 448)
            (:parsed-literal . 448) (:parsed-case-body . 448)
            (:parsed-body . 448) (:parsed-expression . 448)
            (:parsed-variable . 448) (<var-sep> . 448)
            (<statement-sep> . 448) (<seal-word> . 448)
            (<generic-function-defining-word> . 448)
            (<method-defining-word> . 448)
            (<simple-intermediate-word> . 448)
            (<expr-intermediate-word> . 448)
            (<details-intermediate-word> . 448)
            (<simple-begin-word> . 448) (<expr-begin-word> . 448)
            (<details-begin-word> . 448)
            (<fragment-local-declaration-word> . 448)
            (<fragment-function-word> . 448)
            (<fragment-define-bindings-and-begin-word> . 448)
            (<fragment-define-and-begin-word> . 448)
            (<fragment-begin-word> . 448) (:macro . 448)
            (:method . 448) (:local . 448) (:let . 448)
            (:handler . 448) (:generic . 448) (:define . 448)
            (:&all-keys . 448) (:&next . 448) (<unary-operator> . 448)
            (<var-type-sep> . 448) (<dot> . 448)
            (<escaped-substitution> . 448) (<query-equal> . 448)
            (<query-query> . 448) (<syntax-open> . 448)
            (<rbracket> . 448) (<rsbracket> . 448) (<splice> . 448))
           ((<rcbracket> . 479) (<query> . -153) (<lbracket> . -157)
            (<lsbracket> . -161) (<lcbracket> . -169)
            (<list-open> . -180) (<vector-open> . -188)
            (<syntax-open> . -196) (<query-query> . -212)
            (<query-equal> . -148) (<string> . -197)
            (<escaped-substitution> . -155) (<dot> . -163)
            (<var-type-sep> . -179) (<ellipsis> . -202)
            (<implies> . -171) (<keyword> . -176) (<literal> . -192)
            (<unary-operator> . -208) (<not> . -185) (:true . -143)
            (:false . -149) (:&next . -194) (:&rest . -209)
            (:&key . -142) (:&all-keys . -173) (:define . -166)
            (:end . -199) (:generic . -167) (:handler . -177)
            (:let . -154) (:local . -162) (:method . -159)
            (:macro . -198) (:otherwise . -144)
            (:parsed-variable . -151) (:parsed-expression . -189)
            (:parsed-body . -201) (:parsed-case-body . -147)
            (:parsed-literal . -200) (<statement-sep> . -175)
            (<var-sep> . -183) (<binary-operator> . -178)
            (<binds> . -210) (<var-singleton-sep> . -165)
            (<becomes> . -187) (<minus> . -206) (<symbol> . -168)
            (<defining-word> . -182) (<fragment-begin-word> . -190)
            (<fragment-define-word> . -152)
            (<fragment-define-and-begin-word> . -207)
            (<fragment-define-bindings-word> . -204)
            (<fragment-define-bindings-and-begin-word> . -203)
            (<fragment-function-word> . -213)
            (<fragment-local-declaration-word> . -186)
            (<details-begin-word> . -156) (<expr-begin-word> . -150)
            (<simple-begin-word> . -195)
            (<details-intermediate-word> . -174)
            (<expr-intermediate-word> . -170)
            (<simple-intermediate-word> . -158)
            (<method-defining-word> . -146)
            (<generic-function-defining-word> . -193)
            (<seal-word> . -145) (:parsed-name . -211))
           ((:parsed-literal . 506) (:parsed-case-body . 506)
            (:parsed-body . 506) (:parsed-expression . 506)
            (:parsed-variable . 506) (<minus> . 506) (<becomes> . 506)
            (<var-singleton-sep> . 506) (<binds> . 506)
            (<binary-operator> . 506) (<var-sep> . 506)
            (<statement-sep> . 506) (:parsed-name . 506)
            (<seal-word> . 506)
            (<generic-function-defining-word> . 506)
            (<method-defining-word> . 506)
            (<simple-intermediate-word> . 506)
            (<expr-intermediate-word> . 506)
            (<details-intermediate-word> . 506)
            (<simple-begin-word> . 506) (<expr-begin-word> . 506)
            (<details-begin-word> . 506)
            (<fragment-local-declaration-word> . 506)
            (<fragment-function-word> . 506)
            (<fragment-define-bindings-and-begin-word> . 506)
            (<fragment-define-bindings-word> . 506)
            (<fragment-define-and-begin-word> . 506)
            (<fragment-define-word> . 506)
            (<fragment-begin-word> . 506) (<defining-word> . 506)
            (<symbol> . 506) (:otherwise . 506) (:macro . 506)
            (:method . 506) (:local . 506) (:let . 506)
            (:handler . 506) (:generic . 506) (:end . 506)
            (:define . 506) (:&all-keys . 506) (:&key . 506)
            (:&rest . 506) (:&next . 506) (:false . 506) (:true . 506)
            (<not> . 506) (<unary-operator> . 506) (<literal> . 506)
            (<keyword> . 506) (<implies> . 506) (<ellipsis> . 506)
            (<var-type-sep> . 506) (<dot> . 506)
            (<escaped-substitution> . 506) (<string> . 506)
            (<query> . 506) (<query-equal> . 506) (<query-query> . 506)
            (<syntax-open> . 506) (<vector-open> . 506)
            (<list-open> . 506) (<lcbracket> . 506) (<lsbracket> . 506)
            (<lbracket> . 506) (<rcbracket> . 506) (<rbracket> . 506)
            (<rsbracket> . 506) (<splice> . -460))
           ((:parsed-literal . 522) (:parsed-case-body . 522)
            (:parsed-body . 522) (:parsed-expression . 522)
            (:parsed-variable . 522) (<minus> . 522) (<becomes> . 522)
            (<var-singleton-sep> . 522) (<binds> . 522)
            (<binary-operator> . 522) (<var-sep> . 522)
            (<statement-sep> . 522) (:parsed-name . 522)
            (<seal-word> . 522)
            (<generic-function-defining-word> . 522)
            (<method-defining-word> . 522)
            (<simple-intermediate-word> . 522)
            (<expr-intermediate-word> . 522)
            (<details-intermediate-word> . 522)
            (<simple-begin-word> . 522) (<expr-begin-word> . 522)
            (<details-begin-word> . 522)
            (<fragment-local-declaration-word> . 522)
            (<fragment-function-word> . 522)
            (<fragment-define-bindings-and-begin-word> . 522)
            (<fragment-define-bindings-word> . 522)
            (<fragment-define-and-begin-word> . 522)
            (<fragment-define-word> . 522)
            (<fragment-begin-word> . 522) (<defining-word> . 522)
            (<symbol> . 522) (:otherwise . 522) (:macro . 522)
            (:method . 522) (:local . 522) (:let . 522)
            (:handler . 522) (:generic . 522) (:end . 522)
            (:define . 522) (:&all-keys . 522) (:&key . 522)
            (:&rest . 522) (:&next . 522) (:false . 522) (:true . 522)
            (<not> . 522) (<unary-operator> . 522) (<literal> . 522)
            (<keyword> . 522) (<implies> . 522) (<ellipsis> . 522)
            (<var-type-sep> . 522) (<dot> . 522)
            (<escaped-substitution> . 522) (<string> . 522)
            (<query> . 522) (<query-equal> . 522) (<query-query> . 522)
            (<syntax-open> . 522) (<vector-open> . 522)
            (<list-open> . 522) (<lcbracket> . 522) (<lsbracket> . 522)
            (<lbracket> . 522) (<rcbracket> . 522) (<rbracket> . 522)
            (<rsbracket> . 522))
           ((:parsed-literal . 516) (:parsed-case-body . 516)
            (:parsed-body . 516) (:parsed-expression . 516)
            (:parsed-variable . 516) (<minus> . 516) (<becomes> . 516)
            (<var-singleton-sep> . 516) (<binds> . 516)
            (<binary-operator> . 516) (<var-sep> . 516)
            (<statement-sep> . 516) (:parsed-name . 516)
            (<seal-word> . 516)
            (<generic-function-defining-word> . 516)
            (<method-defining-word> . 516)
            (<simple-intermediate-word> . 516)
            (<expr-intermediate-word> . 516)
            (<details-intermediate-word> . 516)
            (<simple-begin-word> . 516) (<expr-begin-word> . 516)
            (<details-begin-word> . 516)
            (<fragment-local-declaration-word> . 516)
            (<fragment-function-word> . 516)
            (<fragment-define-bindings-and-begin-word> . 516)
            (<fragment-define-bindings-word> . 516)
            (<fragment-define-and-begin-word> . 516)
            (<fragment-define-word> . 516)
            (<fragment-begin-word> . 516) (<defining-word> . 516)
            (<symbol> . 516) (:otherwise . 516) (:macro . 516)
            (:method . 516) (:local . 516) (:let . 516)
            (:handler . 516) (:generic . 516) (:end . 516)
            (:define . 516) (:&all-keys . 516) (:&key . 516)
            (:&rest . 516) (:&next . 516) (:false . 516) (:true . 516)
            (<not> . 516) (<unary-operator> . 516) (<literal> . 516)
            (<keyword> . 516) (<implies> . 516) (<ellipsis> . 516)
            (<var-type-sep> . 516) (<dot> . 516)
            (<escaped-substitution> . 516) (<string> . 516)
            (<query> . 516) (<query-equal> . 516) (<query-query> . 516)
            (<syntax-open> . 516) (<vector-open> . 516)
            (<list-open> . 516) (<lcbracket> . 516) (<lsbracket> . 516)
            (<lbracket> . 516) (<rcbracket> . 516) (<rbracket> . 516)
            (<rsbracket> . 516))
           ((:parsed-literal . 530) (:parsed-case-body . 530)
            (:parsed-body . 530) (:parsed-expression . 530)
            (:parsed-variable . 530) (<minus> . 530) (<becomes> . 530)
            (<var-singleton-sep> . 530) (<binds> . 530)
            (<binary-operator> . 530) (<var-sep> . 530)
            (<statement-sep> . 530) (:parsed-name . 530)
            (<seal-word> . 530)
            (<generic-function-defining-word> . 530)
            (<method-defining-word> . 530)
            (<simple-intermediate-word> . 530)
            (<expr-intermediate-word> . 530)
            (<details-intermediate-word> . 530)
            (<simple-begin-word> . 530) (<expr-begin-word> . 530)
            (<details-begin-word> . 530)
            (<fragment-local-declaration-word> . 530)
            (<fragment-function-word> . 530)
            (<fragment-define-bindings-and-begin-word> . 530)
            (<fragment-define-bindings-word> . 530)
            (<fragment-define-and-begin-word> . 530)
            (<fragment-define-word> . 530)
            (<fragment-begin-word> . 530) (<defining-word> . 530)
            (<symbol> . 530) (:otherwise . 530) (:macro . 530)
            (:method . 530) (:local . 530) (:let . 530)
            (:handler . 530) (:generic . 530) (:end . 530)
            (:define . 530) (:&all-keys . 530) (:&key . 530)
            (:&rest . 530) (:&next . 530) (:false . 530) (:true . 530)
            (<not> . 530) (<unary-operator> . 530) (<literal> . 530)
            (<keyword> . 530) (<implies> . 530) (<ellipsis> . 530)
            (<var-type-sep> . 530) (<dot> . 530)
            (<escaped-substitution> . 530) (<string> . 530)
            (<query> . 530) (<query-equal> . 530) (<query-query> . 530)
            (<syntax-open> . 530) (<vector-open> . 530)
            (<list-open> . 530) (<lcbracket> . 530) (<lsbracket> . 530)
            (<lbracket> . 530) (<rcbracket> . 530) (<rbracket> . 530)
            (<rsbracket> . 530))
           ((:parsed-literal . 528) (:parsed-case-body . 528)
            (:parsed-body . 528) (:parsed-expression . 528)
            (:parsed-variable . 528) (<minus> . 528) (<becomes> . 528)
            (<var-singleton-sep> . 528) (<binds> . 528)
            (<binary-operator> . 528) (<var-sep> . 528)
            (<statement-sep> . 528) (:parsed-name . 528)
            (<seal-word> . 528)
            (<generic-function-defining-word> . 528)
            (<method-defining-word> . 528)
            (<simple-intermediate-word> . 528)
            (<expr-intermediate-word> . 528)
            (<details-intermediate-word> . 528)
            (<simple-begin-word> . 528) (<expr-begin-word> . 528)
            (<details-begin-word> . 528)
            (<fragment-local-declaration-word> . 528)
            (<fragment-function-word> . 528)
            (<fragment-define-bindings-and-begin-word> . 528)
            (<fragment-define-bindings-word> . 528)
            (<fragment-define-and-begin-word> . 528)
            (<fragment-define-word> . 528)
            (<fragment-begin-word> . 528) (<defining-word> . 528)
            (<symbol> . 528) (:otherwise . 528) (:macro . 528)
            (:method . 528) (:local . 528) (:let . 528)
            (:handler . 528) (:generic . 528) (:end . 528)
            (:define . 528) (:&all-keys . 528) (:&key . 528)
            (:&rest . 528) (:&next . 528) (:false . 528) (:true . 528)
            (<not> . 528) (<unary-operator> . 528) (<literal> . 528)
            (<keyword> . 528) (<implies> . 528) (<ellipsis> . 528)
            (<var-type-sep> . 528) (<dot> . 528)
            (<escaped-substitution> . 528) (<string> . 528)
            (<query> . 528) (<query-equal> . 528) (<query-query> . 528)
            (<syntax-open> . 528) (<vector-open> . 528)
            (<list-open> . 528) (<lcbracket> . 528) (<lsbracket> . 528)
            (<lbracket> . 528) (<rcbracket> . 528) (<rbracket> . 528)
            (<rsbracket> . 528))
           ((:parsed-literal . 502) (:parsed-case-body . 502)
            (:parsed-body . 502) (:parsed-expression . 502)
            (:parsed-variable . 502) (<minus> . 502) (<becomes> . 502)
            (<var-singleton-sep> . 502) (<binds> . 502)
            (<binary-operator> . 502) (<var-sep> . 502)
            (<statement-sep> . 502) (:parsed-name . 502)
            (<seal-word> . 502)
            (<generic-function-defining-word> . 502)
            (<method-defining-word> . 502)
            (<simple-intermediate-word> . 502)
            (<expr-intermediate-word> . 502)
            (<details-intermediate-word> . 502)
            (<simple-begin-word> . 502) (<expr-begin-word> . 502)
            (<details-begin-word> . 502)
            (<fragment-local-declaration-word> . 502)
            (<fragment-function-word> . 502)
            (<fragment-define-bindings-and-begin-word> . 502)
            (<fragment-define-bindings-word> . 502)
            (<fragment-define-and-begin-word> . 502)
            (<fragment-define-word> . 502)
            (<fragment-begin-word> . 502) (<defining-word> . 502)
            (<symbol> . 502) (:otherwise . 502) (:macro . 502)
            (:method . 502) (:local . 502) (:let . 502)
            (:handler . 502) (:generic . 502) (:end . 502)
            (:define . 502) (:&all-keys . 502) (:&key . 502)
            (:&rest . 502) (:&next . 502) (:false . 502) (:true . 502)
            (<not> . 502) (<unary-operator> . 502) (<literal> . 502)
            (<keyword> . 502) (<implies> . 502) (<ellipsis> . 502)
            (<var-type-sep> . 502) (<dot> . 502)
            (<escaped-substitution> . 502) (<string> . 502)
            (<query> . 502) (<query-equal> . 502) (<query-query> . 502)
            (<syntax-open> . 502) (<vector-open> . 502)
            (<list-open> . 502) (<lcbracket> . 502) (<lsbracket> . 502)
            (<lbracket> . 502) (<rcbracket> . 502) (<rbracket> . 502)
            (<rsbracket> . 502))
           ((:end . 443) (<query> . 443) (<ellipsis> . 443)
            (<lbracket> . 443) (<lsbracket> . 443) (<lcbracket> . 443)
            (<symbol> . 443) (<defining-word> . 443)
            (<fragment-define-word> . 443)
            (<fragment-define-bindings-word> . 443)
            (<binary-operator> . 443) (<minus> . 443) (<binds> . 443)
            (<var-singleton-sep> . 443) (<becomes> . 443) (<not> . 443)
            (:parsed-name . 443) (:otherwise . 443) (<implies> . 443)
            (<escaped-hash-word> . 443) (<literal> . 443)
            (<string> . 443) (<keyword> . 443) (:true . 443)
            (:false . 443) (<list-open> . 443) (<vector-open> . 443)
            (:&rest . 443) (:&key . 443) (<rcbracket> . 443)
            (:parsed-literal . 443) (:parsed-case-body . 443)
            (:parsed-body . 443) (:parsed-expression . 443)
            (:parsed-variable . 443) (<var-sep> . 443)
            (<statement-sep> . 443) (<seal-word> . 443)
            (<generic-function-defining-word> . 443)
            (<method-defining-word> . 443)
            (<simple-intermediate-word> . 443)
            (<expr-intermediate-word> . 443)
            (<details-intermediate-word> . 443)
            (<simple-begin-word> . 443) (<expr-begin-word> . 443)
            (<details-begin-word> . 443)
            (<fragment-local-declaration-word> . 443)
            (<fragment-function-word> . 443)
            (<fragment-define-bindings-and-begin-word> . 443)
            (<fragment-define-and-begin-word> . 443)
            (<fragment-begin-word> . 443) (:macro . 443)
            (:method . 443) (:local . 443) (:let . 443)
            (:handler . 443) (:generic . 443) (:define . 443)
            (:&all-keys . 443) (:&next . 443) (<unary-operator> . 443)
            (<var-type-sep> . 443) (<dot> . 443)
            (<escaped-substitution> . 443) (<query-equal> . 443)
            (<query-query> . 443) (<syntax-open> . 443)
            (<rbracket> . 443) (<rsbracket> . 443) (<splice> . 443))
           ((:end . 442) (<query> . 442) (<ellipsis> . 442)
            (<lbracket> . 442) (<lsbracket> . 442) (<lcbracket> . 442)
            (<symbol> . 442) (<defining-word> . 442)
            (<fragment-define-word> . 442)
            (<fragment-define-bindings-word> . 442)
            (<binary-operator> . 442) (<minus> . 442) (<binds> . 442)
            (<var-singleton-sep> . 442) (<becomes> . 442) (<not> . 442)
            (:parsed-name . 442) (:otherwise . 442) (<implies> . 442)
            (<escaped-hash-word> . 442) (<literal> . 442)
            (<string> . 442) (<keyword> . 442) (:true . 442)
            (:false . 442) (<list-open> . 442) (<vector-open> . 442)
            (:&rest . 442) (:&key . 442) (<rcbracket> . 442)
            (:parsed-literal . 442) (:parsed-case-body . 442)
            (:parsed-body . 442) (:parsed-expression . 442)
            (:parsed-variable . 442) (<var-sep> . 442)
            (<statement-sep> . 442) (<seal-word> . 442)
            (<generic-function-defining-word> . 442)
            (<method-defining-word> . 442)
            (<simple-intermediate-word> . 442)
            (<expr-intermediate-word> . 442)
            (<details-intermediate-word> . 442)
            (<simple-begin-word> . 442) (<expr-begin-word> . 442)
            (<details-begin-word> . 442)
            (<fragment-local-declaration-word> . 442)
            (<fragment-function-word> . 442)
            (<fragment-define-bindings-and-begin-word> . 442)
            (<fragment-define-and-begin-word> . 442)
            (<fragment-begin-word> . 442) (:macro . 442)
            (:method . 442) (:local . 442) (:let . 442)
            (:handler . 442) (:generic . 442) (:define . 442)
            (:&all-keys . 442) (:&next . 442) (<unary-operator> . 442)
            (<var-type-sep> . 442) (<dot> . 442)
            (<escaped-substitution> . 442) (<query-equal> . 442)
            (<query-query> . 442) (<syntax-open> . 442)
            (<rbracket> . 442) (<rsbracket> . 442) (<splice> . 442))
           ((<rcbracket> . -835))
           ((:parsed-literal . 537) (:parsed-case-body . 537)
            (:parsed-body . 537) (:parsed-expression . 537)
            (:parsed-variable . 537) (<minus> . 537) (<becomes> . 537)
            (<var-singleton-sep> . 537) (<binds> . 537)
            (<binary-operator> . 537) (<var-sep> . 537)
            (<statement-sep> . 537) (:parsed-name . 537)
            (<seal-word> . 537)
            (<generic-function-defining-word> . 537)
            (<method-defining-word> . 537)
            (<simple-intermediate-word> . 537)
            (<expr-intermediate-word> . 537)
            (<details-intermediate-word> . 537)
            (<simple-begin-word> . 537) (<expr-begin-word> . 537)
            (<details-begin-word> . 537)
            (<fragment-local-declaration-word> . 537)
            (<fragment-function-word> . 537)
            (<fragment-define-bindings-and-begin-word> . 537)
            (<fragment-define-bindings-word> . 537)
            (<fragment-define-and-begin-word> . 537)
            (<fragment-define-word> . 537)
            (<fragment-begin-word> . 537) (<defining-word> . 537)
            (<symbol> . 537) (:otherwise . 537) (:macro . 537)
            (:method . 537) (:local . 537) (:let . 537)
            (:handler . 537) (:generic . 537) (:end . 537)
            (:define . 537) (:&all-keys . 537) (:&key . 537)
            (:&rest . 537) (:&next . 537) (:false . 537) (:true . 537)
            (<not> . 537) (<unary-operator> . 537) (<literal> . 537)
            (<keyword> . 537) (<implies> . 537) (<ellipsis> . 537)
            (<var-type-sep> . 537) (<dot> . 537)
            (<escaped-substitution> . 537) (<string> . 537)
            (<query> . 537) (<query-equal> . 537) (<query-query> . 537)
            (<syntax-open> . 537) (<vector-open> . 537)
            (<list-open> . 537) (<lcbracket> . 537) (<lsbracket> . 537)
            (<lbracket> . 537) (<rcbracket> . 537) (<rbracket> . 537)
            (<rsbracket> . 537))
           ((:end . 441) (<query> . 441) (<ellipsis> . 441)
            (<lbracket> . 441) (<lsbracket> . 441) (<lcbracket> . 441)
            (<symbol> . 441) (<defining-word> . 441)
            (<fragment-define-word> . 441)
            (<fragment-define-bindings-word> . 441)
            (<binary-operator> . 441) (<minus> . 441) (<binds> . 441)
            (<var-singleton-sep> . 441) (<becomes> . 441) (<not> . 441)
            (:parsed-name . 441) (:otherwise . 441) (<implies> . 441)
            (<escaped-hash-word> . 441) (<literal> . 441)
            (<string> . 441) (<keyword> . 441) (:true . 441)
            (:false . 441) (<list-open> . 441) (<vector-open> . 441)
            (:&rest . 441) (:&key . 441) (<rcbracket> . 441)
            (:parsed-literal . 441) (:parsed-case-body . 441)
            (:parsed-body . 441) (:parsed-expression . 441)
            (:parsed-variable . 441) (<var-sep> . 441)
            (<statement-sep> . 441) (<seal-word> . 441)
            (<generic-function-defining-word> . 441)
            (<method-defining-word> . 441)
            (<simple-intermediate-word> . 441)
            (<expr-intermediate-word> . 441)
            (<details-intermediate-word> . 441)
            (<simple-begin-word> . 441) (<expr-begin-word> . 441)
            (<details-begin-word> . 441)
            (<fragment-local-declaration-word> . 441)
            (<fragment-function-word> . 441)
            (<fragment-define-bindings-and-begin-word> . 441)
            (<fragment-define-and-begin-word> . 441)
            (<fragment-begin-word> . 441) (:macro . 441)
            (:method . 441) (:local . 441) (:let . 441)
            (:handler . 441) (:generic . 441) (:define . 441)
            (:&all-keys . 441) (:&next . 441) (<unary-operator> . 441)
            (<var-type-sep> . 441) (<dot> . 441)
            (<escaped-substitution> . 441) (<query-equal> . 441)
            (<query-query> . 441) (<syntax-open> . 441)
            (<rbracket> . 441) (<rsbracket> . 441) (<splice> . 441))
           ((:parsed-literal . 507) (:parsed-case-body . 507)
            (:parsed-body . 507) (:parsed-expression . 507)
            (:parsed-variable . 507) (<minus> . 507) (<becomes> . 507)
            (<var-singleton-sep> . 507) (<binds> . 507)
            (<binary-operator> . 507) (<var-sep> . 507)
            (<statement-sep> . 507) (:parsed-name . 507)
            (<seal-word> . 507)
            (<generic-function-defining-word> . 507)
            (<method-defining-word> . 507)
            (<simple-intermediate-word> . 507)
            (<expr-intermediate-word> . 507)
            (<details-intermediate-word> . 507)
            (<simple-begin-word> . 507) (<expr-begin-word> . 507)
            (<details-begin-word> . 507)
            (<fragment-local-declaration-word> . 507)
            (<fragment-function-word> . 507)
            (<fragment-define-bindings-and-begin-word> . 507)
            (<fragment-define-bindings-word> . 507)
            (<fragment-define-and-begin-word> . 507)
            (<fragment-define-word> . 507)
            (<fragment-begin-word> . 507) (<defining-word> . 507)
            (<symbol> . 507) (:otherwise . 507) (:macro . 507)
            (:method . 507) (:local . 507) (:let . 507)
            (:handler . 507) (:generic . 507) (:end . 507)
            (:define . 507) (:&all-keys . 507) (:&key . 507)
            (:&rest . 507) (:&next . 507) (:false . 507) (:true . 507)
            (<not> . 507) (<unary-operator> . 507) (<literal> . 507)
            (<keyword> . 507) (<implies> . 507) (<ellipsis> . 507)
            (<var-type-sep> . 507) (<dot> . 507)
            (<escaped-substitution> . 507) (<string> . 507)
            (<query> . 507) (<query-equal> . 507) (<query-query> . 507)
            (<syntax-open> . 507) (<vector-open> . 507)
            (<list-open> . 507) (<lcbracket> . 507) (<lsbracket> . 507)
            (<lbracket> . 507) (<rcbracket> . 507) (<rbracket> . 507)
            (<rsbracket> . 507))
           ((:parsed-literal . 512) (:parsed-case-body . 512)
            (:parsed-body . 512) (:parsed-expression . 512)
            (:parsed-variable . 512) (<minus> . 512) (<becomes> . 512)
            (<var-singleton-sep> . 512) (<binds> . 512)
            (<binary-operator> . 512) (<var-sep> . 512)
            (<statement-sep> . 512) (:parsed-name . 512)
            (<seal-word> . 512)
            (<generic-function-defining-word> . 512)
            (<method-defining-word> . 512)
            (<simple-intermediate-word> . 512)
            (<expr-intermediate-word> . 512)
            (<details-intermediate-word> . 512)
            (<simple-begin-word> . 512) (<expr-begin-word> . 512)
            (<details-begin-word> . 512)
            (<fragment-local-declaration-word> . 512)
            (<fragment-function-word> . 512)
            (<fragment-define-bindings-and-begin-word> . 512)
            (<fragment-define-bindings-word> . 512)
            (<fragment-define-and-begin-word> . 512)
            (<fragment-define-word> . 512)
            (<fragment-begin-word> . 512) (<defining-word> . 512)
            (<symbol> . 512) (:otherwise . 512) (:macro . 512)
            (:method . 512) (:local . 512) (:let . 512)
            (:handler . 512) (:generic . 512) (:end . 512)
            (:define . 512) (:&all-keys . 512) (:&key . 512)
            (:&rest . 512) (:&next . 512) (:false . 512) (:true . 512)
            (<not> . 512) (<unary-operator> . 512) (<literal> . 512)
            (<keyword> . 512) (<implies> . 512) (<ellipsis> . 512)
            (<var-type-sep> . 512) (<dot> . 512)
            (<escaped-substitution> . 512) (<string> . 512)
            (<query> . 512) (<query-equal> . 512) (<query-query> . 512)
            (<syntax-open> . 512) (<vector-open> . 512)
            (<list-open> . 512) (<lcbracket> . 512) (<lsbracket> . 512)
            (<lbracket> . 512) (<rcbracket> . 512) (<rbracket> . 512)
            (<rsbracket> . 512))
           ((:parsed-literal . 534) (:parsed-case-body . 534)
            (:parsed-body . 534) (:parsed-expression . 534)
            (:parsed-variable . 534) (<minus> . 534) (<becomes> . 534)
            (<var-singleton-sep> . 534) (<binds> . 534)
            (<binary-operator> . 534) (<var-sep> . 534)
            (<statement-sep> . 534) (:parsed-name . 534)
            (<seal-word> . 534)
            (<generic-function-defining-word> . 534)
            (<method-defining-word> . 534)
            (<simple-intermediate-word> . 534)
            (<expr-intermediate-word> . 534)
            (<details-intermediate-word> . 534)
            (<simple-begin-word> . 534) (<expr-begin-word> . 534)
            (<details-begin-word> . 534)
            (<fragment-local-declaration-word> . 534)
            (<fragment-function-word> . 534)
            (<fragment-define-bindings-and-begin-word> . 534)
            (<fragment-define-bindings-word> . 534)
            (<fragment-define-and-begin-word> . 534)
            (<fragment-define-word> . 534)
            (<fragment-begin-word> . 534) (<defining-word> . 534)
            (<symbol> . 534) (:otherwise . 534) (:macro . 534)
            (:method . 534) (:local . 534) (:let . 534)
            (:handler . 534) (:generic . 534) (:end . 534)
            (:define . 534) (:&all-keys . 534) (:&key . 534)
            (:&rest . 534) (:&next . 534) (:false . 534) (:true . 534)
            (<not> . 534) (<unary-operator> . 534) (<literal> . 534)
            (<keyword> . 534) (<implies> . 534) (<ellipsis> . 534)
            (<var-type-sep> . 534) (<dot> . 534)
            (<escaped-substitution> . 534) (<string> . 534)
            (<query> . 534) (<query-equal> . 534) (<query-query> . 534)
            (<syntax-open> . 534) (<vector-open> . 534)
            (<list-open> . 534) (<lcbracket> . 534) (<lsbracket> . 534)
            (<lbracket> . 534) (<rcbracket> . 534) (<rbracket> . 534)
            (<rsbracket> . 534))
           ((:end . 543) (<query> . 543) (<ellipsis> . 543)
            (<lbracket> . 543) (<lsbracket> . 543) (<lcbracket> . 543)
            (<symbol> . 543) (<defining-word> . 543)
            (<fragment-define-word> . 543)
            (<fragment-define-bindings-word> . 543)
            (<binary-operator> . 543) (<minus> . 543) (<binds> . 543)
            (<var-singleton-sep> . 543) (<becomes> . 543) (<not> . 543)
            (:parsed-name . 543) (:otherwise . 543) (<implies> . 543)
            (<escaped-hash-word> . 543) (<literal> . 543)
            (<string> . 543) (<keyword> . 543) (:true . 543)
            (:false . 543) (<list-open> . 543) (<vector-open> . 543)
            (:&rest . 543) (:&key . 543) (<rcbracket> . 543)
            (:parsed-literal . 543) (:parsed-case-body . 543)
            (:parsed-body . 543) (:parsed-expression . 543)
            (:parsed-variable . 543) (<var-sep> . 543)
            (<statement-sep> . 543) (<seal-word> . 543)
            (<generic-function-defining-word> . 543)
            (<method-defining-word> . 543)
            (<simple-intermediate-word> . 543)
            (<expr-intermediate-word> . 543)
            (<details-intermediate-word> . 543)
            (<simple-begin-word> . 543) (<expr-begin-word> . 543)
            (<details-begin-word> . 543)
            (<fragment-local-declaration-word> . 543)
            (<fragment-function-word> . 543)
            (<fragment-define-bindings-and-begin-word> . 543)
            (<fragment-define-and-begin-word> . 543)
            (<fragment-begin-word> . 543) (:macro . 543)
            (:method . 543) (:local . 543) (:let . 543)
            (:handler . 543) (:generic . 543) (:define . 543)
            (:&all-keys . 543) (:&next . 543) (<unary-operator> . 543)
            (<var-type-sep> . 543) (<dot> . 543)
            (<escaped-substitution> . 543) (<query-equal> . 543)
            (<query-query> . 543) (<syntax-open> . 543)
            (<rbracket> . 543) (<rsbracket> . 543) (<splice> . 543))
           ((<lbracket> . -214) (<symbol> . -168)
            (<defining-word> . -182) (<fragment-begin-word> . -190)
            (<fragment-define-word> . -152)
            (<fragment-define-and-begin-word> . -207)
            (<fragment-define-bindings-word> . -204)
            (<fragment-define-bindings-and-begin-word> . -203)
            (<fragment-function-word> . -213)
            (<fragment-local-declaration-word> . -186)
            (<details-begin-word> . -156) (<expr-begin-word> . -150)
            (<simple-begin-word> . -195)
            (<details-intermediate-word> . -174)
            (<expr-intermediate-word> . -170)
            (<simple-intermediate-word> . -158)
            (<method-defining-word> . -146)
            (<generic-function-defining-word> . -193)
            (<seal-word> . -145) (:parsed-name . -211))
           ((:end . 444) (<query> . 444) (<ellipsis> . 444)
            (<lbracket> . 444) (<lsbracket> . 444) (<lcbracket> . 444)
            (<symbol> . 444) (<defining-word> . 444)
            (<fragment-define-word> . 444)
            (<fragment-define-bindings-word> . 444)
            (<binary-operator> . 444) (<minus> . 444) (<binds> . 444)
            (<var-singleton-sep> . 444) (<becomes> . 444) (<not> . 444)
            (:parsed-name . 444) (:otherwise . 444) (<implies> . 444)
            (<escaped-hash-word> . 444) (<literal> . 444)
            (<string> . 444) (<keyword> . 444) (:true . 444)
            (:false . 444) (<list-open> . 444) (<vector-open> . 444)
            (:&rest . 444) (:&key . 444) (<rcbracket> . 444)
            (:parsed-literal . 444) (:parsed-case-body . 444)
            (:parsed-body . 444) (:parsed-expression . 444)
            (:parsed-variable . 444) (<var-sep> . 444)
            (<statement-sep> . 444) (<seal-word> . 444)
            (<generic-function-defining-word> . 444)
            (<method-defining-word> . 444)
            (<simple-intermediate-word> . 444)
            (<expr-intermediate-word> . 444)
            (<details-intermediate-word> . 444)
            (<simple-begin-word> . 444) (<expr-begin-word> . 444)
            (<details-begin-word> . 444)
            (<fragment-local-declaration-word> . 444)
            (<fragment-function-word> . 444)
            (<fragment-define-bindings-and-begin-word> . 444)
            (<fragment-define-and-begin-word> . 444)
            (<fragment-begin-word> . 444) (:macro . 444)
            (:method . 444) (:local . 444) (:let . 444)
            (:handler . 444) (:generic . 444) (:define . 444)
            (:&all-keys . 444) (:&next . 444) (<unary-operator> . 444)
            (<var-type-sep> . 444) (<dot> . 444)
            (<escaped-substitution> . 444) (<query-equal> . 444)
            (<query-query> . 444) (<syntax-open> . 444)
            (<rbracket> . 444) (<rsbracket> . 444) (<splice> . 444))
           ((<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<keyword> . -221) (<unary-operator> . -65) (<minus> . -64)
            (<not> . -44) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((<ellipsis> . -217) (<statement-sep> . -175)
            (<var-sep> . -183) (<binary-operator> . -178)
            (<binds> . -210) (<var-singleton-sep> . -165)
            (<becomes> . -187) (<minus> . -206))
           ((<ellipsis> . -218))
           ((:parsed-literal . 488) (:parsed-case-body . 488)
            (:parsed-body . 488) (:parsed-expression . 488)
            (:parsed-variable . 488) (<minus> . 488) (<becomes> . 488)
            (<var-singleton-sep> . 488) (<binds> . 488)
            (<binary-operator> . 488) (<var-sep> . 488)
            (<statement-sep> . 488) (:parsed-name . 488)
            (<seal-word> . 488)
            (<generic-function-defining-word> . 488)
            (<method-defining-word> . 488)
            (<simple-intermediate-word> . 488)
            (<expr-intermediate-word> . 488)
            (<details-intermediate-word> . 488)
            (<simple-begin-word> . 488) (<expr-begin-word> . 488)
            (<details-begin-word> . 488)
            (<fragment-local-declaration-word> . 488)
            (<fragment-function-word> . 488)
            (<fragment-define-bindings-and-begin-word> . 488)
            (<fragment-define-bindings-word> . 488)
            (<fragment-define-and-begin-word> . 488)
            (<fragment-define-word> . 488)
            (<fragment-begin-word> . 488) (<defining-word> . 488)
            (<symbol> . 488) (:otherwise . 488) (:macro . 488)
            (:method . 488) (:local . 488) (:let . 488)
            (:handler . 488) (:generic . 488) (:end . 488)
            (:define . 488) (:&all-keys . 488) (:&key . 488)
            (:&rest . 488) (:&next . 488) (:false . 488) (:true . 488)
            (<not> . 488) (<unary-operator> . 488) (<literal> . 488)
            (<keyword> . 488) (<implies> . 488) (<ellipsis> . 488)
            (<var-type-sep> . 488) (<dot> . 488)
            (<escaped-substitution> . 488) (<string> . 488)
            (<query> . 488) (<query-equal> . 488) (<query-query> . 488)
            (<syntax-open> . 488) (<vector-open> . 488)
            (<list-open> . 488) (<lcbracket> . 488) (<lsbracket> . 488)
            (<lbracket> . 488) (<rcbracket> . 488) (<rbracket> . 488)
            (<rsbracket> . 488))
           ((<rsbracket> . 487) (<rbracket> . 487) (<rcbracket> . 487)
            (<lbracket> . 487) (<lsbracket> . 487) (<lcbracket> . 487)
            (<list-open> . 487) (<vector-open> . 487)
            (<syntax-open> . 487) (<query-query> . 487)
            (<query-equal> . 487) (<query> . 487) (<string> . 487)
            (<escaped-substitution> . 487) (<dot> . 487)
            (<var-type-sep> . 487) (<ellipsis> . 487) (<implies> . 487)
            (<keyword> . 487) (<literal> . 487)
            (<unary-operator> . 487) (<not> . 487) (:true . 487)
            (:false . 487) (:&next . 487) (:&rest . 487) (:&key . 487)
            (:&all-keys . 487) (:define . 487) (:end . 487)
            (:generic . 487) (:handler . 487) (:let . 487)
            (:local . 487) (:method . 487) (:macro . 487)
            (:otherwise . 487) (<symbol> . 487) (<defining-word> . 487)
            (<fragment-begin-word> . 487)
            (<fragment-define-word> . 487)
            (<fragment-define-and-begin-word> . 487)
            (<fragment-define-bindings-word> . 487)
            (<fragment-define-bindings-and-begin-word> . 487)
            (<fragment-function-word> . 487)
            (<fragment-local-declaration-word> . 487)
            (<details-begin-word> . 487) (<expr-begin-word> . 487)
            (<simple-begin-word> . 487)
            (<details-intermediate-word> . 487)
            (<expr-intermediate-word> . 487)
            (<simple-intermediate-word> . 487)
            (<method-defining-word> . 487)
            (<generic-function-defining-word> . 487)
            (<seal-word> . 487) (:parsed-name . 487)
            (<statement-sep> . 487) (<var-sep> . 487)
            (<binary-operator> . 487) (<binds> . 487)
            (<var-singleton-sep> . 487) (<becomes> . 487)
            (<minus> . 487) (:parsed-variable . 487)
            (:parsed-expression . 487) (:parsed-body . 487)
            (:parsed-case-body . 487) (:parsed-literal . 487))
           ((<becomes> . 605) (<var-singleton-sep> . 605)
            (<binds> . 605) (<minus> . 605) (<binary-operator> . 605)
            (:end . 605) (<statement-sep> . 605) (<implies> . 605)
            (<var-sep> . 605) (<rbracket> . 605) (<symbol> . 605)
            (:parsed-name . 605) (<simple-intermediate-word> . 605)
            (<expr-intermediate-word> . 605)
            (<details-intermediate-word> . 605) (<rcbracket> . 605)
            (<rsbracket> . 605) (<lcbracket> . 605) (<keyword> . 605))
           ((<binary-operator> . -245) (<minus> . -244)
            (<binds> . -246) (<var-singleton-sep> . -247)
            (<becomes> . -243) (:end . 101) (<statement-sep> . 101)
            (<implies> . 101) (<var-sep> . 101) (<rbracket> . 101)
            (<symbol> . 101) (:parsed-name . 101)
            (<simple-intermediate-word> . 101)
            (<expr-intermediate-word> . 101)
            (<details-intermediate-word> . 101) (<rcbracket> . 101)
            (<rsbracket> . 101) (<lcbracket> . 101) (<keyword> . 101))
           ((<becomes> . 105) (<var-singleton-sep> . 105)
            (<binds> . 105) (<minus> . 105) (<binary-operator> . 105)
            (:end . 105) (<statement-sep> . 105) (<implies> . 105)
            (<var-sep> . 105) (<rbracket> . 105) (<symbol> . 105)
            (:parsed-name . 105) (<simple-intermediate-word> . 105)
            (<expr-intermediate-word> . 105)
            (<details-intermediate-word> . 105) (<rcbracket> . 105)
            (<rsbracket> . 105) (<lcbracket> . 105) (<keyword> . 105))
           ((<becomes> . 106) (<var-singleton-sep> . 106)
            (<binds> . 106) (<minus> . 106) (<binary-operator> . 106)
            (:end . 106) (<statement-sep> . 106) (<implies> . 106)
            (<var-sep> . 106) (<rbracket> . 106) (<symbol> . 106)
            (:parsed-name . 106) (<simple-intermediate-word> . 106)
            (<expr-intermediate-word> . 106)
            (<details-intermediate-word> . 106) (<rcbracket> . 106)
            (<rsbracket> . 106) (<lcbracket> . 106) (<keyword> . 106))
           ((<rbracket> . -224))
           ((<statement-sep> . -175) (<var-sep> . -183)
            (<binary-operator> . -178) (<binds> . -210)
            (<var-singleton-sep> . -165) (<becomes> . -187)
            (<minus> . -206))
           ((<ellipsis> . -226))
           ((<rsbracket> . 498) (<rbracket> . 498) (<rcbracket> . 498)
            (<lbracket> . 498) (<lsbracket> . 498) (<lcbracket> . 498)
            (<list-open> . 498) (<vector-open> . 498)
            (<syntax-open> . 498) (<query-query> . 498)
            (<query-equal> . 498) (<query> . 498) (<string> . 498)
            (<escaped-substitution> . 498) (<dot> . 498)
            (<var-type-sep> . 498) (<ellipsis> . 498) (<implies> . 498)
            (<keyword> . 498) (<literal> . 498)
            (<unary-operator> . 498) (<not> . 498) (:true . 498)
            (:false . 498) (:&next . 498) (:&rest . 498) (:&key . 498)
            (:&all-keys . 498) (:define . 498) (:end . 498)
            (:generic . 498) (:handler . 498) (:let . 498)
            (:local . 498) (:method . 498) (:macro . 498)
            (:otherwise . 498) (<symbol> . 498) (<defining-word> . 498)
            (<fragment-begin-word> . 498)
            (<fragment-define-word> . 498)
            (<fragment-define-and-begin-word> . 498)
            (<fragment-define-bindings-word> . 498)
            (<fragment-define-bindings-and-begin-word> . 498)
            (<fragment-function-word> . 498)
            (<fragment-local-declaration-word> . 498)
            (<details-begin-word> . 498) (<expr-begin-word> . 498)
            (<simple-begin-word> . 498)
            (<details-intermediate-word> . 498)
            (<expr-intermediate-word> . 498)
            (<simple-intermediate-word> . 498)
            (<method-defining-word> . 498)
            (<generic-function-defining-word> . 498)
            (<seal-word> . 498) (:parsed-name . 498)
            (<statement-sep> . 498) (<var-sep> . 498)
            (<binary-operator> . 498) (<binds> . 498)
            (<var-singleton-sep> . 498) (<becomes> . 498)
            (<minus> . 498) (:parsed-variable . 498)
            (:parsed-expression . 498) (:parsed-body . 498)
            (:parsed-case-body . 498) (:parsed-literal . 498))
           ((<rsbracket> . -242))
           ((<implies> . 140) (<var-sep> . 140) (<rcbracket> . 140)
            (<rbracket> . 140) (<dot> . 140) (<rsbracket> . 140))
           ((<implies> . 139) (<var-sep> . 139) (<rcbracket> . 139)
            (<rbracket> . 139) (<dot> . 139) (<rsbracket> . 139))
           ((<var-sep> . 599) (<dot> . 599) (<rbracket> . 599)
            (<rsbracket> . 599))
           ((<var-sep> . -234) (<rsbracket> . 270))
           ((<implies> . 550) (<var-sep> . 550) (<rcbracket> . 550)
            (<rbracket> . 550) (<dot> . 550) (<rsbracket> . 550))
           ((<rsbracket> . 602) (<details-intermediate-word> . 602)
            (<expr-intermediate-word> . 602)
            (<simple-intermediate-word> . 602) (<rcbracket> . 602)
            (:parsed-name . 602) (<symbol> . 602) (<rbracket> . 602)
            (<var-sep> . 602) (<implies> . 602) (<statement-sep> . 602)
            (:end . 602) (<binary-operator> . 602) (<minus> . 602)
            (<binds> . 602) (<var-singleton-sep> . 602)
            (<becomes> . 602) (<lbracket> . 602) (<lsbracket> . 602)
            (<dot> . 602) (<string> . 602) (<keyword> . 602)
            (<lcbracket> . 602))
           ((<keyword> . -228) (:parsed-expression . -232)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (<string> . -53))
           ((<var-sep> . 600) (<rsbracket> . 600) (<dot> . 600)
            (<rbracket> . 600))
           ((<rbracket> . -241))
           ((<var-sep> . -234) (<rbracket> . 270) (<dot> . -238))
           ((<keyword> . -228) (:parsed-expression . -232)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (<string> . -53))
           ((<rbracket> . -240))
           ((<dot> . 136) (<lsbracket> . 136) (<lbracket> . 136)
            (<becomes> . 136) (<var-singleton-sep> . 136)
            (<binds> . 136) (<minus> . 136) (<binary-operator> . 136)
            (:end . 136) (<statement-sep> . 136) (<implies> . 136)
            (<var-sep> . 136) (<rbracket> . 136) (<symbol> . 136)
            (:parsed-name . 136) (<rcbracket> . 136)
            (<simple-intermediate-word> . 136)
            (<expr-intermediate-word> . 136)
            (<details-intermediate-word> . 136) (<rsbracket> . 136)
            (<lcbracket> . 136) (<keyword> . 136))
           ((<dot> . 137) (<lsbracket> . 137) (<lbracket> . 137)
            (<becomes> . 137) (<var-singleton-sep> . 137)
            (<binds> . 137) (<minus> . 137) (<binary-operator> . 137)
            (:end . 137) (<statement-sep> . 137) (<implies> . 137)
            (<var-sep> . 137) (<rbracket> . 137) (<symbol> . 137)
            (:parsed-name . 137) (<rcbracket> . 137)
            (<simple-intermediate-word> . 137)
            (<expr-intermediate-word> . 137)
            (<details-intermediate-word> . 137) (<rsbracket> . 137)
            (<lcbracket> . 137) (<keyword> . 137))
           ((<dot> . 138) (<lsbracket> . 138) (<lbracket> . 138)
            (<becomes> . 138) (<var-singleton-sep> . 138)
            (<binds> . 138) (<minus> . 138) (<binary-operator> . 138)
            (:end . 138) (<statement-sep> . 138) (<implies> . 138)
            (<var-sep> . 138) (<rbracket> . 138) (<symbol> . 138)
            (:parsed-name . 138) (<rcbracket> . 138)
            (<simple-intermediate-word> . 138)
            (<expr-intermediate-word> . 138)
            (<details-intermediate-word> . 138) (<rsbracket> . 138)
            (<lcbracket> . 138) (<keyword> . 138))
           ((<not> . 117) (<minus> . 117) (<unary-operator> . 117)
            (<syntax-open> . 117) (:parsed-expression . 117)
            (:parsed-body . 117) (:parsed-statement . 117)
            (:macro-case . 117)
            (<fragment-define-bindings-and-begin-word> . 117)
            (<fragment-define-and-begin-word> . 117)
            (<fragment-begin-word> . 117) (<simple-begin-word> . 117)
            (<expr-begin-word> . 117) (<details-begin-word> . 117)
            (:method . 117) (<lbracket> . 117) (:parsed-variable . 117)
            (:parsed-name . 117)
            (<fragment-define-bindings-word> . 117)
            (<fragment-define-word> . 117) (<ellipsis> . 117)
            (<generic-function-defining-word> . 117) (:generic . 117)
            (<method-defining-word> . 117) (<defining-word> . 117)
            (<symbol> . 117) (:parsed-literal . 117)
            (<vector-open> . 117) (<list-open> . 117) (:false . 117)
            (:true . 117) (<string> . 117) (<literal> . 117)
            (<fragment-function-word> . 117) (<keyword> . 117))
           ((<not> . 114) (<minus> . 114) (<unary-operator> . 114)
            (<syntax-open> . 114) (:parsed-expression . 114)
            (:parsed-body . 114) (:parsed-statement . 114)
            (:macro-case . 114)
            (<fragment-define-bindings-and-begin-word> . 114)
            (<fragment-define-and-begin-word> . 114)
            (<fragment-begin-word> . 114) (<simple-begin-word> . 114)
            (<expr-begin-word> . 114) (<details-begin-word> . 114)
            (:method . 114) (<lbracket> . 114) (:parsed-variable . 114)
            (:parsed-name . 114)
            (<fragment-define-bindings-word> . 114)
            (<fragment-define-word> . 114) (<ellipsis> . 114)
            (<generic-function-defining-word> . 114) (:generic . 114)
            (<method-defining-word> . 114) (<defining-word> . 114)
            (<symbol> . 114) (:parsed-literal . 114)
            (<vector-open> . 114) (<list-open> . 114) (:false . 114)
            (:true . 114) (<string> . 114) (<literal> . 114)
            (<fragment-function-word> . 114) (<keyword> . 114))
           ((<not> . 113) (<minus> . 113) (<unary-operator> . 113)
            (<syntax-open> . 113) (:parsed-expression . 113)
            (:parsed-body . 113) (:parsed-statement . 113)
            (:macro-case . 113)
            (<fragment-define-bindings-and-begin-word> . 113)
            (<fragment-define-and-begin-word> . 113)
            (<fragment-begin-word> . 113) (<simple-begin-word> . 113)
            (<expr-begin-word> . 113) (<details-begin-word> . 113)
            (:method . 113) (<lbracket> . 113) (:parsed-variable . 113)
            (:parsed-name . 113)
            (<fragment-define-bindings-word> . 113)
            (<fragment-define-word> . 113) (<ellipsis> . 113)
            (<generic-function-defining-word> . 113) (:generic . 113)
            (<method-defining-word> . 113) (<defining-word> . 113)
            (<symbol> . 113) (:parsed-literal . 113)
            (<vector-open> . 113) (<list-open> . 113) (:false . 113)
            (:true . 113) (<string> . 113) (<literal> . 113)
            (<fragment-function-word> . 113) (<keyword> . 113))
           ((<not> . 115) (<minus> . 115) (<unary-operator> . 115)
            (<syntax-open> . 115) (:parsed-expression . 115)
            (:parsed-body . 115) (:parsed-statement . 115)
            (:macro-case . 115)
            (<fragment-define-bindings-and-begin-word> . 115)
            (<fragment-define-and-begin-word> . 115)
            (<fragment-begin-word> . 115) (<simple-begin-word> . 115)
            (<expr-begin-word> . 115) (<details-begin-word> . 115)
            (:method . 115) (<lbracket> . 115) (:parsed-variable . 115)
            (:parsed-name . 115)
            (<fragment-define-bindings-word> . 115)
            (<fragment-define-word> . 115) (<ellipsis> . 115)
            (<generic-function-defining-word> . 115) (:generic . 115)
            (<method-defining-word> . 115) (<defining-word> . 115)
            (<symbol> . 115) (:parsed-literal . 115)
            (<vector-open> . 115) (<list-open> . 115) (:false . 115)
            (:true . 115) (<string> . 115) (<literal> . 115)
            (<fragment-function-word> . 115) (<keyword> . 115))
           ((<not> . 116) (<minus> . 116) (<unary-operator> . 116)
            (<syntax-open> . 116) (:parsed-expression . 116)
            (:parsed-body . 116) (:parsed-statement . 116)
            (:macro-case . 116)
            (<fragment-define-bindings-and-begin-word> . 116)
            (<fragment-define-and-begin-word> . 116)
            (<fragment-begin-word> . 116) (<simple-begin-word> . 116)
            (<expr-begin-word> . 116) (<details-begin-word> . 116)
            (:method . 116) (<lbracket> . 116) (:parsed-variable . 116)
            (:parsed-name . 116)
            (<fragment-define-bindings-word> . 116)
            (<fragment-define-word> . 116) (<ellipsis> . 116)
            (<generic-function-defining-word> . 116) (:generic . 116)
            (<method-defining-word> . 116) (<defining-word> . 116)
            (<symbol> . 116) (:parsed-literal . 116)
            (<vector-open> . 116) (<list-open> . 116) (:false . 116)
            (:true . 116) (<string> . 116) (<literal> . 116)
            (<fragment-function-word> . 116) (<keyword> . 116))
           ((<keyword> . -221) (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<unary-operator> . -65) (<minus> . -64) (<not> . -44)
            (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((<becomes> . 606) (<var-singleton-sep> . 606)
            (<binds> . 606) (<minus> . 606) (<binary-operator> . 606)
            (:end . 606) (<statement-sep> . 606) (<implies> . 606)
            (<var-sep> . 606) (<rbracket> . 606) (<symbol> . 606)
            (:parsed-name . 606) (<simple-intermediate-word> . 606)
            (<expr-intermediate-word> . 606)
            (<details-intermediate-word> . 606) (<rcbracket> . 606)
            (<lcbracket> . 606) (<keyword> . 606) (<rsbracket> . 606))
           ((:end . -579))
           ((<rcbracket> . 301) (<rsbracket> . 301) (<rbracket> . 301)
            (:end . 301) (<statement-sep> . 301)
            (<simple-intermediate-word> . 301)
            (<expr-intermediate-word> . 301)
            (<details-intermediate-word> . 301))
           ((<rcbracket> . 303) (<rsbracket> . 303) (<rbracket> . 303)
            (:end . 303) (<statement-sep> . 303)
            (<simple-intermediate-word> . 303)
            (<expr-intermediate-word> . 303)
            (<details-intermediate-word> . 303))
           ((:parsed-name . 617) (<symbol> . 617) (:generic . 617)
            (<method-defining-word> . 617) (:method . 617)
            (<generic-function-defining-word> . 617)
            (<defining-word> . 617)
            (<fragment-define-and-begin-word> . 617)
            (<fragment-define-word> . 617)
            (<fragment-define-bindings-and-begin-word> . 617)
            (<fragment-define-bindings-word> . 617)
            (<macro-defining-word> . 617) (:macro . 617)
            (<clauses-defining-word> . 617))
           ((:generic . 36) (<method-defining-word> . 36)
            (:method . 36) (<generic-function-defining-word> . 36)
            (<defining-word> . 36)
            (<fragment-define-and-begin-word> . 36)
            (<fragment-define-word> . 36)
            (<fragment-define-bindings-and-begin-word> . 36)
            (<fragment-define-bindings-word> . 36)
            (<macro-defining-word> . 36) (:macro . 36)
            (<clauses-defining-word> . 36))
           ((<symbol> . -258) (:parsed-name . -257) (:generic . 37)
            (<method-defining-word> . 37) (:method . 37)
            (<generic-function-defining-word> . 37)
            (<defining-word> . 37)
            (<fragment-define-and-begin-word> . 37)
            (<fragment-define-word> . 37)
            (<fragment-define-bindings-and-begin-word> . 37)
            (<fragment-define-bindings-word> . 37)
            (<macro-defining-word> . 37) (:macro . 37)
            (<clauses-defining-word> . 37))
           ((<clauses-defining-word> . -273) (:macro . -267)
            (<macro-defining-word> . -262)
            (<fragment-define-bindings-word> . -272)
            (<fragment-define-bindings-and-begin-word> . -260)
            (<fragment-define-word> . -269)
            (<fragment-define-and-begin-word> . -263)
            (<defining-word> . -265) (:generic . -33)
            (<generic-function-defining-word> . -50) (:method . -259)
            (<method-defining-word> . -268))
           ((:parsed-name . 544) (<symbol> . 544) (:generic . 544)
            (<method-defining-word> . 544) (:method . 544)
            (<generic-function-defining-word> . 544)
            (<defining-word> . 544)
            (<fragment-define-and-begin-word> . 544)
            (<fragment-define-word> . 544)
            (<fragment-define-bindings-and-begin-word> . 544)
            (<fragment-define-bindings-word> . 544)
            (<macro-defining-word> . 544) (:macro . 544)
            (<clauses-defining-word> . 544))
           ((:parsed-name . 38) (<symbol> . 38) (:generic . 38)
            (<method-defining-word> . 38) (:method . 38)
            (<generic-function-defining-word> . 38)
            (<defining-word> . 38)
            (<fragment-define-and-begin-word> . 38)
            (<fragment-define-word> . 38)
            (<fragment-define-bindings-and-begin-word> . 38)
            (<fragment-define-bindings-word> . 38)
            (<macro-defining-word> . 38) (:macro . 38)
            (<clauses-defining-word> . 38))
           ((:parsed-variable . 39) (:parsed-name . 39)
            (<fragment-define-bindings-word> . 39)
            (<fragment-define-word> . 39) (<ellipsis> . 39)
            (<generic-function-defining-word> . 39) (:generic . 39)
            (<method-defining-word> . 39) (<defining-word> . 39)
            (<symbol> . 39))
           ((:parsed-local-declaration . 4)
            (<fragment-local-declaration-word> . 4) (:local . 4)
            (:let . 4) (:parsed-defining-form . 4) (<seal-word> . 4)
            (:define . 4) (<var-sep> . 4) (<implies> . 4)
            (<syntax-open> . 4) (:parsed-literal . 4)
            (:parsed-case-body . 4) (:parsed-body . 4)
            (:parsed-expression . 4) (:parsed-variable . 4)
            (:parsed-name . 4) (<query-equal> . 4) (<query-query> . 4)
            (<query> . 4) (<ellipsis> . 4) (<var-type-sep> . 4)
            (:otherwise . 4) (:&all-keys . 4) (:&key . 4) (:&rest . 4)
            (:&next . 4) (<dot> . 4) (<fragment-function-word> . 4)
            (<lcbracket> . 4) (<lsbracket> . 4) (<lbracket> . 4)
            (<not> . 4) (<becomes> . 4) (<var-singleton-sep> . 4)
            (<binds> . 4) (<minus> . 4) (<binary-operator> . 4)
            (<fragment-define-bindings-word> . 4)
            (<fragment-define-word> . 4) (<defining-word> . 4)
            (<symbol> . 4) (<vector-open> . 4) (<list-open> . 4)
            (:false . 4) (:true . 4) (<keyword> . 4) (<string> . 4)
            (<literal> . 4) (:method . 4) (:parsed-statement . 4)
            (:macro-case . 4)
            (<fragment-define-bindings-and-begin-word> . 4)
            (<fragment-define-and-begin-word> . 4)
            (<fragment-begin-word> . 4) (<simple-begin-word> . 4)
            (<expr-begin-word> . 4) (<details-begin-word> . 4)
            (:end . 4) (<statement-sep> . 4) (<rbracket> . 4)
            (<rsbracket> . 4) (<simple-intermediate-word> . 4)
            (<expr-intermediate-word> . 4)
            (<details-intermediate-word> . 4) (<rcbracket> . 4))
           ((:end . 297) (<statement-sep> . 297) (<rbracket> . 297)
            (<rsbracket> . 297) (<simple-intermediate-word> . 297)
            (<expr-intermediate-word> . 297)
            (<details-intermediate-word> . 297) (<rcbracket> . 297)
            (<var-sep> . 308) (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (<seal-word> . -4) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<implies> . -110) (<literal> . -124) (<string> . -128)
            (<keyword> . -112) (:true . -87) (:false . -92)
            (<list-open> . -116) (<vector-open> . -122)
            (<symbol> . -105) (<defining-word> . -117)
            (<fragment-define-word> . -95)
            (<fragment-define-bindings-word> . -132)
            (<binary-operator> . -113) (<minus> . -134)
            (<binds> . -136) (<var-singleton-sep> . -104)
            (<becomes> . -120) (<not> . -119) (:let . -19)
            (:local . -29) (<fragment-local-declaration-word> . -45)
            (:parsed-local-declaration . -69) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<lbracket> . -99) (<lsbracket> . -100)
            (<lcbracket> . -107) (<dot> . -101) (:&next . -125)
            (:&rest . -135) (:&key . -85) (:&all-keys . -111)
            (:otherwise . -88) (<var-type-sep> . -114)
            (<ellipsis> . -131) (<query> . -97) (<query-query> . -139)
            (<query-equal> . -90) (:parsed-name . -137)
            (:parsed-variable . -93) (:parsed-expression . -123)
            (:parsed-body . -130) (:parsed-case-body . -89)
            (:parsed-literal . -129) (:define . -31)
            (:parsed-defining-form . -23))
           ((:parsed-name . 364) (<seal-word> . 364)
            (<generic-function-defining-word> . 364)
            (<method-defining-word> . 364)
            (<simple-intermediate-word> . 364)
            (<expr-intermediate-word> . 364)
            (<details-intermediate-word> . 364)
            (<simple-begin-word> . 364) (<expr-begin-word> . 364)
            (<details-begin-word> . 364)
            (<fragment-local-declaration-word> . 364)
            (<fragment-function-word> . 364)
            (<fragment-define-bindings-and-begin-word> . 364)
            (<fragment-define-bindings-word> . 364)
            (<fragment-define-and-begin-word> . 364)
            (<fragment-define-word> . 364)
            (<fragment-begin-word> . 364) (<defining-word> . 364)
            (<symbol> . 364))
           ((<details-begin-word> . 2) (<expr-begin-word> . 2)
            (<simple-begin-word> . 2) (<fragment-begin-word> . 2)
            (<fragment-define-and-begin-word> . 2)
            (<fragment-define-bindings-and-begin-word> . 2)
            (:macro-case . 2) (:parsed-statement . 2) (:method . 2)
            (<literal> . 2) (<string> . 2) (<keyword> . 2) (:true . 2)
            (:false . 2) (<list-open> . 2) (<vector-open> . 2)
            (<symbol> . 2) (<defining-word> . 2)
            (<fragment-define-word> . 2)
            (<fragment-define-bindings-word> . 2)
            (<binary-operator> . 2) (<minus> . 2) (<binds> . 2)
            (<var-singleton-sep> . 2) (<becomes> . 2) (<not> . 2)
            (<lbracket> . 2) (<lsbracket> . 2) (<lcbracket> . 2)
            (<fragment-function-word> . 2) (<dot> . 2) (:&next . 2)
            (:&rest . 2) (:&key . 2) (:&all-keys . 2) (:otherwise . 2)
            (<var-type-sep> . 2) (<ellipsis> . 2) (<query> . 2)
            (<query-query> . 2) (<query-equal> . 2) (:parsed-name . 2)
            (:parsed-variable . 2) (:parsed-expression . 2)
            (:parsed-body . 2) (:parsed-case-body . 2)
            (:parsed-literal . 2) (<syntax-open> . 2) (<implies> . 2)
            (<var-sep> . 2) (:define . 2) (<seal-word> . 2)
            (:parsed-defining-form . 2) (:let . 2) (:local . 2)
            (<fragment-local-declaration-word> . 2)
            (:parsed-local-declaration . 2) (<statement-sep> . 2)
            (:end . 2))
           ((<symbol> . -168) (<defining-word> . -182)
            (<fragment-begin-word> . -190)
            (<fragment-define-word> . -152)
            (<fragment-define-and-begin-word> . -207)
            (<fragment-define-bindings-word> . -204)
            (<fragment-define-bindings-and-begin-word> . -203)
            (<fragment-function-word> . -213)
            (<fragment-local-declaration-word> . -186)
            (<details-begin-word> . -156) (<expr-begin-word> . -150)
            (<simple-begin-word> . -195)
            (<details-intermediate-word> . -174)
            (<expr-intermediate-word> . -170)
            (<simple-intermediate-word> . -158)
            (<method-defining-word> . -146)
            (<generic-function-defining-word> . -193)
            (<seal-word> . -145) (:parsed-name . -211))
           ((<lbracket> . -615) (:&rest . -553) (:generic . -33)
            (<generic-function-defining-word> . -50) (<symbol> . -34)
            (<defining-word> . -42) (<method-defining-word> . -5)
            (<ellipsis> . -58) (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59)
            (:parsed-name . -66) (:parsed-variable . -14))
           ((:generic . -33) (<generic-function-defining-word> . -50)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59)
            (:parsed-name . -66) (:parsed-variable . -14))
           ((:parsed-name . 363) (<seal-word> . 363)
            (<generic-function-defining-word> . 363)
            (<method-defining-word> . 363)
            (<simple-intermediate-word> . 363)
            (<expr-intermediate-word> . 363)
            (<details-intermediate-word> . 363)
            (<simple-begin-word> . 363) (<expr-begin-word> . 363)
            (<details-begin-word> . 363)
            (<fragment-local-declaration-word> . 363)
            (<fragment-function-word> . 363)
            (<fragment-define-bindings-and-begin-word> . 363)
            (<fragment-define-bindings-word> . 363)
            (<fragment-define-and-begin-word> . 363)
            (<fragment-define-word> . 363)
            (<fragment-begin-word> . 363) (<defining-word> . 363)
            (<symbol> . 363))
           ((:parsed-variable . 40) (:parsed-name . 40)
            (<fragment-define-bindings-word> . 40)
            (<fragment-define-word> . 40) (<ellipsis> . 40)
            (<generic-function-defining-word> . 40) (:generic . 40)
            (<method-defining-word> . 40) (<defining-word> . 40)
            (<symbol> . 40))
           ((<details-begin-word> . 1) (<expr-begin-word> . 1)
            (<simple-begin-word> . 1) (<fragment-begin-word> . 1)
            (<fragment-define-and-begin-word> . 1)
            (<fragment-define-bindings-and-begin-word> . 1)
            (:macro-case . 1) (:parsed-statement . 1) (:method . 1)
            (<literal> . 1) (<string> . 1) (<keyword> . 1) (:true . 1)
            (:false . 1) (<list-open> . 1) (<vector-open> . 1)
            (<symbol> . 1) (<defining-word> . 1)
            (<fragment-define-word> . 1)
            (<fragment-define-bindings-word> . 1)
            (<binary-operator> . 1) (<minus> . 1) (<binds> . 1)
            (<var-singleton-sep> . 1) (<becomes> . 1) (<not> . 1)
            (<lbracket> . 1) (<lsbracket> . 1) (<lcbracket> . 1)
            (<fragment-function-word> . 1) (<dot> . 1) (:&next . 1)
            (:&rest . 1) (:&key . 1) (:&all-keys . 1) (:otherwise . 1)
            (<var-type-sep> . 1) (<ellipsis> . 1) (<query> . 1)
            (<query-query> . 1) (<query-equal> . 1) (:parsed-name . 1)
            (:parsed-variable . 1) (:parsed-expression . 1)
            (:parsed-body . 1) (:parsed-case-body . 1)
            (:parsed-literal . 1) (<syntax-open> . 1) (<implies> . 1)
            (<var-sep> . 1) (:define . 1) (<seal-word> . 1)
            (:parsed-defining-form . 1) (:let . 1) (:local . 1)
            (<fragment-local-declaration-word> . 1)
            (:parsed-local-declaration . 1) (<statement-sep> . 1)
            (:end . 1))
           ((:end . 290) (<var-sep> . 308)
            (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (<seal-word> . -4) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<implies> . -110) (<literal> . -124) (<string> . -128)
            (<keyword> . -112) (:true . -87) (:false . -92)
            (<list-open> . -116) (<vector-open> . -122)
            (<symbol> . -105) (<defining-word> . -117)
            (<fragment-define-word> . -95)
            (<fragment-define-bindings-word> . -132)
            (<binary-operator> . -113) (<minus> . -134)
            (<binds> . -136) (<var-singleton-sep> . -104)
            (<becomes> . -120) (<not> . -119) (:let . -19)
            (:local . -29) (<fragment-local-declaration-word> . -45)
            (:parsed-local-declaration . -69) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<lbracket> . -99) (<lsbracket> . -100)
            (<lcbracket> . -107) (<dot> . -101) (:&next . -125)
            (:&rest . -135) (:&key . -85) (:&all-keys . -111)
            (:otherwise . -88) (<var-type-sep> . -114)
            (<ellipsis> . -131) (<query> . -97) (<query-query> . -139)
            (<query-equal> . -90) (:parsed-name . -137)
            (:parsed-variable . -93) (:parsed-expression . -123)
            (:parsed-body . -130) (:parsed-case-body . -89)
            (:parsed-literal . -129) (:define . -31)
            (:parsed-defining-form . -23))
           ((:generic . -33) (<generic-function-defining-word> . -50)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59)
            (:parsed-name . -66) (:parsed-variable . -14))
           ((:parsed-local-declaration . 3)
            (<fragment-local-declaration-word> . 3) (:local . 3)
            (:let . 3) (:parsed-defining-form . 3) (<seal-word> . 3)
            (:define . 3) (<var-sep> . 3) (<implies> . 3)
            (<syntax-open> . 3) (:parsed-literal . 3)
            (:parsed-case-body . 3) (:parsed-body . 3)
            (:parsed-expression . 3) (:parsed-variable . 3)
            (:parsed-name . 3) (<query-equal> . 3) (<query-query> . 3)
            (<query> . 3) (<ellipsis> . 3) (<var-type-sep> . 3)
            (:otherwise . 3) (:&all-keys . 3) (:&key . 3) (:&rest . 3)
            (:&next . 3) (<dot> . 3) (<fragment-function-word> . 3)
            (<lcbracket> . 3) (<lsbracket> . 3) (<lbracket> . 3)
            (<not> . 3) (<becomes> . 3) (<var-singleton-sep> . 3)
            (<binds> . 3) (<minus> . 3) (<binary-operator> . 3)
            (<fragment-define-bindings-word> . 3)
            (<fragment-define-word> . 3) (<defining-word> . 3)
            (<symbol> . 3) (<vector-open> . 3) (<list-open> . 3)
            (:false . 3) (:true . 3) (<keyword> . 3) (<string> . 3)
            (<literal> . 3) (:method . 3) (:parsed-statement . 3)
            (:macro-case . 3)
            (<fragment-define-bindings-and-begin-word> . 3)
            (<fragment-define-and-begin-word> . 3)
            (<fragment-begin-word> . 3) (<simple-begin-word> . 3)
            (<expr-begin-word> . 3) (<details-begin-word> . 3)
            (:end . 3) (<statement-sep> . 3) (<rbracket> . 3)
            (<rsbracket> . 3) (<simple-intermediate-word> . 3)
            (<expr-intermediate-word> . 3)
            (<details-intermediate-word> . 3) (<rcbracket> . 3))
           ((<lbracket> . -275) (:generic . -33)
            (<generic-function-defining-word> . -50) (<symbol> . -34)
            (<defining-word> . -42) (<method-defining-word> . -5)
            (<ellipsis> . -58) (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59)
            (:parsed-name . -66) (:parsed-variable . -14))
           ((:define . 559) (<seal-word> . 559)
            (:parsed-defining-form . 559) (:let . 559) (:local . 559)
            (<fragment-local-declaration-word> . 559)
            (:parsed-local-declaration . 559) (<keyword> . 559)
            (<fragment-function-word> . 559) (<literal> . 559)
            (<string> . 559) (:true . 559) (:false . 559)
            (<list-open> . 559) (<vector-open> . 559)
            (:parsed-literal . 559) (<symbol> . 559)
            (<defining-word> . 559) (<method-defining-word> . 559)
            (:generic . 559) (<generic-function-defining-word> . 559)
            (<ellipsis> . 559) (<fragment-define-word> . 559)
            (<fragment-define-bindings-word> . 559)
            (:parsed-name . 559) (:parsed-variable . 559)
            (<lbracket> . 559) (:method . 559)
            (<details-begin-word> . 559) (<expr-begin-word> . 559)
            (<simple-begin-word> . 559) (<fragment-begin-word> . 559)
            (<fragment-define-and-begin-word> . 559)
            (<fragment-define-bindings-and-begin-word> . 559)
            (:macro-case . 559) (:parsed-statement . 559)
            (:parsed-body . 559) (:parsed-expression . 559)
            (<syntax-open> . 559) (<unary-operator> . 559)
            (<minus> . 559) (<not> . 559)
            (<details-intermediate-word> . 559)
            (<expr-intermediate-word> . 559)
            (<simple-intermediate-word> . 559) (:end . 559))
           ((:generic . -33) (<generic-function-defining-word> . -50)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59)
            (:parsed-name . -66) (:parsed-variable . -14))
           ((:end . 147) (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<seal-word> . -4) (<keyword> . -221)
            (<unary-operator> . -65) (<minus> . -64) (<not> . -44)
            (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52)
            (<details-intermediate-word> . -286)
            (<expr-intermediate-word> . -283)
            (<simple-intermediate-word> . -279) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:let . -19) (:local . -29)
            (<fragment-local-declaration-word> . -45)
            (:parsed-local-declaration . -69) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (:define . -31) (:parsed-defining-form . -23)
            (<string> . -53))
           ((<statement-sep> . 623) (:end . 623)
            (<simple-intermediate-word> . 623)
            (<expr-intermediate-word> . 623)
            (<details-intermediate-word> . 623))
           ((:end . 151) (<details-intermediate-word> . -286)
            (<expr-intermediate-word> . -283)
            (<simple-intermediate-word> . -279))
           ((<not> . 158) (<minus> . 158) (<unary-operator> . 158)
            (<syntax-open> . 158) (:parsed-expression . 158)
            (:parsed-body . 158) (:parsed-statement . 158)
            (:macro-case . 158)
            (<fragment-define-bindings-and-begin-word> . 158)
            (<fragment-define-and-begin-word> . 158)
            (<fragment-begin-word> . 158) (<simple-begin-word> . 158)
            (<expr-begin-word> . 158) (<details-begin-word> . 158)
            (:method . 158) (<lbracket> . 158) (:parsed-variable . 158)
            (:parsed-name . 158)
            (<fragment-define-bindings-word> . 158)
            (<fragment-define-word> . 158) (<ellipsis> . 158)
            (<generic-function-defining-word> . 158) (:generic . 158)
            (<method-defining-word> . 158) (<defining-word> . 158)
            (<symbol> . 158) (:parsed-literal . 158)
            (<vector-open> . 158) (<list-open> . 158) (:false . 158)
            (:true . 158) (<string> . 158) (<literal> . 158)
            (<fragment-function-word> . 158) (<keyword> . 158)
            (:parsed-local-declaration . 158)
            (<fragment-local-declaration-word> . 158) (:local . 158)
            (:let . 158) (:parsed-defining-form . 158)
            (<seal-word> . 158) (:define . 158)
            (<simple-intermediate-word> . 158)
            (<expr-intermediate-word> . 158)
            (<details-intermediate-word> . 158) (:end . 158))
           ((:end . 261) (<simple-intermediate-word> . 261)
            (<expr-intermediate-word> . 261)
            (<details-intermediate-word> . 261)
            (<statement-sep> . -637))
           ((<simple-intermediate-word> . 256)
            (<expr-intermediate-word> . 256)
            (<details-intermediate-word> . 256) (:end . 256)
            (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<seal-word> . -4) (<keyword> . -221)
            (<unary-operator> . -65) (<minus> . -64) (<not> . -44)
            (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:let . -19) (:local . -29)
            (<fragment-local-declaration-word> . -45)
            (:parsed-local-declaration . -69) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (:define . -31) (:parsed-defining-form . -23)
            (<string> . -53))
           ((<statement-sep> . 11) (:end . 11)
            (<simple-intermediate-word> . 11)
            (<expr-intermediate-word> . 11)
            (<details-intermediate-word> . 11))
           ((<lbracket> . 89) (:generic . -33)
            (<generic-function-defining-word> . -50) (<symbol> . -34)
            (<defining-word> . -42) (<method-defining-word> . -5)
            (<ellipsis> . -58) (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59)
            (:parsed-name . -66) (:parsed-variable . -14))
           ((:end . -690))
           ((<details-intermediate-word> . -286)
            (<expr-intermediate-word> . -283)
            (<simple-intermediate-word> . -279) (:end . 150))
           ((<lbracket> . 89) (:generic . -33)
            (<generic-function-defining-word> . -50) (<symbol> . -34)
            (<defining-word> . -42) (<method-defining-word> . -5)
            (<ellipsis> . -58) (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59)
            (:parsed-name . -66) (:parsed-variable . -14))
           ((:end . 148))
           ((<simple-intermediate-word> . 153)
            (<expr-intermediate-word> . 153)
            (<details-intermediate-word> . 153) (:end . 153))
           ((<statement-sep> . 12) (:end . 12)
            (<simple-intermediate-word> . 12)
            (<expr-intermediate-word> . 12)
            (<details-intermediate-word> . 12))
           ((<statement-sep> . 13) (:end . 13)
            (<simple-intermediate-word> . 13)
            (<expr-intermediate-word> . 13)
            (<details-intermediate-word> . 13))
           ((<rcbracket> . 73) (<details-intermediate-word> . 73)
            (<expr-intermediate-word> . 73)
            (<simple-intermediate-word> . 73) (<rsbracket> . 73)
            (<rbracket> . 73) (:end . 73) (<statement-sep> . 73))
           ((<rsbracket> . -293))
           ((<implies> . 344) (<syntax-open> . 344)
            (:parsed-literal . 344) (:parsed-case-body . 344)
            (:parsed-body . 344) (:parsed-expression . 344)
            (:parsed-variable . 344) (:parsed-name . 344)
            (<query-equal> . 344) (<query-query> . 344) (<query> . 344)
            (<ellipsis> . 344) (<var-type-sep> . 344)
            (:otherwise . 344) (:&all-keys . 344) (:&key . 344)
            (:&rest . 344) (:&next . 344) (<dot> . 344)
            (<fragment-function-word> . 344) (<lcbracket> . 344)
            (<lsbracket> . 344) (<lbracket> . 344) (<not> . 344)
            (<becomes> . 344) (<var-singleton-sep> . 344)
            (<binds> . 344) (<minus> . 344) (<binary-operator> . 344)
            (<fragment-define-bindings-word> . 344)
            (<fragment-define-word> . 344) (<defining-word> . 344)
            (<symbol> . 344) (<vector-open> . 344) (<list-open> . 344)
            (:false . 344) (:true . 344) (<keyword> . 344)
            (<string> . 344) (<literal> . 344) (:method . 344)
            (:parsed-statement . 344) (:macro-case . 344)
            (<fragment-define-bindings-and-begin-word> . 344)
            (<fragment-define-and-begin-word> . 344)
            (<fragment-begin-word> . 344) (<simple-begin-word> . 344)
            (<expr-begin-word> . 344) (<details-begin-word> . 344)
            (<var-sep> . 344) (:parsed-local-declaration . 344)
            (<fragment-local-declaration-word> . 344) (:local . 344)
            (:let . 344) (:parsed-defining-form . 344)
            (<seal-word> . 344) (:define . 344) (<statement-sep> . 344)
            (:end . 344) (<escaped-hash-word> . 344)
            (<rcbracket> . 344) (<rbracket> . 344) (<rsbracket> . 344)
            (<details-intermediate-word> . 344)
            (<expr-intermediate-word> . 344)
            (<simple-intermediate-word> . 344))
           ((<simple-intermediate-word> . 315)
            (<expr-intermediate-word> . 315)
            (<details-intermediate-word> . 315) (<rcbracket> . 315)
            (<rsbracket> . 315) (<rbracket> . 315) (:end . 315)
            (<statement-sep> . 315) (:define . 315) (<seal-word> . 315)
            (:parsed-defining-form . 315) (:let . 315) (:local . 315)
            (<fragment-local-declaration-word> . 315)
            (:parsed-local-declaration . 315) (<var-sep> . 315))
           ((<simple-intermediate-word> . 310)
            (<expr-intermediate-word> . 310)
            (<details-intermediate-word> . 310) (<rcbracket> . 310)
            (<rsbracket> . 310) (<rbracket> . 310) (:end . 310)
            (<statement-sep> . 310) (:define . 310) (<seal-word> . 310)
            (:parsed-defining-form . 310) (:let . 310) (:local . 310)
            (<fragment-local-declaration-word> . 310)
            (:parsed-local-declaration . 310) (<var-sep> . 310))
           ((<rbracket> . -301))
           ((<var-sep> . -234) (<dot> . -298) (<rbracket> . 270))
           ((<keyword> . -228) (:parsed-expression . -232)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (<string> . -53))
           ((<rbracket> . -300))
           ((<implies> . 342) (<syntax-open> . 342)
            (:parsed-literal . 342) (:parsed-case-body . 342)
            (:parsed-body . 342) (:parsed-expression . 342)
            (:parsed-variable . 342) (:parsed-name . 342)
            (<query-equal> . 342) (<query-query> . 342) (<query> . 342)
            (<ellipsis> . 342) (<var-type-sep> . 342)
            (:otherwise . 342) (:&all-keys . 342) (:&key . 342)
            (:&rest . 342) (:&next . 342) (<dot> . 342)
            (<fragment-function-word> . 342) (<lcbracket> . 342)
            (<lsbracket> . 342) (<lbracket> . 342) (<not> . 342)
            (<becomes> . 342) (<var-singleton-sep> . 342)
            (<binds> . 342) (<minus> . 342) (<binary-operator> . 342)
            (<fragment-define-bindings-word> . 342)
            (<fragment-define-word> . 342) (<defining-word> . 342)
            (<symbol> . 342) (<vector-open> . 342) (<list-open> . 342)
            (:false . 342) (:true . 342) (<keyword> . 342)
            (<string> . 342) (<literal> . 342) (:method . 342)
            (:parsed-statement . 342) (:macro-case . 342)
            (<fragment-define-bindings-and-begin-word> . 342)
            (<fragment-define-and-begin-word> . 342)
            (<fragment-begin-word> . 342) (<simple-begin-word> . 342)
            (<expr-begin-word> . 342) (<details-begin-word> . 342)
            (<var-sep> . 342) (:parsed-local-declaration . 342)
            (<fragment-local-declaration-word> . 342) (:local . 342)
            (:let . 342) (:parsed-defining-form . 342)
            (<seal-word> . 342) (:define . 342) (<statement-sep> . 342)
            (:end . 342) (<escaped-hash-word> . 342)
            (<rcbracket> . 342) (<rbracket> . 342) (<rsbracket> . 342)
            (<details-intermediate-word> . 342)
            (<expr-intermediate-word> . 342)
            (<simple-intermediate-word> . 342))
           ((<implies> . 343) (<syntax-open> . 343)
            (:parsed-literal . 343) (:parsed-case-body . 343)
            (:parsed-body . 343) (:parsed-expression . 343)
            (:parsed-variable . 343) (:parsed-name . 343)
            (<query-equal> . 343) (<query-query> . 343) (<query> . 343)
            (<ellipsis> . 343) (<var-type-sep> . 343)
            (:otherwise . 343) (:&all-keys . 343) (:&key . 343)
            (:&rest . 343) (:&next . 343) (<dot> . 343)
            (<fragment-function-word> . 343) (<lcbracket> . 343)
            (<lsbracket> . 343) (<lbracket> . 343) (<not> . 343)
            (<becomes> . 343) (<var-singleton-sep> . 343)
            (<binds> . 343) (<minus> . 343) (<binary-operator> . 343)
            (<fragment-define-bindings-word> . 343)
            (<fragment-define-word> . 343) (<defining-word> . 343)
            (<symbol> . 343) (<vector-open> . 343) (<list-open> . 343)
            (:false . 343) (:true . 343) (<keyword> . 343)
            (<string> . 343) (<literal> . 343) (:method . 343)
            (:parsed-statement . 343) (:macro-case . 343)
            (<fragment-define-bindings-and-begin-word> . 343)
            (<fragment-define-and-begin-word> . 343)
            (<fragment-begin-word> . 343) (<simple-begin-word> . 343)
            (<expr-begin-word> . 343) (<details-begin-word> . 343)
            (<var-sep> . 343) (:parsed-local-declaration . 343)
            (<fragment-local-declaration-word> . 343) (:local . 343)
            (:let . 343) (:parsed-defining-form . 343)
            (<seal-word> . 343) (:define . 343) (<statement-sep> . 343)
            (:end . 343) (<escaped-hash-word> . 343)
            (<rcbracket> . 343) (<rbracket> . 343) (<rsbracket> . 343)
            (<details-intermediate-word> . 343)
            (<expr-intermediate-word> . 343)
            (<simple-intermediate-word> . 343))
           ((<simple-intermediate-word> . 317)
            (<expr-intermediate-word> . 317)
            (<details-intermediate-word> . 317) (<rcbracket> . 317)
            (<rsbracket> . 317) (<rbracket> . 317) (:end . 317)
            (<statement-sep> . 317) (:define . 317) (<seal-word> . 317)
            (:parsed-defining-form . 317) (:let . 317) (:local . 317)
            (<fragment-local-declaration-word> . 317)
            (:parsed-local-declaration . 317) (<var-sep> . 317))
           ((<simple-intermediate-word> . 309)
            (<expr-intermediate-word> . 309)
            (<details-intermediate-word> . 309) (<rcbracket> . 309)
            (<rsbracket> . 309) (<rbracket> . 309) (:end . 309)
            (<statement-sep> . 309) (:define . 309) (<seal-word> . 309)
            (:parsed-defining-form . 309) (:let . 309) (:local . 309)
            (<fragment-local-declaration-word> . 309)
            (:parsed-local-declaration . 309) (<var-sep> . 309))
           ((<simple-intermediate-word> . 316)
            (<expr-intermediate-word> . 316)
            (<details-intermediate-word> . 316) (<rcbracket> . 316)
            (<rsbracket> . 316) (<rbracket> . 316) (:end . 316)
            (<statement-sep> . 316) (:define . 316) (<seal-word> . 316)
            (:parsed-defining-form . 316) (:let . 316) (:local . 316)
            (<fragment-local-declaration-word> . 316)
            (:parsed-local-declaration . 316) (<var-sep> . 316))
           ((<rbracket> . 294) (<rsbracket> . 294) (<rcbracket> . 294)
            (:end . 294))
           ((:end . -307) (<rcbracket> . -308)) ((<rcbracket> . -309))
           ((<implies> . 322) (<syntax-open> . 322)
            (:parsed-literal . 322) (:parsed-case-body . 322)
            (:parsed-body . 322) (:parsed-expression . 322)
            (:parsed-variable . 322) (:parsed-name . 322)
            (<query-equal> . 322) (<query-query> . 322) (<query> . 322)
            (<ellipsis> . 322) (<var-type-sep> . 322)
            (:otherwise . 322) (:&all-keys . 322) (:&key . 322)
            (:&rest . 322) (:&next . 322) (<dot> . 322)
            (<fragment-function-word> . 322) (<lcbracket> . 322)
            (<lsbracket> . 322) (<lbracket> . 322) (<not> . 322)
            (<becomes> . 322) (<var-singleton-sep> . 322)
            (<binds> . 322) (<minus> . 322) (<binary-operator> . 322)
            (<fragment-define-bindings-word> . 322)
            (<fragment-define-word> . 322) (<defining-word> . 322)
            (<symbol> . 322) (<vector-open> . 322) (<list-open> . 322)
            (:false . 322) (:true . 322) (<keyword> . 322)
            (<string> . 322) (<literal> . 322) (:method . 322)
            (:parsed-statement . 322) (:macro-case . 322)
            (<fragment-define-bindings-and-begin-word> . 322)
            (<fragment-define-and-begin-word> . 322)
            (<fragment-begin-word> . 322) (<simple-begin-word> . 322)
            (<expr-begin-word> . 322) (<details-begin-word> . 322)
            (<var-sep> . 322) (:parsed-local-declaration . 322)
            (<fragment-local-declaration-word> . 322) (:local . 322)
            (:let . 322) (:parsed-defining-form . 322)
            (<seal-word> . 322) (:define . 322) (<statement-sep> . 322)
            (:end . 322) (<rbracket> . 322) (<rsbracket> . 322)
            (<rcbracket> . 322) (<details-intermediate-word> . 322)
            (<expr-intermediate-word> . 322)
            (<simple-intermediate-word> . 322))
           ((<simple-intermediate-word> . 323)
            (<expr-intermediate-word> . 323)
            (<details-intermediate-word> . 323) (<rcbracket> . 323)
            (<rsbracket> . 323) (<rbracket> . 323) (:end . 323)
            (<statement-sep> . 323) (:define . 323) (<seal-word> . 323)
            (:parsed-defining-form . 323) (:let . 323) (:local . 323)
            (<fragment-local-declaration-word> . 323)
            (:parsed-local-declaration . 323) (<var-sep> . 323)
            (<details-begin-word> . 323) (<expr-begin-word> . 323)
            (<simple-begin-word> . 323) (<fragment-begin-word> . 323)
            (<fragment-define-and-begin-word> . 323)
            (<fragment-define-bindings-and-begin-word> . 323)
            (:macro-case . 323) (:parsed-statement . 323)
            (:method . 323) (<literal> . 323) (<string> . 323)
            (<keyword> . 323) (:true . 323) (:false . 323)
            (<list-open> . 323) (<vector-open> . 323) (<symbol> . 323)
            (<defining-word> . 323) (<fragment-define-word> . 323)
            (<fragment-define-bindings-word> . 323)
            (<binary-operator> . 323) (<minus> . 323) (<binds> . 323)
            (<var-singleton-sep> . 323) (<becomes> . 323) (<not> . 323)
            (<lbracket> . 323) (<lsbracket> . 323) (<lcbracket> . 323)
            (<fragment-function-word> . 323) (<dot> . 323)
            (:&next . 323) (:&rest . 323) (:&key . 323)
            (:&all-keys . 323) (:otherwise . 323)
            (<var-type-sep> . 323) (<ellipsis> . 323) (<query> . 323)
            (<query-query> . 323) (<query-equal> . 323)
            (:parsed-name . 323) (:parsed-variable . 323)
            (:parsed-expression . 323) (:parsed-body . 323)
            (:parsed-case-body . 323) (:parsed-literal . 323)
            (<syntax-open> . 323) (<implies> . 323))
           ((<rcbracket> . 293) (<rsbracket> . 293) (<rbracket> . 293)
            (:end . 293) (<var-sep> . 308)
            (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (<seal-word> . -4) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<implies> . -110) (<literal> . -124) (<string> . -128)
            (<keyword> . -112) (:true . -87) (:false . -92)
            (<list-open> . -116) (<vector-open> . -122)
            (<symbol> . -105) (<defining-word> . -117)
            (<fragment-define-word> . -95)
            (<fragment-define-bindings-word> . -132)
            (<binary-operator> . -113) (<minus> . -134)
            (<binds> . -136) (<var-singleton-sep> . -104)
            (<becomes> . -120) (<not> . -119) (:let . -19)
            (:local . -29) (<fragment-local-declaration-word> . -45)
            (:parsed-local-declaration . -69) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<lbracket> . -99) (<lsbracket> . -100)
            (<lcbracket> . -107) (<dot> . -101) (:&next . -125)
            (:&rest . -135) (:&key . -85) (:&all-keys . -111)
            (:otherwise . -88) (<var-type-sep> . -114)
            (<ellipsis> . -131) (<query> . -97) (<query-query> . -139)
            (<query-equal> . -90) (:parsed-name . -137)
            (:parsed-variable . -93) (:parsed-expression . -123)
            (:parsed-body . -130) (:parsed-case-body . -89)
            (:parsed-literal . -129) (:define . -31)
            (:parsed-defining-form . -23))
           ((:end . 296) (<rbracket> . 296) (<rsbracket> . 296)
            (<rcbracket> . 296))
           ((:parsed-variable . 98) (:parsed-name . 98)
            (<fragment-define-bindings-word> . 98)
            (<fragment-define-word> . 98) (<ellipsis> . 98)
            (<generic-function-defining-word> . 98) (:generic . 98)
            (<method-defining-word> . 98) (<defining-word> . 98)
            (<symbol> . 98) (<var-sep> . 98) (<rcbracket> . 98)
            (<details-intermediate-word> . 98)
            (<expr-intermediate-word> . 98)
            (<simple-intermediate-word> . 98) (<rsbracket> . 98)
            (<rbracket> . 98) (:end . 98) (<statement-sep> . 98)
            (:define . 98) (<seal-word> . 98)
            (:parsed-defining-form . 98) (:let . 98) (:local . 98)
            (<fragment-local-declaration-word> . 98)
            (:parsed-local-declaration . 98) (<literal> . 98)
            (<string> . 98) (<keyword> . 98) (:true . 98) (:false . 98)
            (<list-open> . 98) (<vector-open> . 98) (<not> . 98)
            (<lcbracket> . 98) (<fragment-function-word> . 98)
            (:&next . 98) (:&rest . 98) (:&key . 98) (:&all-keys . 98)
            (:otherwise . 98) (<var-type-sep> . 98) (<query> . 98)
            (<query-query> . 98) (<query-equal> . 98)
            (:parsed-expression . 98) (:parsed-body . 98)
            (:parsed-case-body . 98) (:parsed-literal . 98)
            (<syntax-open> . 98) (<implies> . 98)
            (<binary-operator> . 98) (<minus> . 98) (<binds> . 98)
            (<var-singleton-sep> . 98) (<becomes> . 98)
            (<lbracket> . 98) (<lsbracket> . 98) (<dot> . 98))
           ((:generic . -33) (<generic-function-defining-word> . -50)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59)
            (:parsed-name . -66) (:parsed-variable . -14))
           ((<var-sep> . 609) (<rcbracket> . 609)
            (<details-intermediate-word> . 609)
            (<expr-intermediate-word> . 609)
            (<simple-intermediate-word> . 609) (<rsbracket> . 609)
            (<rbracket> . 609) (:end . 609) (<statement-sep> . 609))
           ((:parsed-variable . 99) (:parsed-name . 99)
            (<fragment-define-bindings-word> . 99)
            (<fragment-define-word> . 99) (<ellipsis> . 99)
            (<generic-function-defining-word> . 99) (:generic . 99)
            (<method-defining-word> . 99) (<defining-word> . 99)
            (<symbol> . 99) (<var-sep> . 99) (<rcbracket> . 99)
            (<details-intermediate-word> . 99)
            (<expr-intermediate-word> . 99)
            (<simple-intermediate-word> . 99) (<rsbracket> . 99)
            (<rbracket> . 99) (:end . 99) (<statement-sep> . 99)
            (:define . 99) (<seal-word> . 99)
            (:parsed-defining-form . 99) (:let . 99) (:local . 99)
            (<fragment-local-declaration-word> . 99)
            (:parsed-local-declaration . 99) (<literal> . 99)
            (<string> . 99) (<keyword> . 99) (:true . 99) (:false . 99)
            (<list-open> . 99) (<vector-open> . 99) (<not> . 99)
            (<lcbracket> . 99) (<fragment-function-word> . 99)
            (:&next . 99) (:&rest . 99) (:&key . 99) (:&all-keys . 99)
            (:otherwise . 99) (<var-type-sep> . 99) (<query> . 99)
            (<query-query> . 99) (<query-equal> . 99)
            (:parsed-expression . 99) (:parsed-body . 99)
            (:parsed-case-body . 99) (:parsed-literal . 99)
            (<syntax-open> . 99) (<implies> . 99)
            (<binary-operator> . 99) (<minus> . 99) (<binds> . 99)
            (<var-singleton-sep> . 99) (<becomes> . 99)
            (<lbracket> . 99) (<lsbracket> . 99) (<dot> . 99))
           ((<var-sep> . -317) (<rcbracket> . 72)
            (<details-intermediate-word> . 72)
            (<expr-intermediate-word> . 72)
            (<simple-intermediate-word> . 72) (<rsbracket> . 72)
            (<rbracket> . 72) (:end . 72) (<statement-sep> . 72))
           ((<symbol> . 97) (<defining-word> . 97)
            (<method-defining-word> . 97) (:generic . 97)
            (<generic-function-defining-word> . 97) (<ellipsis> . 97)
            (<fragment-define-word> . 97)
            (<fragment-define-bindings-word> . 97) (:parsed-name . 97)
            (:parsed-variable . 97) (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:method . -312))
           ((<var-sep> . 610) (<rcbracket> . 610)
            (<details-intermediate-word> . 610)
            (<expr-intermediate-word> . 610)
            (<simple-intermediate-word> . 610) (<rsbracket> . 610)
            (<rbracket> . 610) (:end . 610) (<statement-sep> . 610))
           ((<lbracket> . -321))
           ((<statement-sep> . 77) (:end . 77) (<rbracket> . 77)
            (<rsbracket> . 77) (<simple-intermediate-word> . 77)
            (<expr-intermediate-word> . 77)
            (<details-intermediate-word> . 77) (<rcbracket> . 77)
            (<var-sep> . 77))
           ((<rbracket> . 203) (:generic . -33)
            (<generic-function-defining-word> . -50) (:&next . -334)
            (:&rest . -337) (:&key . -339) (:&all-keys . -332)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59)
            (:parsed-name . -66) (:parsed-variable . -14))
           ((:end . -323))
           ((<symbol> . 97) (<defining-word> . 97)
            (<method-defining-word> . 97) (:generic . 97)
            (<generic-function-defining-word> . 97) (<ellipsis> . 97)
            (<fragment-define-word> . 97)
            (<fragment-define-bindings-word> . 97) (:parsed-name . 97)
            (:parsed-variable . 97) (<statement-sep> . 97) (:end . 97)
            (<rbracket> . 97) (<rsbracket> . 97)
            (<simple-intermediate-word> . 97)
            (<expr-intermediate-word> . 97)
            (<details-intermediate-word> . 97) (<rcbracket> . 97)
            (<var-sep> . 97) (:method . -312)
            (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57))
           ((<var-sep> . 89) (<rcbracket> . 89)
            (<details-intermediate-word> . 89)
            (<expr-intermediate-word> . 89)
            (<simple-intermediate-word> . 89) (<rsbracket> . 89)
            (<rbracket> . 89) (:end . 89) (<statement-sep> . 89)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59)
            (:parsed-name . -66) (:parsed-variable . -14))
           ((<statement-sep> . 200) (:end . 200) (<rbracket> . 200)
            (<rsbracket> . 200) (<simple-intermediate-word> . 200)
            (<expr-intermediate-word> . 200)
            (<details-intermediate-word> . 200) (<rcbracket> . 200)
            (<var-sep> . 200))
           ((<lbracket> . 90) (<statement-sep> . 90) (:end . 90)
            (<rbracket> . 90) (<rsbracket> . 90)
            (<simple-intermediate-word> . 90)
            (<expr-intermediate-word> . 90)
            (<details-intermediate-word> . 90) (<rcbracket> . 90)
            (<var-sep> . 90))
           ((<var-sep> . -667) (<rbracket> . 213)) ((<rbracket> . 219))
           ((<var-singleton-sep> . -663) (<var-type-sep> . -664)
            (<var-sep> . 210) (<rbracket> . 210)
            (<statement-sep> . 210) (:end . 210) (<rsbracket> . 210)
            (<simple-intermediate-word> . 210)
            (<expr-intermediate-word> . 210)
            (<details-intermediate-word> . 210) (<rcbracket> . 210))
           ((<var-sep> . -661) (<rbracket> . 217)) ((<rbracket> . 207))
           ((<rbracket> . 223)) ((<rbracket> . 215))
           ((:parsed-name . -66) (:parsed-variable . -14)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59))
           ((<rbracket> . -669)) ((<var-sep> . 208) (<rbracket> . 208))
           ((:generic . -33) (<generic-function-defining-word> . -50)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59)
            (:parsed-name . -66) (:parsed-variable . -14))
           ((<rbracket> . 204))
           ((:generic . -33) (<generic-function-defining-word> . -50)
            (<keyword> . -344) (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<var-sep> . -349) (<rbracket> . 221))
           ((<var-sep> . -341) (<rbracket> . 205))
           ((:generic . -33) (<generic-function-defining-word> . -50)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59)
            (:parsed-name . -66) (:parsed-variable . -14)
            (:&next . -334) (:&rest . -337) (:&key . -339)
            (:&all-keys . -332))
           ((<rbracket> . 206)) ((<var-sep> . 209) (<rbracket> . 209))
           ((<binds> . 236) (<var-sep> . 236) (<rbracket> . 236)
            (<var-type-sep> . -655) (:parsed-name . -66)
            (:parsed-variable . -14) (:generic . -33)
            (<generic-function-defining-word> . -50) (<symbol> . -34)
            (<defining-word> . -42) (<method-defining-word> . -5)
            (<ellipsis> . -58) (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59))
           ((<binds> . 237) (<var-sep> . 237) (<rbracket> . 237)
            (<var-type-sep> . -652))
           ((<var-sep> . -649) (<rbracket> . 224))
           ((<var-sep> . 238) (<rbracket> . 238) (<binds> . -354))
           ((<var-sep> . 238) (<rbracket> . 238) (<binds> . -354))
           ((:&all-keys . -351)) ((<var-sep> . 226) (<rbracket> . 226))
           ((<rbracket> . 222)) ((<rbracket> . 239) (<var-sep> . 239))
           ((<rbracket> . 228) (<var-sep> . 228))
           ((<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<keyword> . -221) (<unary-operator> . -65) (<minus> . -64)
            (<not> . -44) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((<rbracket> . 240) (<var-sep> . 240) (:end . 240)
            (<statement-sep> . 240))
           ((:end . -357))
           ((<dot> . 97) (<lsbracket> . 97) (<lbracket> . 97)
            (<becomes> . 97) (<var-singleton-sep> . 97) (<binds> . 97)
            (<minus> . 97) (<binary-operator> . 97) (:end . 97)
            (<statement-sep> . 97) (<implies> . 97) (<var-sep> . 97)
            (<syntax-open> . 97) (:parsed-literal . 97)
            (:parsed-case-body . 97) (:parsed-body . 97)
            (:parsed-expression . 97) (:parsed-variable . 97)
            (:parsed-name . 97) (<query-equal> . 97)
            (<query-query> . 97) (<query> . 97) (<ellipsis> . 97)
            (<var-type-sep> . 97) (:otherwise . 97) (:&all-keys . 97)
            (:&key . 97) (:&rest . 97) (:&next . 97)
            (<fragment-function-word> . 97) (<lcbracket> . 97)
            (<not> . 97) (<fragment-define-bindings-word> . 97)
            (<fragment-define-word> . 97) (<defining-word> . 97)
            (<symbol> . 97) (<vector-open> . 97) (<list-open> . 97)
            (:false . 97) (:true . 97) (<keyword> . 97) (<string> . 97)
            (<literal> . 97) (:parsed-local-declaration . 97)
            (<fragment-local-declaration-word> . 97) (:local . 97)
            (:let . 97) (:parsed-defining-form . 97) (<seal-word> . 97)
            (:define . 97) (<rbracket> . 97) (<rsbracket> . 97)
            (<simple-intermediate-word> . 97)
            (<expr-intermediate-word> . 97)
            (<details-intermediate-word> . 97) (<rcbracket> . 97)
            (:method . -312) (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57))
           ((<rcbracket> . 199) (<details-intermediate-word> . 199)
            (<expr-intermediate-word> . 199)
            (<simple-intermediate-word> . 199) (<rsbracket> . 199)
            (<rbracket> . 199) (:define . 199) (<seal-word> . 199)
            (:parsed-defining-form . 199) (:let . 199) (:local . 199)
            (<fragment-local-declaration-word> . 199)
            (:parsed-local-declaration . 199) (<literal> . 199)
            (<string> . 199) (<keyword> . 199) (:true . 199)
            (:false . 199) (<list-open> . 199) (<vector-open> . 199)
            (<symbol> . 199) (<defining-word> . 199)
            (<fragment-define-word> . 199)
            (<fragment-define-bindings-word> . 199) (<not> . 199)
            (<lcbracket> . 199) (<fragment-function-word> . 199)
            (:&next . 199) (:&rest . 199) (:&key . 199)
            (:&all-keys . 199) (:otherwise . 199)
            (<var-type-sep> . 199) (<ellipsis> . 199) (<query> . 199)
            (<query-query> . 199) (<query-equal> . 199)
            (:parsed-name . 199) (:parsed-variable . 199)
            (:parsed-expression . 199) (:parsed-body . 199)
            (:parsed-case-body . 199) (:parsed-literal . 199)
            (<syntax-open> . 199) (<var-sep> . 199) (<implies> . 199)
            (<statement-sep> . 199) (:end . 199)
            (<binary-operator> . 199) (<minus> . 199) (<binds> . 199)
            (<var-singleton-sep> . 199) (<becomes> . 199)
            (<lbracket> . 199) (<lsbracket> . 199) (<dot> . 199))
           ((<rbracket> . -360))
           ((<dot> . 129) (<lsbracket> . 129) (<lbracket> . 129)
            (<becomes> . 129) (<var-singleton-sep> . 129)
            (<binds> . 129) (<minus> . 129) (<binary-operator> . 129)
            (:end . 129) (<statement-sep> . 129) (<var-sep> . 129)
            (<rbracket> . 129) (<symbol> . 129) (:parsed-name . 129)
            (<simple-intermediate-word> . 129)
            (<expr-intermediate-word> . 129)
            (<details-intermediate-word> . 129) (<rsbracket> . 129)
            (<implies> . 129) (<rcbracket> . 129) (<lcbracket> . 129)
            (<keyword> . 129))
           ((<statement-sep> . 265) (<not> . 265) (<minus> . 265)
            (<unary-operator> . 265) (<syntax-open> . 265)
            (:parsed-expression . 265) (:parsed-body . 265)
            (:parsed-statement . 265) (:macro-case . 265)
            (<fragment-define-bindings-and-begin-word> . 265)
            (<fragment-define-and-begin-word> . 265)
            (<fragment-begin-word> . 265) (<simple-begin-word> . 265)
            (<expr-begin-word> . 265) (<details-begin-word> . 265)
            (:method . 265) (<lbracket> . 265) (:parsed-variable . 265)
            (:parsed-name . 265)
            (<fragment-define-bindings-word> . 265)
            (<fragment-define-word> . 265) (<ellipsis> . 265)
            (<generic-function-defining-word> . 265) (:generic . 265)
            (<method-defining-word> . 265) (<defining-word> . 265)
            (<symbol> . 265) (:parsed-literal . 265)
            (<vector-open> . 265) (<list-open> . 265) (:false . 265)
            (:true . 265) (<string> . 265) (<literal> . 265)
            (<fragment-function-word> . 265) (<keyword> . 265)
            (:parsed-local-declaration . 265)
            (<fragment-local-declaration-word> . 265) (:local . 265)
            (:let . 265) (:parsed-defining-form . 265)
            (<seal-word> . 265) (:define . 265) (:end . 265)
            (<implies> . -600))
           ((:end . 167))
           ((:end . 256) (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<seal-word> . -4) (<keyword> . -221)
            (<unary-operator> . -65) (<minus> . -64) (<not> . -44)
            (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:let . -19) (:local . -29)
            (<fragment-local-declaration-word> . -45)
            (:parsed-local-declaration . -69) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (:define . -31) (:parsed-defining-form . -23)
            (<string> . -53) (<statement-sep> . -597))
           ((<var-sep> . -576) (<implies> . -595))
           ((<implies> . 607) (<var-sep> . 607) (<statement-sep> . 13)
            (<simple-intermediate-word> . 13)
            (<expr-intermediate-word> . 13)
            (<details-intermediate-word> . 13) (:end . 13))
           ((:end . 256) (<statement-sep> . -591)
            (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<seal-word> . -4) (<keyword> . -221)
            (<unary-operator> . -65) (<minus> . -64) (<not> . -44)
            (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:let . -19) (:local . -29)
            (<fragment-local-declaration-word> . -45)
            (:parsed-local-declaration . -69) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (:define . -31) (:parsed-defining-form . -23)
            (<string> . -53))
           ((:end . -579)) ((:end . 163)) ((:end . -579))
           ((<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<keyword> . -221) (<unary-operator> . -65) (<minus> . -64)
            (<not> . -44) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((<lbracket> . -372))
           ((<rbracket> . 180) (<keyword> . -376) (:generic . -33)
            (<generic-function-defining-word> . -50)
            (<lbracket> . -378) (<symbol> . -34)
            (<defining-word> . -42) (<method-defining-word> . -5)
            (<ellipsis> . -58) (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59)
            (:parsed-name . -66) (:parsed-variable . -14))
           ((<not> . 261) (<minus> . 261) (<unary-operator> . 261)
            (<syntax-open> . 261) (:parsed-expression . 261)
            (:parsed-body . 261) (:parsed-statement . 261)
            (:macro-case . 261)
            (<fragment-define-bindings-and-begin-word> . 261)
            (<fragment-define-and-begin-word> . 261)
            (<fragment-begin-word> . 261) (<simple-begin-word> . 261)
            (<expr-begin-word> . 261) (<details-begin-word> . 261)
            (:method . 261) (<lbracket> . 261) (:parsed-variable . 261)
            (:parsed-name . 261)
            (<fragment-define-bindings-word> . 261)
            (<fragment-define-word> . 261) (<ellipsis> . 261)
            (<generic-function-defining-word> . 261) (:generic . 261)
            (<method-defining-word> . 261) (<defining-word> . 261)
            (<symbol> . 261) (:parsed-literal . 261)
            (<vector-open> . 261) (<list-open> . 261) (:false . 261)
            (:true . 261) (<string> . 261) (<literal> . 261)
            (<fragment-function-word> . 261) (<keyword> . 261)
            (:parsed-local-declaration . 261)
            (<fragment-local-declaration-word> . 261) (:local . 261)
            (:let . 261) (:parsed-defining-form . 261)
            (<seal-word> . 261) (:define . 261)
            (<simple-intermediate-word> . 261)
            (<expr-intermediate-word> . 261)
            (<details-intermediate-word> . 261) (:end . 261)
            (<statement-sep> . -374))
           ((:end . 262) (<details-intermediate-word> . 262)
            (<expr-intermediate-word> . 262)
            (<simple-intermediate-word> . 262) (:define . 262)
            (<seal-word> . 262) (:parsed-defining-form . 262)
            (:let . 262) (:local . 262)
            (<fragment-local-declaration-word> . 262)
            (:parsed-local-declaration . 262) (<keyword> . 262)
            (<fragment-function-word> . 262) (<literal> . 262)
            (<string> . 262) (:true . 262) (:false . 262)
            (<list-open> . 262) (<vector-open> . 262)
            (:parsed-literal . 262) (<symbol> . 262)
            (<defining-word> . 262) (<method-defining-word> . 262)
            (:generic . 262) (<generic-function-defining-word> . 262)
            (<ellipsis> . 262) (<fragment-define-word> . 262)
            (<fragment-define-bindings-word> . 262)
            (:parsed-name . 262) (:parsed-variable . 262)
            (<lbracket> . 262) (:method . 262)
            (<details-begin-word> . 262) (<expr-begin-word> . 262)
            (<simple-begin-word> . 262) (<fragment-begin-word> . 262)
            (<fragment-define-and-begin-word> . 262)
            (<fragment-define-bindings-and-begin-word> . 262)
            (:macro-case . 262) (:parsed-statement . 262)
            (:parsed-body . 262) (:parsed-expression . 262)
            (<syntax-open> . 262) (<unary-operator> . 262)
            (<minus> . 262) (<not> . 262) (<lcbracket> . 262))
           ((:end . 156) (<details-intermediate-word> . 156)
            (<expr-intermediate-word> . 156)
            (<simple-intermediate-word> . 156) (:define . 156)
            (<seal-word> . 156) (:parsed-defining-form . 156)
            (:let . 156) (:local . 156)
            (<fragment-local-declaration-word> . 156)
            (:parsed-local-declaration . 156) (<keyword> . 156)
            (<fragment-function-word> . 156) (<literal> . 156)
            (<string> . 156) (:true . 156) (:false . 156)
            (<list-open> . 156) (<vector-open> . 156)
            (:parsed-literal . 156) (<symbol> . 156)
            (<defining-word> . 156) (<method-defining-word> . 156)
            (:generic . 156) (<generic-function-defining-word> . 156)
            (<ellipsis> . 156) (<fragment-define-word> . 156)
            (<fragment-define-bindings-word> . 156)
            (:parsed-name . 156) (:parsed-variable . 156)
            (<lbracket> . 156) (:method . 156)
            (<details-begin-word> . 156) (<expr-begin-word> . 156)
            (<simple-begin-word> . 156) (<fragment-begin-word> . 156)
            (<fragment-define-and-begin-word> . 156)
            (<fragment-define-bindings-and-begin-word> . 156)
            (:macro-case . 156) (:parsed-statement . 156)
            (:parsed-body . 156) (:parsed-expression . 156)
            (<syntax-open> . 156) (<unary-operator> . 156)
            (<minus> . 156) (<not> . 156))
           ((<lcbracket> . -396) (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<keyword> . -221) (<unary-operator> . -65) (<minus> . -64)
            (<not> . -44) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((<var-type-sep> . -564) (:end . 85) (<var-sep> . 85)
            (<rbracket> . 85) (<binds> . 85) (<symbol> . 85)
            (:parsed-name . 85))
           ((:&rest . -553) (:generic . -33)
            (<generic-function-defining-word> . -50) (<symbol> . -34)
            (<defining-word> . -42) (<method-defining-word> . -5)
            (<ellipsis> . -58) (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59)
            (:parsed-name . -66) (:parsed-variable . -14))
           ((:end . 84) (<binds> . 84) (<var-sep> . 84)
            (<rbracket> . 84) (<symbol> . 84) (:parsed-name . 84))
           ((<rbracket> . -567)) ((<rbracket> . 181))
           ((<rbracket> . 183))
           ((<binds> . -548) (<var-sep> . 191) (<rbracket> . 191)
            (<symbol> . -490) (:parsed-name . -489))
           ((<rbracket> . 15) (<var-sep> . -389))
           ((<var-sep> . 185) (<rbracket> . 185))
           ((:end . 83) (<binds> . 83) (<var-sep> . 83)
            (<rbracket> . 83) (<symbol> . 83) (:parsed-name . 83))
           ((<rbracket> . 182))
           ((<rbracket> . 16) (<rcbracket> . 16)
            (<details-intermediate-word> . 16)
            (<expr-intermediate-word> . 16)
            (<simple-intermediate-word> . 16) (<rsbracket> . 16)
            (<statement-sep> . 16) (:end . 16))
           ((:parsed-property-list . -395) (<lbracket> . -378)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<expr-begin-word> . -545) (<keyword> . -394))
           ((<var-sep> . -392) (<rbracket> . 17) (<rcbracket> . 17)
            (<details-intermediate-word> . 17)
            (<expr-intermediate-word> . 17)
            (<simple-intermediate-word> . 17) (<rsbracket> . 17)
            (<statement-sep> . 17) (:end . 17))
           ((<var-sep> . 621) (<rbracket> . 621) (<rcbracket> . 621)
            (<details-intermediate-word> . 621)
            (<expr-intermediate-word> . 621)
            (<simple-intermediate-word> . 621) (<rsbracket> . 621)
            (<statement-sep> . 621) (:end . 621))
           ((:parsed-property-list . -395) (<keyword> . -394))
           ((<rbracket> . 622) (<var-sep> . 622) (:end . 622)
            (<statement-sep> . 622) (<rsbracket> . 622)
            (<simple-intermediate-word> . 622)
            (<expr-intermediate-word> . 622)
            (<details-intermediate-word> . 622) (<rcbracket> . 622))
           ((<lcbracket> . -396) (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<keyword> . -221) (<unary-operator> . -65) (<minus> . -64)
            (<not> . -44) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((<rbracket> . 547) (<var-sep> . 547) (:end . 547)
            (<statement-sep> . 547) (<rsbracket> . 547)
            (<simple-intermediate-word> . 547)
            (<expr-intermediate-word> . 547)
            (<details-intermediate-word> . 547) (<rcbracket> . 547))
           ((<rcbracket> . 23) (<symbol> . -168)
            (<defining-word> . -182) (<fragment-begin-word> . -190)
            (<fragment-define-word> . -152)
            (<fragment-define-and-begin-word> . -207)
            (<fragment-define-bindings-word> . -204)
            (<fragment-define-bindings-and-begin-word> . -203)
            (<fragment-function-word> . -213)
            (<fragment-local-declaration-word> . -186)
            (<details-begin-word> . -156) (<expr-begin-word> . -150)
            (<simple-begin-word> . -195)
            (<details-intermediate-word> . -174)
            (<expr-intermediate-word> . -170)
            (<simple-intermediate-word> . -158)
            (<method-defining-word> . -146)
            (<generic-function-defining-word> . -193)
            (<seal-word> . -145) (:parsed-name . -211)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (<keyword> . -228)
            (:parsed-expression . -232) (<string> . -53))
           ((<var-sep> . 20) (<rbracket> . 20) (<statement-sep> . 20)
            (:end . 20) (<rcbracket> . 20)
            (<details-intermediate-word> . 20)
            (<expr-intermediate-word> . 20)
            (<simple-intermediate-word> . 20) (<rsbracket> . 20))
           ((<var-sep> . 21) (<rbracket> . 21) (<statement-sep> . 21)
            (:end . 21) (<rcbracket> . 21)
            (<details-intermediate-word> . 21)
            (<expr-intermediate-word> . 21)
            (<simple-intermediate-word> . 21) (<rsbracket> . 21))
           ((<implies> . 27) (<var-sep> . 27) (<rcbracket> . 27))
           ((<implies> . 28) (<var-sep> . 28) (<rcbracket> . 28))
           ((<var-sep> . 619) (<rcbracket> . 619))
           ((<rcbracket> . -409))
           ((<implies> . -407) (<var-sep> . 25) (<rcbracket> . 25))
           ((<var-sep> . -405) (<rcbracket> . 24))
           ((<symbol> . -168) (<defining-word> . -182)
            (<fragment-begin-word> . -190)
            (<fragment-define-word> . -152)
            (<fragment-define-and-begin-word> . -207)
            (<fragment-define-bindings-word> . -204)
            (<fragment-define-bindings-and-begin-word> . -203)
            (<fragment-function-word> . -213)
            (<fragment-local-declaration-word> . -186)
            (<details-begin-word> . -156) (<expr-begin-word> . -150)
            (<simple-begin-word> . -195)
            (<details-intermediate-word> . -174)
            (<expr-intermediate-word> . -170)
            (<simple-intermediate-word> . -158)
            (<method-defining-word> . -146)
            (<generic-function-defining-word> . -193)
            (<seal-word> . -145) (:parsed-name . -211)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (<keyword> . -228)
            (:parsed-expression . -232) (<string> . -53))
           ((<var-sep> . 620) (<rcbracket> . 620))
           ((<symbol> . -168) (<defining-word> . -182)
            (<fragment-begin-word> . -190)
            (<fragment-define-word> . -152)
            (<fragment-define-and-begin-word> . -207)
            (<fragment-define-bindings-word> . -204)
            (<fragment-define-bindings-and-begin-word> . -203)
            (<fragment-function-word> . -213)
            (<fragment-local-declaration-word> . -186)
            (<details-begin-word> . -156) (<expr-begin-word> . -150)
            (<simple-begin-word> . -195)
            (<details-intermediate-word> . -174)
            (<expr-intermediate-word> . -170)
            (<simple-intermediate-word> . -158)
            (<method-defining-word> . -146)
            (<generic-function-defining-word> . -193)
            (<seal-word> . -145) (:parsed-name . -211)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (<keyword> . -228)
            (:parsed-expression . -232) (<string> . -53))
           ((<var-sep> . 26) (<rcbracket> . 26))
           ((<var-sep> . 22) (<rbracket> . 22) (<statement-sep> . 22)
            (:end . 22) (<rcbracket> . 22)
            (<details-intermediate-word> . 22)
            (<expr-intermediate-word> . 22)
            (<simple-intermediate-word> . 22) (<rsbracket> . 22))
           ((<lbracket> . -372))
           ((:end . 144) (<simple-intermediate-word> . 144)
            (<expr-intermediate-word> . 144)
            (<details-intermediate-word> . 144) (<not> . 144)
            (<minus> . 144) (<unary-operator> . 144)
            (<syntax-open> . 144) (:parsed-expression . 144)
            (:parsed-body . 144) (:parsed-statement . 144)
            (:macro-case . 144)
            (<fragment-define-bindings-and-begin-word> . 144)
            (<fragment-define-and-begin-word> . 144)
            (<fragment-begin-word> . 144) (<simple-begin-word> . 144)
            (<expr-begin-word> . 144) (<details-begin-word> . 144)
            (:method . 144) (<lbracket> . 144) (:parsed-variable . 144)
            (:parsed-name . 144)
            (<fragment-define-bindings-word> . 144)
            (<fragment-define-word> . 144) (<ellipsis> . 144)
            (<generic-function-defining-word> . 144) (:generic . 144)
            (<method-defining-word> . 144) (<defining-word> . 144)
            (<symbol> . 144) (:parsed-literal . 144)
            (<vector-open> . 144) (<list-open> . 144) (:false . 144)
            (:true . 144) (<string> . 144) (<literal> . 144)
            (<fragment-function-word> . 144) (<keyword> . 144)
            (:parsed-local-declaration . 144)
            (<fragment-local-declaration-word> . 144) (:local . 144)
            (:let . 144) (:parsed-defining-form . 144)
            (<seal-word> . 144) (:define . 144) (:otherwise . 144))
           ((<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<keyword> . -221) (<unary-operator> . -65) (<minus> . -64)
            (<not> . -44) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((<rbracket> . -414)) ((<lcbracket> . -416))
           ((<lcbracket> . -416) (:end . 380) (<keyword> . -535))
           ((<rcbracket> . 389) (<literal> . -124) (<string> . -436)
            (<keyword> . -112) (:true . -87) (:false . -92)
            (<list-open> . -116) (<vector-open> . -122)
            (<symbol> . -105) (<defining-word> . -117)
            (<fragment-define-word> . -95)
            (<fragment-define-bindings-word> . -132)
            (<binary-operator> . -113) (<minus> . -134)
            (<binds> . -136) (<var-singleton-sep> . -104)
            (<becomes> . -120) (<not> . -119) (<lbracket> . -425)
            (<lsbracket> . -427) (<lcbracket> . -429) (<query> . -424)
            (<ellipsis> . -437) (:&rest . -439) (:&key . -418)
            (:parsed-name . -440) (:otherwise . -419)
            (<implies> . -430) (<escaped-hash-word> . -426))
           ((<lcbracket> . 589) (<keyword> . 589) (:end . 589))
           ((<statement-sep> . 419) (<rcbracket> . 419) (:end . 419)
            (<rbracket> . 419) (<rsbracket> . 419) (<query> . -424)
            (<ellipsis> . -437) (:&all-keys . -447)
            (<query-query> . -446))
           ((<vector-open> . 433) (<list-open> . 433) (:false . 433)
            (:true . 433) (<keyword> . 433) (<string> . 433)
            (<literal> . 433) (<escaped-hash-word> . 433)
            (<implies> . 433) (:otherwise . 433) (:parsed-name . 433)
            (<not> . 433) (<becomes> . 433) (<var-singleton-sep> . 433)
            (<binds> . 433) (<minus> . 433) (<binary-operator> . 433)
            (<fragment-define-bindings-word> . 433)
            (<fragment-define-word> . 433) (<defining-word> . 433)
            (<symbol> . 433) (<lcbracket> . 433) (<lsbracket> . 433)
            (<lbracket> . 433) (<ellipsis> . 433) (<query> . 433)
            (<var-sep> . 433) (<statement-sep> . 433)
            (<rcbracket> . 433) (:end . 433) (<rbracket> . 433)
            (<rsbracket> . 433))
           ((<vector-open> . 587) (<list-open> . 587) (:false . 587)
            (:true . 587) (<keyword> . 587) (<string> . 587)
            (<literal> . 587) (<escaped-hash-word> . 587)
            (<implies> . 587) (:otherwise . 587) (:parsed-name . 587)
            (<not> . 587) (<becomes> . 587) (<var-singleton-sep> . 587)
            (<binds> . 587) (<minus> . 587) (<binary-operator> . 587)
            (<fragment-define-bindings-word> . 587)
            (<fragment-define-word> . 587) (<defining-word> . 587)
            (<symbol> . 587) (<lcbracket> . 587) (<lsbracket> . 587)
            (<lbracket> . 587) (<ellipsis> . 587) (<query> . 587)
            (<var-sep> . 587) (<statement-sep> . 587)
            (<rcbracket> . 587) (:end . 587) (<rbracket> . 587)
            (<rsbracket> . 587))
           ((<vector-open> . 405) (<list-open> . 405) (:false . 405)
            (:true . 405) (<keyword> . 405) (<string> . 405)
            (<literal> . 405) (<escaped-hash-word> . 405)
            (<implies> . 405) (:otherwise . 405) (:parsed-name . 405)
            (<not> . 405) (<becomes> . 405) (<var-singleton-sep> . 405)
            (<binds> . 405) (<minus> . 405) (<binary-operator> . 405)
            (<fragment-define-bindings-word> . 405)
            (<fragment-define-word> . 405) (<defining-word> . 405)
            (<symbol> . 405) (<lcbracket> . 405) (<lsbracket> . 405)
            (<lbracket> . 405) (<ellipsis> . 405) (<query> . 405)
            (<var-sep> . 405) (<statement-sep> . 405)
            (<rcbracket> . 405) (:end . 405) (<rbracket> . 405)
            (<rsbracket> . 405))
           ((<vector-open> . 404) (<list-open> . 404) (:false . 404)
            (:true . 404) (<keyword> . 404) (<string> . 404)
            (<literal> . 404) (<escaped-hash-word> . 404)
            (<implies> . 404) (:otherwise . 404) (:parsed-name . 404)
            (<not> . 404) (<becomes> . 404) (<var-singleton-sep> . 404)
            (<binds> . 404) (<minus> . 404) (<binary-operator> . 404)
            (<fragment-define-bindings-word> . 404)
            (<fragment-define-word> . 404) (<defining-word> . 404)
            (<symbol> . 404) (<lcbracket> . 404) (<lsbracket> . 404)
            (<lbracket> . 404) (<ellipsis> . 404) (<query> . 404)
            (<var-sep> . 404) (<statement-sep> . 404)
            (<rcbracket> . 404) (:end . 404) (<rbracket> . 404)
            (<rsbracket> . 404))
           ((<var-sep> . -532) (<statement-sep> . 398)
            (<rcbracket> . 398) (:end . 398) (<rbracket> . 398)
            (<rsbracket> . 398))
           ((<symbol> . -168) (<defining-word> . -182)
            (<fragment-begin-word> . -190)
            (<fragment-define-word> . -152)
            (<fragment-define-and-begin-word> . -207)
            (<fragment-define-bindings-word> . -204)
            (<fragment-define-bindings-and-begin-word> . -203)
            (<fragment-function-word> . -213)
            (<fragment-local-declaration-word> . -186)
            (<details-begin-word> . -156) (<expr-begin-word> . -150)
            (<simple-begin-word> . -195)
            (<details-intermediate-word> . -174)
            (<expr-intermediate-word> . -170)
            (<simple-intermediate-word> . -158)
            (<method-defining-word> . -146)
            (<generic-function-defining-word> . -193)
            (<seal-word> . -145) (:parsed-name . -211))
           ((<rbracket> . 389) (<literal> . -124) (<string> . -436)
            (<keyword> . -112) (:true . -87) (:false . -92)
            (<list-open> . -116) (<vector-open> . -122)
            (<symbol> . -105) (<defining-word> . -117)
            (<fragment-define-word> . -95)
            (<fragment-define-bindings-word> . -132)
            (<binary-operator> . -113) (<minus> . -134)
            (<binds> . -136) (<var-singleton-sep> . -104)
            (<becomes> . -120) (<not> . -119) (<lbracket> . -425)
            (<lsbracket> . -427) (<lcbracket> . -429) (<query> . -424)
            (<ellipsis> . -437) (:&rest . -439) (:&key . -418)
            (:parsed-name . -440) (:otherwise . -419)
            (<implies> . -430) (<escaped-hash-word> . -426))
           ((<vector-open> . 435) (<list-open> . 435) (:false . 435)
            (:true . 435) (<keyword> . 435) (<string> . 435)
            (<literal> . 435) (<escaped-hash-word> . 435)
            (<implies> . 435) (:otherwise . 435) (:parsed-name . 435)
            (<not> . 435) (<becomes> . 435) (<var-singleton-sep> . 435)
            (<binds> . 435) (<minus> . 435) (<binary-operator> . 435)
            (<fragment-define-bindings-word> . 435)
            (<fragment-define-word> . 435) (<defining-word> . 435)
            (<symbol> . 435) (<lcbracket> . 435) (<lsbracket> . 435)
            (<lbracket> . 435) (<ellipsis> . 435) (<query> . 435)
            (<var-sep> . 435) (<statement-sep> . 435)
            (<rcbracket> . 435) (:end . 435) (<rbracket> . 435)
            (<rsbracket> . 435))
           ((<rsbracket> . 389) (<literal> . -124) (<string> . -436)
            (<keyword> . -112) (:true . -87) (:false . -92)
            (<list-open> . -116) (<vector-open> . -122)
            (<symbol> . -105) (<defining-word> . -117)
            (<fragment-define-word> . -95)
            (<fragment-define-bindings-word> . -132)
            (<binary-operator> . -113) (<minus> . -134)
            (<binds> . -136) (<var-singleton-sep> . -104)
            (<becomes> . -120) (<not> . -119) (<lbracket> . -425)
            (<lsbracket> . -427) (<lcbracket> . -429) (<query> . -424)
            (<ellipsis> . -437) (:&rest . -439) (:&key . -418)
            (:parsed-name . -440) (:otherwise . -419)
            (<implies> . -430) (<escaped-hash-word> . -426))
           ((<statement-sep> . 399) (<rcbracket> . 399) (:end . 399)
            (<rbracket> . 399) (<rsbracket> . 399))
           ((<rcbracket> . 389) (<literal> . -124) (<string> . -436)
            (<keyword> . -112) (:true . -87) (:false . -92)
            (<list-open> . -116) (<vector-open> . -122)
            (<symbol> . -105) (<defining-word> . -117)
            (<fragment-define-word> . -95)
            (<fragment-define-bindings-word> . -132)
            (<binary-operator> . -113) (<minus> . -134)
            (<binds> . -136) (<var-singleton-sep> . -104)
            (<becomes> . -120) (<not> . -119) (<lbracket> . -425)
            (<lsbracket> . -427) (<lcbracket> . -429) (<query> . -424)
            (<ellipsis> . -437) (:&rest . -439) (:&key . -418)
            (:parsed-name . -440) (:otherwise . -419)
            (<implies> . -430) (<escaped-hash-word> . -426))
           ((<vector-open> . 434) (<list-open> . 434) (:false . 434)
            (:true . 434) (<keyword> . 434) (<string> . 434)
            (<literal> . 434) (<escaped-hash-word> . 434)
            (<implies> . 434) (:otherwise . 434) (:parsed-name . 434)
            (<not> . 434) (<becomes> . 434) (<var-singleton-sep> . 434)
            (<binds> . 434) (<minus> . 434) (<binary-operator> . 434)
            (<fragment-define-bindings-word> . 434)
            (<fragment-define-word> . 434) (<defining-word> . 434)
            (<symbol> . 434) (<lcbracket> . 434) (<lsbracket> . 434)
            (<lbracket> . 434) (<ellipsis> . 434) (<query> . 434)
            (<var-sep> . 434) (<statement-sep> . 434)
            (<rcbracket> . 434) (:end . 434) (<rbracket> . 434)
            (<rsbracket> . 434))
           ((<rcbracket> . 390) (:end . 390) (<rbracket> . 390)
            (<rsbracket> . 390))
           ((<statement-sep> . -525) (<rcbracket> . 394) (:end . 394)
            (<rbracket> . 394) (<rsbracket> . 394))
           ((<splice> . -519) (<var-type-sep> . -520)
            (<vector-open> . 402) (<list-open> . 402) (:false . 402)
            (:true . 402) (<keyword> . 402) (<string> . 402)
            (<literal> . 402) (<escaped-hash-word> . 402)
            (<implies> . 402) (:otherwise . 402) (:parsed-name . 402)
            (<not> . 402) (<becomes> . 402) (<var-singleton-sep> . 402)
            (<binds> . 402) (<minus> . 402) (<binary-operator> . 402)
            (<fragment-define-bindings-word> . 402)
            (<fragment-define-word> . 402) (<defining-word> . 402)
            (<symbol> . 402) (<lcbracket> . 402) (<lsbracket> . 402)
            (<lbracket> . 402) (<ellipsis> . 402) (<query> . 402)
            (<var-sep> . 402) (<statement-sep> . 402)
            (<rcbracket> . 402) (:end . 402) (<rbracket> . 402)
            (<rsbracket> . 402))
           ((<rcbracket> . 391) (:end . 391) (<rbracket> . 391)
            (<rsbracket> . 391))
           ((<string> . -436) (<literal> . -124) (<keyword> . -112)
            (:true . -87) (:false . -92) (<list-open> . -116)
            (<vector-open> . -122) (<symbol> . -105)
            (<defining-word> . -117) (<fragment-define-word> . -95)
            (<fragment-define-bindings-word> . -132)
            (<binary-operator> . -113) (<minus> . -134)
            (<binds> . -136) (<var-singleton-sep> . -104)
            (<becomes> . -120) (<not> . -119) (<lbracket> . -425)
            (<lsbracket> . -427) (<lcbracket> . -429) (<query> . -424)
            (<ellipsis> . -437) (:parsed-name . -440)
            (:otherwise . -419) (<implies> . -430)
            (<escaped-hash-word> . -426) (<var-sep> . 401)
            (<statement-sep> . 401) (<rcbracket> . 401) (:end . 401)
            (<rbracket> . 401) (<rsbracket> . 401))
           ((<splice> . -514) (<vector-open> . 338) (<list-open> . 338)
            (:false . 338) (:true . 338) (<keyword> . 338)
            (<string> . 338) (<literal> . 338)
            (<escaped-hash-word> . 338) (<implies> . 338)
            (:otherwise . 338) (:parsed-name . 338) (<not> . 338)
            (<becomes> . 338) (<var-singleton-sep> . 338)
            (<binds> . 338) (<minus> . 338) (<binary-operator> . 338)
            (<fragment-define-bindings-word> . 338)
            (<fragment-define-word> . 338) (<defining-word> . 338)
            (<symbol> . 338) (<lcbracket> . 338) (<lsbracket> . 338)
            (<lbracket> . 338) (<ellipsis> . 338) (<query> . 338)
            (<var-sep> . 338) (<statement-sep> . 338)
            (<rcbracket> . 338) (:end . 338) (<rbracket> . 338)
            (<rsbracket> . 338))
           ((<splice> . 415) (<var-type-sep> . 415)
            (<vector-open> . 415) (<list-open> . 415) (:false . 415)
            (:true . 415) (<keyword> . 415) (<string> . 415)
            (<literal> . 415) (<escaped-hash-word> . 415)
            (<implies> . 415) (:otherwise . 415) (:parsed-name . 415)
            (<not> . 415) (<becomes> . 415) (<var-singleton-sep> . 415)
            (<binds> . 415) (<minus> . 415) (<binary-operator> . 415)
            (<fragment-define-bindings-word> . 415)
            (<fragment-define-word> . 415) (<defining-word> . 415)
            (<symbol> . 415) (<lcbracket> . 415) (<lsbracket> . 415)
            (<lbracket> . 415) (<ellipsis> . 415) (<query> . 415)
            (<var-sep> . 415) (<statement-sep> . 415)
            (<rcbracket> . 415) (:end . 415) (<rbracket> . 415)
            (<rsbracket> . 415))
           ((<rcbracket> . -506))
           ((<query> . -424) (<ellipsis> . -437))
           ((<vector-open> . 432) (<list-open> . 432) (:false . 432)
            (:true . 432) (<keyword> . 432) (<string> . 432)
            (<literal> . 432) (<escaped-hash-word> . 432)
            (<implies> . 432) (:otherwise . 432) (:parsed-name . 432)
            (<not> . 432) (<becomes> . 432) (<var-singleton-sep> . 432)
            (<binds> . 432) (<minus> . 432) (<binary-operator> . 432)
            (<fragment-define-bindings-word> . 432)
            (<fragment-define-word> . 432) (<defining-word> . 432)
            (<symbol> . 432) (<lcbracket> . 432) (<lsbracket> . 432)
            (<lbracket> . 432) (<ellipsis> . 432) (<query> . 432)
            (<var-sep> . 432) (<statement-sep> . 432)
            (<rcbracket> . 432) (:end . 432) (<rbracket> . 432)
            (<rsbracket> . 432))
           ((<vector-open> . 436) (<list-open> . 436) (:false . 436)
            (:true . 436) (<keyword> . 436) (<string> . 436)
            (<literal> . 436) (<escaped-hash-word> . 436)
            (<implies> . 436) (:otherwise . 436) (:parsed-name . 436)
            (<not> . 436) (<becomes> . 436) (<var-singleton-sep> . 436)
            (<binds> . 436) (<minus> . 436) (<binary-operator> . 436)
            (<fragment-define-bindings-word> . 436)
            (<fragment-define-word> . 436) (<defining-word> . 436)
            (<symbol> . 436) (<lcbracket> . 436) (<lsbracket> . 436)
            (<lbracket> . 436) (<ellipsis> . 436) (<query> . 436)
            (<var-sep> . 436) (<statement-sep> . 436)
            (<rcbracket> . 436) (:end . 436) (<rbracket> . 436)
            (<rsbracket> . 436))
           ((<vector-open> . 431) (<list-open> . 431) (:false . 431)
            (:true . 431) (<keyword> . 431) (<string> . 431)
            (<literal> . 431) (<escaped-hash-word> . 431)
            (<implies> . 431) (:otherwise . 431) (:parsed-name . 431)
            (<not> . 431) (<becomes> . 431) (<var-singleton-sep> . 431)
            (<binds> . 431) (<minus> . 431) (<binary-operator> . 431)
            (<fragment-define-bindings-word> . 431)
            (<fragment-define-word> . 431) (<defining-word> . 431)
            (<symbol> . 431) (<lcbracket> . 431) (<lsbracket> . 431)
            (<lbracket> . 431) (<ellipsis> . 431) (<query> . 431)
            (<var-sep> . 431) (<statement-sep> . 431)
            (<rcbracket> . 431) (:end . 431) (<rbracket> . 431)
            (<rsbracket> . 431))
           ((<var-sep> . -444) (<rsbracket> . 416) (<rbracket> . 416)
            (:end . 416) (<rcbracket> . 416) (<statement-sep> . 416))
           ((:&key . -445))
           ((<rsbracket> . 419) (<rbracket> . 419) (:end . 419)
            (<rcbracket> . 419) (<statement-sep> . 419)
            (<query> . -424) (<ellipsis> . -437) (:&all-keys . -447)
            (<query-query> . -446))
           ((<symbol> . -168) (<defining-word> . -182)
            (<fragment-begin-word> . -190)
            (<fragment-define-word> . -152)
            (<fragment-define-and-begin-word> . -207)
            (<fragment-define-bindings-word> . -204)
            (<fragment-define-bindings-and-begin-word> . -203)
            (<fragment-function-word> . -213)
            (<fragment-local-declaration-word> . -186)
            (<details-begin-word> . -156) (<expr-begin-word> . -150)
            (<simple-begin-word> . -195)
            (<details-intermediate-word> . -174)
            (<expr-intermediate-word> . -170)
            (<simple-intermediate-word> . -158)
            (<method-defining-word> . -146)
            (<generic-function-defining-word> . -193)
            (<seal-word> . -145) (:parsed-name . -211))
           ((<statement-sep> . 421) (<rcbracket> . 421) (:end . 421)
            (<rbracket> . 421) (<rsbracket> . 421))
           ((<statement-sep> . 420) (<rcbracket> . 420) (:end . 420)
            (<rbracket> . 420) (<rsbracket> . 420))
           ((<var-sep> . 426) (<statement-sep> . 426)
            (<rcbracket> . 426) (:end . 426) (<rbracket> . 426)
            (<rsbracket> . 426) (<binds> . -455))
           ((<var-sep> . -501) (<statement-sep> . 422)
            (<rcbracket> . 422) (:end . 422) (<rbracket> . 422)
            (<rsbracket> . 422))
           ((<statement-sep> . 417) (<rcbracket> . 417) (:end . 417)
            (<rbracket> . 417) (<rsbracket> . 417))
           ((<var-sep> . 426) (<statement-sep> . 426)
            (<rcbracket> . 426) (:end . 426) (<rbracket> . 426)
            (<rsbracket> . 426) (<binds> . -455))
           ((<rsbracket> . 424) (<rbracket> . 424) (:end . 424)
            (<rcbracket> . 424) (<statement-sep> . 424)
            (<var-sep> . 424))
           ((<rsbracket> . 427) (<rbracket> . 427) (:end . 427)
            (<rcbracket> . 427) (<statement-sep> . 427)
            (<var-sep> . 427))
           ((<lcbracket> . -456) (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<keyword> . -221) (<unary-operator> . -65) (<minus> . -64)
            (<not> . -44) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((<rcbracket> . 476) (<query> . -153) (<lbracket> . -157)
            (<lsbracket> . -161) (<lcbracket> . -169)
            (<list-open> . -180) (<vector-open> . -188)
            (<syntax-open> . -196) (<query-query> . -212)
            (<query-equal> . -148) (<string> . -197)
            (<escaped-substitution> . -155) (<dot> . -163)
            (<var-type-sep> . -179) (<ellipsis> . -202)
            (<implies> . -171) (<keyword> . -176) (<literal> . -192)
            (<unary-operator> . -208) (<not> . -185) (:true . -143)
            (:false . -149) (:&next . -194) (:&rest . -209)
            (:&key . -142) (:&all-keys . -173) (:define . -166)
            (:end . -199) (:generic . -167) (:handler . -177)
            (:let . -154) (:local . -162) (:method . -159)
            (:macro . -198) (:otherwise . -144)
            (:parsed-variable . -151) (:parsed-expression . -189)
            (:parsed-body . -201) (:parsed-case-body . -147)
            (:parsed-literal . -200) (<statement-sep> . -175)
            (<var-sep> . -183) (<binary-operator> . -178)
            (<binds> . -210) (<var-singleton-sep> . -165)
            (<becomes> . -187) (<minus> . -206) (<symbol> . -168)
            (<defining-word> . -182) (<fragment-begin-word> . -190)
            (<fragment-define-word> . -152)
            (<fragment-define-and-begin-word> . -207)
            (<fragment-define-bindings-word> . -204)
            (<fragment-define-bindings-and-begin-word> . -203)
            (<fragment-function-word> . -213)
            (<fragment-local-declaration-word> . -186)
            (<details-begin-word> . -156) (<expr-begin-word> . -150)
            (<simple-begin-word> . -195)
            (<details-intermediate-word> . -174)
            (<expr-intermediate-word> . -170)
            (<simple-intermediate-word> . -158)
            (<method-defining-word> . -146)
            (<generic-function-defining-word> . -193)
            (<seal-word> . -145) (:parsed-name . -211))
           ((<var-sep> . 428) (<statement-sep> . 428)
            (<rcbracket> . 428) (:end . 428) (<rbracket> . 428)
            (<rsbracket> . 428))
           ((<rcbracket> . -459))
           ((<var-sep> . 429) (<statement-sep> . 429)
            (<rcbracket> . 429) (:end . 429) (<rbracket> . 429)
            (<rsbracket> . 429))
           ((<query> . -461))
           ((<literal> . -466) (<string> . -467) (<symbol> . -168)
            (<defining-word> . -182) (<fragment-begin-word> . -190)
            (<fragment-define-word> . -152)
            (<fragment-define-and-begin-word> . -207)
            (<fragment-define-bindings-word> . -204)
            (<fragment-define-bindings-and-begin-word> . -203)
            (<fragment-function-word> . -213)
            (<fragment-local-declaration-word> . -186)
            (<details-begin-word> . -156) (<expr-begin-word> . -150)
            (<simple-begin-word> . -195)
            (<details-intermediate-word> . -174)
            (<expr-intermediate-word> . -170)
            (<simple-intermediate-word> . -158)
            (<method-defining-word> . -146)
            (<generic-function-defining-word> . -193)
            (<seal-word> . -145) (:parsed-name . -211))
           ((<splice> . -463) (:parsed-literal . 492)
            (:parsed-case-body . 492) (:parsed-body . 492)
            (:parsed-expression . 492) (:parsed-variable . 492)
            (<minus> . 492) (<becomes> . 492)
            (<var-singleton-sep> . 492) (<binds> . 492)
            (<binary-operator> . 492) (<var-sep> . 492)
            (<statement-sep> . 492) (:parsed-name . 492)
            (<seal-word> . 492)
            (<generic-function-defining-word> . 492)
            (<method-defining-word> . 492)
            (<simple-intermediate-word> . 492)
            (<expr-intermediate-word> . 492)
            (<details-intermediate-word> . 492)
            (<simple-begin-word> . 492) (<expr-begin-word> . 492)
            (<details-begin-word> . 492)
            (<fragment-local-declaration-word> . 492)
            (<fragment-function-word> . 492)
            (<fragment-define-bindings-and-begin-word> . 492)
            (<fragment-define-bindings-word> . 492)
            (<fragment-define-and-begin-word> . 492)
            (<fragment-define-word> . 492)
            (<fragment-begin-word> . 492) (<defining-word> . 492)
            (<symbol> . 492) (:otherwise . 492) (:macro . 492)
            (:method . 492) (:local . 492) (:let . 492)
            (:handler . 492) (:generic . 492) (:end . 492)
            (:define . 492) (:&all-keys . 492) (:&key . 492)
            (:&rest . 492) (:&next . 492) (:false . 492) (:true . 492)
            (<not> . 492) (<unary-operator> . 492) (<literal> . 492)
            (<keyword> . 492) (<implies> . 492) (<ellipsis> . 492)
            (<var-type-sep> . 492) (<dot> . 492)
            (<escaped-substitution> . 492) (<string> . 492)
            (<query> . 492) (<query-equal> . 492) (<query-query> . 492)
            (<syntax-open> . 492) (<vector-open> . 492)
            (<list-open> . 492) (<lcbracket> . 492) (<lsbracket> . 492)
            (<lbracket> . 492) (<rcbracket> . 492) (<rbracket> . 492)
            (<rsbracket> . 492))
           ((<string> . -464))
           ((:parsed-literal . 493) (:parsed-case-body . 493)
            (:parsed-body . 493) (:parsed-expression . 493)
            (:parsed-variable . 493) (<minus> . 493) (<becomes> . 493)
            (<var-singleton-sep> . 493) (<binds> . 493)
            (<binary-operator> . 493) (<var-sep> . 493)
            (<statement-sep> . 493) (:parsed-name . 493)
            (<seal-word> . 493)
            (<generic-function-defining-word> . 493)
            (<method-defining-word> . 493)
            (<simple-intermediate-word> . 493)
            (<expr-intermediate-word> . 493)
            (<details-intermediate-word> . 493)
            (<simple-begin-word> . 493) (<expr-begin-word> . 493)
            (<details-begin-word> . 493)
            (<fragment-local-declaration-word> . 493)
            (<fragment-function-word> . 493)
            (<fragment-define-bindings-and-begin-word> . 493)
            (<fragment-define-bindings-word> . 493)
            (<fragment-define-and-begin-word> . 493)
            (<fragment-define-word> . 493)
            (<fragment-begin-word> . 493) (<defining-word> . 493)
            (<symbol> . 493) (:otherwise . 493) (:macro . 493)
            (:method . 493) (:local . 493) (:let . 493)
            (:handler . 493) (:generic . 493) (:end . 493)
            (:define . 493) (:&all-keys . 493) (:&key . 493)
            (:&rest . 493) (:&next . 493) (:false . 493) (:true . 493)
            (<not> . 493) (<unary-operator> . 493) (<literal> . 493)
            (<keyword> . 493) (<implies> . 493) (<ellipsis> . 493)
            (<var-type-sep> . 493) (<dot> . 493)
            (<escaped-substitution> . 493) (<string> . 493)
            (<query> . 493) (<query-equal> . 493) (<query-query> . 493)
            (<syntax-open> . 493) (<vector-open> . 493)
            (<list-open> . 493) (<lcbracket> . 493) (<lsbracket> . 493)
            (<lbracket> . 493) (<rcbracket> . 493) (<rbracket> . 493)
            (<rsbracket> . 493))
           ((<rsbracket> . 494) (<rbracket> . 494) (<rcbracket> . 494)
            (<lbracket> . 494) (<lsbracket> . 494) (<lcbracket> . 494)
            (<list-open> . 494) (<vector-open> . 494)
            (<syntax-open> . 494) (<query-query> . 494)
            (<query-equal> . 494) (<query> . 494) (<string> . 494)
            (<escaped-substitution> . 494) (<dot> . 494)
            (<var-type-sep> . 494) (<ellipsis> . 494) (<implies> . 494)
            (<keyword> . 494) (<literal> . 494)
            (<unary-operator> . 494) (<not> . 494) (:true . 494)
            (:false . 494) (:&next . 494) (:&rest . 494) (:&key . 494)
            (:&all-keys . 494) (:define . 494) (:end . 494)
            (:generic . 494) (:handler . 494) (:let . 494)
            (:local . 494) (:method . 494) (:macro . 494)
            (:otherwise . 494) (<symbol> . 494) (<defining-word> . 494)
            (<fragment-begin-word> . 494)
            (<fragment-define-word> . 494)
            (<fragment-define-and-begin-word> . 494)
            (<fragment-define-bindings-word> . 494)
            (<fragment-define-bindings-and-begin-word> . 494)
            (<fragment-function-word> . 494)
            (<fragment-local-declaration-word> . 494)
            (<details-begin-word> . 494) (<expr-begin-word> . 494)
            (<simple-begin-word> . 494)
            (<details-intermediate-word> . 494)
            (<expr-intermediate-word> . 494)
            (<simple-intermediate-word> . 494)
            (<method-defining-word> . 494)
            (<generic-function-defining-word> . 494)
            (<seal-word> . 494) (:parsed-name . 494)
            (<statement-sep> . 494) (<var-sep> . 494)
            (<binary-operator> . 494) (<binds> . 494)
            (<var-singleton-sep> . 494) (<becomes> . 494)
            (<minus> . 494) (:parsed-variable . 494)
            (:parsed-expression . 494) (:parsed-body . 494)
            (:parsed-case-body . 494) (:parsed-literal . 494)
            (<splice> . 494))
           ((<rsbracket> . 496) (<rbracket> . 496) (<rcbracket> . 496)
            (<lbracket> . 496) (<lsbracket> . 496) (<lcbracket> . 496)
            (<list-open> . 496) (<vector-open> . 496)
            (<syntax-open> . 496) (<query-query> . 496)
            (<query-equal> . 496) (<query> . 496) (<string> . 496)
            (<escaped-substitution> . 496) (<dot> . 496)
            (<var-type-sep> . 496) (<ellipsis> . 496) (<implies> . 496)
            (<keyword> . 496) (<literal> . 496)
            (<unary-operator> . 496) (<not> . 496) (:true . 496)
            (:false . 496) (:&next . 496) (:&rest . 496) (:&key . 496)
            (:&all-keys . 496) (:define . 496) (:end . 496)
            (:generic . 496) (:handler . 496) (:let . 496)
            (:local . 496) (:method . 496) (:macro . 496)
            (:otherwise . 496) (<symbol> . 496) (<defining-word> . 496)
            (<fragment-begin-word> . 496)
            (<fragment-define-word> . 496)
            (<fragment-define-and-begin-word> . 496)
            (<fragment-define-bindings-word> . 496)
            (<fragment-define-bindings-and-begin-word> . 496)
            (<fragment-function-word> . 496)
            (<fragment-local-declaration-word> . 496)
            (<details-begin-word> . 496) (<expr-begin-word> . 496)
            (<simple-begin-word> . 496)
            (<details-intermediate-word> . 496)
            (<expr-intermediate-word> . 496)
            (<simple-intermediate-word> . 496)
            (<method-defining-word> . 496)
            (<generic-function-defining-word> . 496)
            (<seal-word> . 496) (:parsed-name . 496)
            (<statement-sep> . 496) (<var-sep> . 496)
            (<binary-operator> . 496) (<binds> . 496)
            (<var-singleton-sep> . 496) (<becomes> . 496)
            (<minus> . 496) (:parsed-variable . 496)
            (:parsed-expression . 496) (:parsed-body . 496)
            (:parsed-case-body . 496) (:parsed-literal . 496)
            (<splice> . 496))
           ((<rsbracket> . 495) (<rbracket> . 495) (<rcbracket> . 495)
            (<lbracket> . 495) (<lsbracket> . 495) (<lcbracket> . 495)
            (<list-open> . 495) (<vector-open> . 495)
            (<syntax-open> . 495) (<query-query> . 495)
            (<query-equal> . 495) (<query> . 495) (<string> . 495)
            (<escaped-substitution> . 495) (<dot> . 495)
            (<var-type-sep> . 495) (<ellipsis> . 495) (<implies> . 495)
            (<keyword> . 495) (<literal> . 495)
            (<unary-operator> . 495) (<not> . 495) (:true . 495)
            (:false . 495) (:&next . 495) (:&rest . 495) (:&key . 495)
            (:&all-keys . 495) (:define . 495) (:end . 495)
            (:generic . 495) (:handler . 495) (:let . 495)
            (:local . 495) (:method . 495) (:macro . 495)
            (:otherwise . 495) (<symbol> . 495) (<defining-word> . 495)
            (<fragment-begin-word> . 495)
            (<fragment-define-word> . 495)
            (<fragment-define-and-begin-word> . 495)
            (<fragment-define-bindings-word> . 495)
            (<fragment-define-bindings-and-begin-word> . 495)
            (<fragment-function-word> . 495)
            (<fragment-local-declaration-word> . 495)
            (<details-begin-word> . 495) (<expr-begin-word> . 495)
            (<simple-begin-word> . 495)
            (<details-intermediate-word> . 495)
            (<expr-intermediate-word> . 495)
            (<simple-intermediate-word> . 495)
            (<method-defining-word> . 495)
            (<generic-function-defining-word> . 495)
            (<seal-word> . 495) (:parsed-name . 495)
            (<statement-sep> . 495) (<var-sep> . 495)
            (<binary-operator> . 495) (<binds> . 495)
            (<var-singleton-sep> . 495) (<becomes> . 495)
            (<minus> . 495) (:parsed-variable . 495)
            (:parsed-expression . 495) (:parsed-body . 495)
            (:parsed-case-body . 495) (:parsed-literal . 495)
            (<splice> . 495))
           ((<rcbracket> . -500))
           ((<lbracket> . -157) (<lsbracket> . -161)
            (<lcbracket> . -169) (<list-open> . -180)
            (<vector-open> . -188) (<syntax-open> . -196)
            (<query-query> . -212) (<query-equal> . -148)
            (<string> . -197) (<query> . -153)
            (<escaped-substitution> . -155) (<dot> . -163)
            (<var-type-sep> . -179) (<ellipsis> . -202)
            (<implies> . -171) (<keyword> . -176) (<literal> . -192)
            (<unary-operator> . -208) (<not> . -185) (:true . -143)
            (:false . -149) (:&next . -194) (:&rest . -209)
            (:&key . -142) (:&all-keys . -173) (:define . -166)
            (:end . -199) (:generic . -167) (:handler . -177)
            (:let . -154) (:local . -162) (:method . -159)
            (:macro . -198) (:otherwise . -144)
            (:parsed-variable . -151) (:parsed-expression . -189)
            (:parsed-body . -201) (:parsed-case-body . -147)
            (:parsed-literal . -200) (<statement-sep> . -175)
            (<var-sep> . -183) (<binary-operator> . -178)
            (<binds> . -210) (<var-singleton-sep> . -165)
            (<becomes> . -187) (<minus> . -206) (<symbol> . -168)
            (<defining-word> . -182) (<fragment-begin-word> . -190)
            (<fragment-define-word> . -152)
            (<fragment-define-and-begin-word> . -207)
            (<fragment-define-bindings-word> . -204)
            (<fragment-define-bindings-and-begin-word> . -203)
            (<fragment-function-word> . -213)
            (<fragment-local-declaration-word> . -186)
            (<details-begin-word> . -156) (<expr-begin-word> . -150)
            (<simple-begin-word> . -195)
            (<details-intermediate-word> . -174)
            (<expr-intermediate-word> . -170)
            (<simple-intermediate-word> . -158)
            (<method-defining-word> . -146)
            (<generic-function-defining-word> . -193)
            (<seal-word> . -145) (:parsed-name . -211)
            (<rbracket> . 480) (<rsbracket> . 480) (<rcbracket> . 480))
           ((<string> . -471))
           ((:parsed-literal . 491) (:parsed-case-body . 491)
            (:parsed-body . 491) (:parsed-expression . 491)
            (:parsed-variable . 491) (<minus> . 491) (<becomes> . 491)
            (<var-singleton-sep> . 491) (<binds> . 491)
            (<binary-operator> . 491) (<var-sep> . 491)
            (<statement-sep> . 491) (:parsed-name . 491)
            (<seal-word> . 491)
            (<generic-function-defining-word> . 491)
            (<method-defining-word> . 491)
            (<simple-intermediate-word> . 491)
            (<expr-intermediate-word> . 491)
            (<details-intermediate-word> . 491)
            (<simple-begin-word> . 491) (<expr-begin-word> . 491)
            (<details-begin-word> . 491)
            (<fragment-local-declaration-word> . 491)
            (<fragment-function-word> . 491)
            (<fragment-define-bindings-and-begin-word> . 491)
            (<fragment-define-bindings-word> . 491)
            (<fragment-define-and-begin-word> . 491)
            (<fragment-define-word> . 491)
            (<fragment-begin-word> . 491) (<defining-word> . 491)
            (<symbol> . 491) (:otherwise . 491) (:macro . 491)
            (:method . 491) (:local . 491) (:let . 491)
            (:handler . 491) (:generic . 491) (:end . 491)
            (:define . 491) (:&all-keys . 491) (:&key . 491)
            (:&rest . 491) (:&next . 491) (:false . 491) (:true . 491)
            (<not> . 491) (<unary-operator> . 491) (<literal> . 491)
            (<keyword> . 491) (<implies> . 491) (<ellipsis> . 491)
            (<var-type-sep> . 491) (<dot> . 491)
            (<escaped-substitution> . 491) (<string> . 491)
            (<query> . 491) (<query-equal> . 491) (<query-query> . 491)
            (<syntax-open> . 491) (<vector-open> . 491)
            (<list-open> . 491) (<lcbracket> . 491) (<lsbracket> . 491)
            (<lbracket> . 491) (<rcbracket> . 491) (<rbracket> . 491)
            (<rsbracket> . 491))
           ((<rsbracket> . -499))
           ((<rcbracket> . 586) (<rsbracket> . 586) (<rbracket> . 586)
            (<lbracket> . 586) (<lsbracket> . 586) (<lcbracket> . 586)
            (<list-open> . 586) (<vector-open> . 586)
            (<syntax-open> . 586) (<query-query> . 586)
            (<query-equal> . 586) (<query> . 586) (<string> . 586)
            (<escaped-substitution> . 586) (<dot> . 586)
            (<var-type-sep> . 586) (<ellipsis> . 586) (<implies> . 586)
            (<keyword> . 586) (<literal> . 586)
            (<unary-operator> . 586) (<not> . 586) (:true . 586)
            (:false . 586) (:&next . 586) (:&rest . 586) (:&key . 586)
            (:&all-keys . 586) (:define . 586) (:end . 586)
            (:generic . 586) (:handler . 586) (:let . 586)
            (:local . 586) (:method . 586) (:macro . 586)
            (:otherwise . 586) (<symbol> . 586) (<defining-word> . 586)
            (<fragment-begin-word> . 586)
            (<fragment-define-word> . 586)
            (<fragment-define-and-begin-word> . 586)
            (<fragment-define-bindings-word> . 586)
            (<fragment-define-bindings-and-begin-word> . 586)
            (<fragment-function-word> . 586)
            (<fragment-local-declaration-word> . 586)
            (<details-begin-word> . 586) (<expr-begin-word> . 586)
            (<simple-begin-word> . 586)
            (<details-intermediate-word> . 586)
            (<expr-intermediate-word> . 586)
            (<simple-intermediate-word> . 586)
            (<method-defining-word> . 586)
            (<generic-function-defining-word> . 586)
            (<seal-word> . 586) (:parsed-name . 586)
            (<statement-sep> . 586) (<var-sep> . 586)
            (<binary-operator> . 586) (<binds> . 586)
            (<var-singleton-sep> . 586) (<becomes> . 586)
            (<minus> . 586) (:parsed-variable . 586)
            (:parsed-expression . 586) (:parsed-body . 586)
            (:parsed-case-body . 586) (:parsed-literal . 586))
           ((<rbracket> . -498)) ((<rcbracket> . -497))
           ((<rsbracket> . -496)) ((<rbracket> . -495))
           ((<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<keyword> . -221) (<unary-operator> . -65) (<minus> . -64)
            (<not> . -44) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((<rbracket> . -480))
           ((<rsbracket> . 497) (<rbracket> . 497) (<rcbracket> . 497)
            (<lbracket> . 497) (<lsbracket> . 497) (<lcbracket> . 497)
            (<list-open> . 497) (<vector-open> . 497)
            (<syntax-open> . 497) (<query-query> . 497)
            (<query-equal> . 497) (<query> . 497) (<string> . 497)
            (<escaped-substitution> . 497) (<dot> . 497)
            (<var-type-sep> . 497) (<ellipsis> . 497) (<implies> . 497)
            (<keyword> . 497) (<literal> . 497)
            (<unary-operator> . 497) (<not> . 497) (:true . 497)
            (:false . 497) (:&next . 497) (:&rest . 497) (:&key . 497)
            (:&all-keys . 497) (:define . 497) (:end . 497)
            (:generic . 497) (:handler . 497) (:let . 497)
            (:local . 497) (:method . 497) (:macro . 497)
            (:otherwise . 497) (<symbol> . 497) (<defining-word> . 497)
            (<fragment-begin-word> . 497)
            (<fragment-define-word> . 497)
            (<fragment-define-and-begin-word> . 497)
            (<fragment-define-bindings-word> . 497)
            (<fragment-define-bindings-and-begin-word> . 497)
            (<fragment-function-word> . 497)
            (<fragment-local-declaration-word> . 497)
            (<details-begin-word> . 497) (<expr-begin-word> . 497)
            (<simple-begin-word> . 497)
            (<details-intermediate-word> . 497)
            (<expr-intermediate-word> . 497)
            (<simple-intermediate-word> . 497)
            (<method-defining-word> . 497)
            (<generic-function-defining-word> . 497)
            (<seal-word> . 497) (:parsed-name . 497)
            (<statement-sep> . 497) (<var-sep> . 497)
            (<binary-operator> . 497) (<binds> . 497)
            (<var-singleton-sep> . 497) (<becomes> . 497)
            (<minus> . 497) (:parsed-variable . 497)
            (:parsed-expression . 497) (:parsed-body . 497)
            (:parsed-case-body . 497) (:parsed-literal . 497))
           ((<lbracket> . -482))
           ((<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<keyword> . -221) (<unary-operator> . -65) (<minus> . -64)
            (<not> . -44) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((<rbracket> . 191) (<symbol> . -490) (:parsed-name . -489))
           ((<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<keyword> . -221) (<unary-operator> . -65) (<minus> . -64)
            (<not> . -44) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((<rbracket> . 192) (<var-sep> . 192))
           ((<symbol> . -490) (:parsed-name . -489) (<rbracket> . 193)
            (<var-sep> . 193))
           ((:parsed-name . 194) (<symbol> . 194) (<rbracket> . 194)
            (<var-sep> . 194))
           ((<rbracket> . -491))
           ((<keyword> . 546) (<fragment-function-word> . 546)
            (<literal> . 546) (<string> . 546) (:true . 546)
            (:false . 546) (<list-open> . 546) (<vector-open> . 546)
            (:parsed-literal . 546) (<symbol> . 546)
            (<defining-word> . 546) (<method-defining-word> . 546)
            (:generic . 546) (<generic-function-defining-word> . 546)
            (<ellipsis> . 546) (<fragment-define-word> . 546)
            (<fragment-define-bindings-word> . 546)
            (:parsed-name . 546) (:parsed-variable . 546)
            (<lbracket> . 546) (:method . 546)
            (<details-begin-word> . 546) (<expr-begin-word> . 546)
            (<simple-begin-word> . 546) (<fragment-begin-word> . 546)
            (<fragment-define-and-begin-word> . 546)
            (<fragment-define-bindings-and-begin-word> . 546)
            (:macro-case . 546) (:parsed-statement . 546)
            (:parsed-body . 546) (:parsed-expression . 546)
            (<syntax-open> . 546) (<unary-operator> . 546)
            (<minus> . 546) (<not> . 546))
           ((<keyword> . 197) (<fragment-function-word> . 197)
            (<literal> . 197) (<string> . 197) (:true . 197)
            (:false . 197) (<list-open> . 197) (<vector-open> . 197)
            (:parsed-literal . 197) (<symbol> . 197)
            (<defining-word> . 197) (<method-defining-word> . 197)
            (:generic . 197) (<generic-function-defining-word> . 197)
            (<ellipsis> . 197) (<fragment-define-word> . 197)
            (<fragment-define-bindings-word> . 197)
            (:parsed-name . 197) (:parsed-variable . 197)
            (<lbracket> . 197) (:method . 197)
            (<details-begin-word> . 197) (<expr-begin-word> . 197)
            (<simple-begin-word> . 197) (<fragment-begin-word> . 197)
            (<fragment-define-and-begin-word> . 197)
            (<fragment-define-bindings-and-begin-word> . 197)
            (:macro-case . 197) (:parsed-statement . 197)
            (:parsed-body . 197) (:parsed-expression . 197)
            (<syntax-open> . 197) (<unary-operator> . 197)
            (<minus> . 197) (<not> . 197))
           ((:otherwise . 145) (:define . 145) (<seal-word> . 145)
            (:parsed-defining-form . 145) (:let . 145) (:local . 145)
            (<fragment-local-declaration-word> . 145)
            (:parsed-local-declaration . 145) (<keyword> . 145)
            (<fragment-function-word> . 145) (<literal> . 145)
            (<string> . 145) (:true . 145) (:false . 145)
            (<list-open> . 145) (<vector-open> . 145)
            (:parsed-literal . 145) (<symbol> . 145)
            (<defining-word> . 145) (<method-defining-word> . 145)
            (:generic . 145) (<generic-function-defining-word> . 145)
            (<ellipsis> . 145) (<fragment-define-word> . 145)
            (<fragment-define-bindings-word> . 145)
            (:parsed-name . 145) (:parsed-variable . 145)
            (<lbracket> . 145) (:method . 145)
            (<details-begin-word> . 145) (<expr-begin-word> . 145)
            (<simple-begin-word> . 145) (<fragment-begin-word> . 145)
            (<fragment-define-and-begin-word> . 145)
            (<fragment-define-bindings-and-begin-word> . 145)
            (:macro-case . 145) (:parsed-statement . 145)
            (:parsed-body . 145) (:parsed-expression . 145)
            (<syntax-open> . 145) (<unary-operator> . 145)
            (<minus> . 145) (<not> . 145)
            (<details-intermediate-word> . 145)
            (<expr-intermediate-word> . 145)
            (<simple-intermediate-word> . 145) (:end . 145))
           ((<rbracket> . 195) (<symbol> . 195) (:parsed-name . 195)
            (<var-sep> . 195))
           ((<rbracket> . 196) (<symbol> . 196) (:parsed-name . 196)
            (<var-sep> . 196))
           ((<rsbracket> . 489) (<rbracket> . 489) (<rcbracket> . 489)
            (<lbracket> . 489) (<lsbracket> . 489) (<lcbracket> . 489)
            (<list-open> . 489) (<vector-open> . 489)
            (<syntax-open> . 489) (<query-query> . 489)
            (<query-equal> . 489) (<query> . 489) (<string> . 489)
            (<escaped-substitution> . 489) (<dot> . 489)
            (<var-type-sep> . 489) (<ellipsis> . 489) (<implies> . 489)
            (<keyword> . 489) (<literal> . 489)
            (<unary-operator> . 489) (<not> . 489) (:true . 489)
            (:false . 489) (:&next . 489) (:&rest . 489) (:&key . 489)
            (:&all-keys . 489) (:define . 489) (:end . 489)
            (:generic . 489) (:handler . 489) (:let . 489)
            (:local . 489) (:method . 489) (:macro . 489)
            (:otherwise . 489) (<symbol> . 489) (<defining-word> . 489)
            (<fragment-begin-word> . 489)
            (<fragment-define-word> . 489)
            (<fragment-define-and-begin-word> . 489)
            (<fragment-define-bindings-word> . 489)
            (<fragment-define-bindings-and-begin-word> . 489)
            (<fragment-function-word> . 489)
            (<fragment-local-declaration-word> . 489)
            (<details-begin-word> . 489) (<expr-begin-word> . 489)
            (<simple-begin-word> . 489)
            (<details-intermediate-word> . 489)
            (<expr-intermediate-word> . 489)
            (<simple-intermediate-word> . 489)
            (<method-defining-word> . 489)
            (<generic-function-defining-word> . 489)
            (<seal-word> . 489) (:parsed-name . 489)
            (<statement-sep> . 489) (<var-sep> . 489)
            (<binary-operator> . 489) (<binds> . 489)
            (<var-singleton-sep> . 489) (<becomes> . 489)
            (<minus> . 489) (:parsed-variable . 489)
            (:parsed-expression . 489) (:parsed-body . 489)
            (:parsed-case-body . 489) (:parsed-literal . 489))
           ((:parsed-literal . 481) (:parsed-case-body . 481)
            (:parsed-body . 481) (:parsed-expression . 481)
            (:parsed-variable . 481) (<minus> . 481) (<becomes> . 481)
            (<var-singleton-sep> . 481) (<binds> . 481)
            (<binary-operator> . 481) (<var-sep> . 481)
            (<statement-sep> . 481) (:parsed-name . 481)
            (<seal-word> . 481)
            (<generic-function-defining-word> . 481)
            (<method-defining-word> . 481)
            (<simple-intermediate-word> . 481)
            (<expr-intermediate-word> . 481)
            (<details-intermediate-word> . 481)
            (<simple-begin-word> . 481) (<expr-begin-word> . 481)
            (<details-begin-word> . 481)
            (<fragment-local-declaration-word> . 481)
            (<fragment-function-word> . 481)
            (<fragment-define-bindings-and-begin-word> . 481)
            (<fragment-define-bindings-word> . 481)
            (<fragment-define-and-begin-word> . 481)
            (<fragment-define-word> . 481)
            (<fragment-begin-word> . 481) (<defining-word> . 481)
            (<symbol> . 481) (:otherwise . 481) (:macro . 481)
            (:method . 481) (:local . 481) (:let . 481)
            (:handler . 481) (:generic . 481) (:end . 481)
            (:define . 481) (:&all-keys . 481) (:&key . 481)
            (:&rest . 481) (:&next . 481) (:false . 481) (:true . 481)
            (<not> . 481) (<unary-operator> . 481) (<literal> . 481)
            (<keyword> . 481) (<implies> . 481) (<ellipsis> . 481)
            (<var-type-sep> . 481) (<dot> . 481)
            (<escaped-substitution> . 481) (<string> . 481)
            (<query> . 481) (<query-equal> . 481) (<query-query> . 481)
            (<syntax-open> . 481) (<vector-open> . 481)
            (<list-open> . 481) (<lcbracket> . 481) (<lsbracket> . 481)
            (<lbracket> . 481) (<rcbracket> . 481) (<rbracket> . 481)
            (<rsbracket> . 481))
           ((:parsed-literal . 482) (:parsed-case-body . 482)
            (:parsed-body . 482) (:parsed-expression . 482)
            (:parsed-variable . 482) (<minus> . 482) (<becomes> . 482)
            (<var-singleton-sep> . 482) (<binds> . 482)
            (<binary-operator> . 482) (<var-sep> . 482)
            (<statement-sep> . 482) (:parsed-name . 482)
            (<seal-word> . 482)
            (<generic-function-defining-word> . 482)
            (<method-defining-word> . 482)
            (<simple-intermediate-word> . 482)
            (<expr-intermediate-word> . 482)
            (<details-intermediate-word> . 482)
            (<simple-begin-word> . 482) (<expr-begin-word> . 482)
            (<details-begin-word> . 482)
            (<fragment-local-declaration-word> . 482)
            (<fragment-function-word> . 482)
            (<fragment-define-bindings-and-begin-word> . 482)
            (<fragment-define-bindings-word> . 482)
            (<fragment-define-and-begin-word> . 482)
            (<fragment-define-word> . 482)
            (<fragment-begin-word> . 482) (<defining-word> . 482)
            (<symbol> . 482) (:otherwise . 482) (:macro . 482)
            (:method . 482) (:local . 482) (:let . 482)
            (:handler . 482) (:generic . 482) (:end . 482)
            (:define . 482) (:&all-keys . 482) (:&key . 482)
            (:&rest . 482) (:&next . 482) (:false . 482) (:true . 482)
            (<not> . 482) (<unary-operator> . 482) (<literal> . 482)
            (<keyword> . 482) (<implies> . 482) (<ellipsis> . 482)
            (<var-type-sep> . 482) (<dot> . 482)
            (<escaped-substitution> . 482) (<string> . 482)
            (<query> . 482) (<query-equal> . 482) (<query-query> . 482)
            (<syntax-open> . 482) (<vector-open> . 482)
            (<list-open> . 482) (<lcbracket> . 482) (<lsbracket> . 482)
            (<lbracket> . 482) (<rcbracket> . 482) (<rbracket> . 482)
            (<rsbracket> . 482))
           ((:parsed-literal . 483) (:parsed-case-body . 483)
            (:parsed-body . 483) (:parsed-expression . 483)
            (:parsed-variable . 483) (<minus> . 483) (<becomes> . 483)
            (<var-singleton-sep> . 483) (<binds> . 483)
            (<binary-operator> . 483) (<var-sep> . 483)
            (<statement-sep> . 483) (:parsed-name . 483)
            (<seal-word> . 483)
            (<generic-function-defining-word> . 483)
            (<method-defining-word> . 483)
            (<simple-intermediate-word> . 483)
            (<expr-intermediate-word> . 483)
            (<details-intermediate-word> . 483)
            (<simple-begin-word> . 483) (<expr-begin-word> . 483)
            (<details-begin-word> . 483)
            (<fragment-local-declaration-word> . 483)
            (<fragment-function-word> . 483)
            (<fragment-define-bindings-and-begin-word> . 483)
            (<fragment-define-bindings-word> . 483)
            (<fragment-define-and-begin-word> . 483)
            (<fragment-define-word> . 483)
            (<fragment-begin-word> . 483) (<defining-word> . 483)
            (<symbol> . 483) (:otherwise . 483) (:macro . 483)
            (:method . 483) (:local . 483) (:let . 483)
            (:handler . 483) (:generic . 483) (:end . 483)
            (:define . 483) (:&all-keys . 483) (:&key . 483)
            (:&rest . 483) (:&next . 483) (:false . 483) (:true . 483)
            (<not> . 483) (<unary-operator> . 483) (<literal> . 483)
            (<keyword> . 483) (<implies> . 483) (<ellipsis> . 483)
            (<var-type-sep> . 483) (<dot> . 483)
            (<escaped-substitution> . 483) (<string> . 483)
            (<query> . 483) (<query-equal> . 483) (<query-query> . 483)
            (<syntax-open> . 483) (<vector-open> . 483)
            (<list-open> . 483) (<lcbracket> . 483) (<lsbracket> . 483)
            (<lbracket> . 483) (<rcbracket> . 483) (<rbracket> . 483)
            (<rsbracket> . 483))
           ((:parsed-literal . 484) (:parsed-case-body . 484)
            (:parsed-body . 484) (:parsed-expression . 484)
            (:parsed-variable . 484) (<minus> . 484) (<becomes> . 484)
            (<var-singleton-sep> . 484) (<binds> . 484)
            (<binary-operator> . 484) (<var-sep> . 484)
            (<statement-sep> . 484) (:parsed-name . 484)
            (<seal-word> . 484)
            (<generic-function-defining-word> . 484)
            (<method-defining-word> . 484)
            (<simple-intermediate-word> . 484)
            (<expr-intermediate-word> . 484)
            (<details-intermediate-word> . 484)
            (<simple-begin-word> . 484) (<expr-begin-word> . 484)
            (<details-begin-word> . 484)
            (<fragment-local-declaration-word> . 484)
            (<fragment-function-word> . 484)
            (<fragment-define-bindings-and-begin-word> . 484)
            (<fragment-define-bindings-word> . 484)
            (<fragment-define-and-begin-word> . 484)
            (<fragment-define-word> . 484)
            (<fragment-begin-word> . 484) (<defining-word> . 484)
            (<symbol> . 484) (:otherwise . 484) (:macro . 484)
            (:method . 484) (:local . 484) (:let . 484)
            (:handler . 484) (:generic . 484) (:end . 484)
            (:define . 484) (:&all-keys . 484) (:&key . 484)
            (:&rest . 484) (:&next . 484) (:false . 484) (:true . 484)
            (<not> . 484) (<unary-operator> . 484) (<literal> . 484)
            (<keyword> . 484) (<implies> . 484) (<ellipsis> . 484)
            (<var-type-sep> . 484) (<dot> . 484)
            (<escaped-substitution> . 484) (<string> . 484)
            (<query> . 484) (<query-equal> . 484) (<query-query> . 484)
            (<syntax-open> . 484) (<vector-open> . 484)
            (<list-open> . 484) (<lcbracket> . 484) (<lsbracket> . 484)
            (<lbracket> . 484) (<rcbracket> . 484) (<rbracket> . 484)
            (<rsbracket> . 484))
           ((:parsed-literal . 485) (:parsed-case-body . 485)
            (:parsed-body . 485) (:parsed-expression . 485)
            (:parsed-variable . 485) (<minus> . 485) (<becomes> . 485)
            (<var-singleton-sep> . 485) (<binds> . 485)
            (<binary-operator> . 485) (<var-sep> . 485)
            (<statement-sep> . 485) (:parsed-name . 485)
            (<seal-word> . 485)
            (<generic-function-defining-word> . 485)
            (<method-defining-word> . 485)
            (<simple-intermediate-word> . 485)
            (<expr-intermediate-word> . 485)
            (<details-intermediate-word> . 485)
            (<simple-begin-word> . 485) (<expr-begin-word> . 485)
            (<details-begin-word> . 485)
            (<fragment-local-declaration-word> . 485)
            (<fragment-function-word> . 485)
            (<fragment-define-bindings-and-begin-word> . 485)
            (<fragment-define-bindings-word> . 485)
            (<fragment-define-and-begin-word> . 485)
            (<fragment-define-word> . 485)
            (<fragment-begin-word> . 485) (<defining-word> . 485)
            (<symbol> . 485) (:otherwise . 485) (:macro . 485)
            (:method . 485) (:local . 485) (:let . 485)
            (:handler . 485) (:generic . 485) (:end . 485)
            (:define . 485) (:&all-keys . 485) (:&key . 485)
            (:&rest . 485) (:&next . 485) (:false . 485) (:true . 485)
            (<not> . 485) (<unary-operator> . 485) (<literal> . 485)
            (<keyword> . 485) (<implies> . 485) (<ellipsis> . 485)
            (<var-type-sep> . 485) (<dot> . 485)
            (<escaped-substitution> . 485) (<string> . 485)
            (<query> . 485) (<query-equal> . 485) (<query-query> . 485)
            (<syntax-open> . 485) (<vector-open> . 485)
            (<list-open> . 485) (<lcbracket> . 485) (<lsbracket> . 485)
            (<lbracket> . 485) (<rcbracket> . 485) (<rbracket> . 485)
            (<rsbracket> . 485))
           ((:parsed-literal . 486) (:parsed-case-body . 486)
            (:parsed-body . 486) (:parsed-expression . 486)
            (:parsed-variable . 486) (<minus> . 486) (<becomes> . 486)
            (<var-singleton-sep> . 486) (<binds> . 486)
            (<binary-operator> . 486) (<var-sep> . 486)
            (<statement-sep> . 486) (:parsed-name . 486)
            (<seal-word> . 486)
            (<generic-function-defining-word> . 486)
            (<method-defining-word> . 486)
            (<simple-intermediate-word> . 486)
            (<expr-intermediate-word> . 486)
            (<details-intermediate-word> . 486)
            (<simple-begin-word> . 486) (<expr-begin-word> . 486)
            (<details-begin-word> . 486)
            (<fragment-local-declaration-word> . 486)
            (<fragment-function-word> . 486)
            (<fragment-define-bindings-and-begin-word> . 486)
            (<fragment-define-bindings-word> . 486)
            (<fragment-define-and-begin-word> . 486)
            (<fragment-define-word> . 486)
            (<fragment-begin-word> . 486) (<defining-word> . 486)
            (<symbol> . 486) (:otherwise . 486) (:macro . 486)
            (:method . 486) (:local . 486) (:let . 486)
            (:handler . 486) (:generic . 486) (:end . 486)
            (:define . 486) (:&all-keys . 486) (:&key . 486)
            (:&rest . 486) (:&next . 486) (:false . 486) (:true . 486)
            (<not> . 486) (<unary-operator> . 486) (<literal> . 486)
            (<keyword> . 486) (<implies> . 486) (<ellipsis> . 486)
            (<var-type-sep> . 486) (<dot> . 486)
            (<escaped-substitution> . 486) (<string> . 486)
            (<query> . 486) (<query-equal> . 486) (<query-query> . 486)
            (<syntax-open> . 486) (<vector-open> . 486)
            (<list-open> . 486) (<lcbracket> . 486) (<lsbracket> . 486)
            (<lbracket> . 486) (<rcbracket> . 486) (<rbracket> . 486)
            (<rsbracket> . 486))
           ((:&all-keys . -447) (<query> . -424) (<ellipsis> . -437)
            (<query-query> . -446))
           ((<statement-sep> . 423) (<rcbracket> . 423) (:end . 423)
            (<rbracket> . 423) (<rsbracket> . 423))
           ((<rsbracket> . 425) (<rbracket> . 425) (:end . 425)
            (<rcbracket> . 425) (<statement-sep> . 425)
            (<var-sep> . 425))
           ((<rsbracket> . 430) (<rbracket> . 430) (:end . 430)
            (<rcbracket> . 430) (<statement-sep> . 430)
            (<var-sep> . 430) (<binds> . 430))
           ((<rsbracket> . 414) (<rbracket> . 414) (:end . 414)
            (<rcbracket> . 414) (<statement-sep> . 414)
            (<var-sep> . 414) (<query> . 414) (<ellipsis> . 414)
            (<lbracket> . 414) (<lsbracket> . 414) (<lcbracket> . 414)
            (<symbol> . 414) (<defining-word> . 414)
            (<fragment-define-word> . 414)
            (<fragment-define-bindings-word> . 414)
            (<binary-operator> . 414) (<minus> . 414) (<binds> . 414)
            (<var-singleton-sep> . 414) (<becomes> . 414) (<not> . 414)
            (:parsed-name . 414) (:otherwise . 414) (<implies> . 414)
            (<escaped-hash-word> . 414) (<literal> . 414)
            (<string> . 414) (<keyword> . 414) (:true . 414)
            (:false . 414) (<list-open> . 414) (<vector-open> . 414)
            (<var-type-sep> . 414) (<splice> . 414))
           ((<implies> . -507))
           ((<lcbracket> . -508) (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<keyword> . -221) (<unary-operator> . -65) (<minus> . -64)
            (<not> . -44) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((<rcbracket> . 476) (<query> . -153) (<lbracket> . -157)
            (<lsbracket> . -161) (<lcbracket> . -169)
            (<list-open> . -180) (<vector-open> . -188)
            (<syntax-open> . -196) (<query-query> . -212)
            (<query-equal> . -148) (<string> . -197)
            (<escaped-substitution> . -155) (<dot> . -163)
            (<var-type-sep> . -179) (<ellipsis> . -202)
            (<implies> . -171) (<keyword> . -176) (<literal> . -192)
            (<unary-operator> . -208) (<not> . -185) (:true . -143)
            (:false . -149) (:&next . -194) (:&rest . -209)
            (:&key . -142) (:&all-keys . -173) (:define . -166)
            (:end . -199) (:generic . -167) (:handler . -177)
            (:let . -154) (:local . -162) (:method . -159)
            (:macro . -198) (:otherwise . -144)
            (:parsed-variable . -151) (:parsed-expression . -189)
            (:parsed-body . -201) (:parsed-case-body . -147)
            (:parsed-literal . -200) (<statement-sep> . -175)
            (<var-sep> . -183) (<binary-operator> . -178)
            (<binds> . -210) (<var-singleton-sep> . -165)
            (<becomes> . -187) (<minus> . -206) (<symbol> . -168)
            (<defining-word> . -182) (<fragment-begin-word> . -190)
            (<fragment-define-word> . -152)
            (<fragment-define-and-begin-word> . -207)
            (<fragment-define-bindings-word> . -204)
            (<fragment-define-bindings-and-begin-word> . -203)
            (<fragment-function-word> . -213)
            (<fragment-local-declaration-word> . -186)
            (<details-begin-word> . -156) (<expr-begin-word> . -150)
            (<simple-begin-word> . -195)
            (<details-intermediate-word> . -174)
            (<expr-intermediate-word> . -170)
            (<simple-intermediate-word> . -158)
            (<method-defining-word> . -146)
            (<generic-function-defining-word> . -193)
            (<seal-word> . -145) (:parsed-name . -211))
           ((<lcbracket> . 261) (<keyword> . 261) (:end . 261)
            (<statement-sep> . -374))
           ((<statement-sep> . 385) (<lcbracket> . 385)
            (<keyword> . 385) (:end . 385))
           ((:end . 383) (<keyword> . 383) (<lcbracket> . 383))
           ((<rcbracket> . -513))
           ((<statement-sep> . 384) (<lcbracket> . 384)
            (<keyword> . 384) (:end . 384))
           ((<query> . -424) (<ellipsis> . -437))
           ((<splice> . -516) (<vector-open> . 406) (<list-open> . 406)
            (:false . 406) (:true . 406) (<keyword> . 406)
            (<string> . 406) (<literal> . 406)
            (<escaped-hash-word> . 406) (<implies> . 406)
            (:otherwise . 406) (:parsed-name . 406) (<not> . 406)
            (<becomes> . 406) (<var-singleton-sep> . 406)
            (<binds> . 406) (<minus> . 406) (<binary-operator> . 406)
            (<fragment-define-bindings-word> . 406)
            (<fragment-define-word> . 406) (<defining-word> . 406)
            (<symbol> . 406) (<lcbracket> . 406) (<lsbracket> . 406)
            (<lbracket> . 406) (<ellipsis> . 406) (<query> . 406)
            (<var-sep> . 406) (<statement-sep> . 406)
            (<rcbracket> . 406) (:end . 406) (<rbracket> . 406)
            (<rsbracket> . 406))
           ((<string> . -517))
           ((<vector-open> . 408) (<list-open> . 408) (:false . 408)
            (:true . 408) (<keyword> . 408) (<string> . 408)
            (<literal> . 408) (<escaped-hash-word> . 408)
            (<implies> . 408) (:otherwise . 408) (:parsed-name . 408)
            (<not> . 408) (<becomes> . 408) (<var-singleton-sep> . 408)
            (<binds> . 408) (<minus> . 408) (<binary-operator> . 408)
            (<fragment-define-bindings-word> . 408)
            (<fragment-define-word> . 408) (<defining-word> . 408)
            (<symbol> . 408) (<lcbracket> . 408) (<lsbracket> . 408)
            (<lbracket> . 408) (<ellipsis> . 408) (<query> . 408)
            (<var-sep> . 408) (<statement-sep> . 408)
            (<rcbracket> . 408) (:end . 408) (<rbracket> . 408)
            (<rsbracket> . 408))
           ((<rsbracket> . 588) (<rbracket> . 588) (:end . 588)
            (<rcbracket> . 588) (<statement-sep> . 588)
            (<var-sep> . 588) (<query> . 588) (<ellipsis> . 588)
            (<lbracket> . 588) (<lsbracket> . 588) (<lcbracket> . 588)
            (<symbol> . 588) (<defining-word> . 588)
            (<fragment-define-word> . 588)
            (<fragment-define-bindings-word> . 588)
            (<binary-operator> . 588) (<minus> . 588) (<binds> . 588)
            (<var-singleton-sep> . 588) (<becomes> . 588) (<not> . 588)
            (:parsed-name . 588) (:otherwise . 588) (<implies> . 588)
            (<escaped-hash-word> . 588) (<literal> . 588)
            (<string> . 588) (<keyword> . 588) (:true . 588)
            (:false . 588) (<list-open> . 588) (<vector-open> . 588))
           ((<string> . -522)) ((<query> . -424) (<ellipsis> . -437))
           ((<vector-open> . 403) (<list-open> . 403) (:false . 403)
            (:true . 403) (<keyword> . 403) (<string> . 403)
            (<literal> . 403) (<escaped-hash-word> . 403)
            (<implies> . 403) (:otherwise . 403) (:parsed-name . 403)
            (<not> . 403) (<becomes> . 403) (<var-singleton-sep> . 403)
            (<binds> . 403) (<minus> . 403) (<binary-operator> . 403)
            (<fragment-define-bindings-word> . 403)
            (<fragment-define-word> . 403) (<defining-word> . 403)
            (<symbol> . 403) (<lcbracket> . 403) (<lsbracket> . 403)
            (<lbracket> . 403) (<ellipsis> . 403) (<query> . 403)
            (<var-sep> . 403) (<statement-sep> . 403)
            (<rcbracket> . 403) (:end . 403) (<rbracket> . 403)
            (<rsbracket> . 403))
           ((<vector-open> . 407) (<list-open> . 407) (:false . 407)
            (:true . 407) (<keyword> . 407) (<string> . 407)
            (<literal> . 407) (<escaped-hash-word> . 407)
            (<implies> . 407) (:otherwise . 407) (:parsed-name . 407)
            (<not> . 407) (<becomes> . 407) (<var-singleton-sep> . 407)
            (<binds> . 407) (<minus> . 407) (<binary-operator> . 407)
            (<fragment-define-bindings-word> . 407)
            (<fragment-define-word> . 407) (<defining-word> . 407)
            (<symbol> . 407) (<lcbracket> . 407) (<lsbracket> . 407)
            (<lbracket> . 407) (<ellipsis> . 407) (<query> . 407)
            (<var-sep> . 407) (<statement-sep> . 407)
            (<rcbracket> . 407) (:end . 407) (<rbracket> . 407)
            (<rsbracket> . 407))
           ((<rcbracket> . -524))
           ((<vector-open> . 413) (<list-open> . 413) (:false . 413)
            (:true . 413) (<keyword> . 413) (<string> . 413)
            (<literal> . 413) (<escaped-hash-word> . 413)
            (<implies> . 413) (:otherwise . 413) (:parsed-name . 413)
            (<not> . 413) (<becomes> . 413) (<var-singleton-sep> . 413)
            (<binds> . 413) (<minus> . 413) (<binary-operator> . 413)
            (<fragment-define-bindings-word> . 413)
            (<fragment-define-word> . 413) (<defining-word> . 413)
            (<symbol> . 413) (<lcbracket> . 413) (<lsbracket> . 413)
            (<lbracket> . 413) (<ellipsis> . 413) (<query> . 413)
            (<var-sep> . 413) (<statement-sep> . 413)
            (<rcbracket> . 413) (:end . 413) (<rbracket> . 413)
            (<rsbracket> . 413))
           ((<rsbracket> . 392) (<rbracket> . 392) (:end . 392)
            (<rcbracket> . 392) (<literal> . -124) (<string> . -436)
            (<keyword> . -112) (:true . -87) (:false . -92)
            (<list-open> . -116) (<vector-open> . -122)
            (<symbol> . -105) (<defining-word> . -117)
            (<fragment-define-word> . -95)
            (<fragment-define-bindings-word> . -132)
            (<binary-operator> . -113) (<minus> . -134)
            (<binds> . -136) (<var-singleton-sep> . -104)
            (<becomes> . -120) (<not> . -119) (<lbracket> . -425)
            (<lsbracket> . -427) (<lcbracket> . -429) (<query> . -424)
            (<ellipsis> . -437) (:&rest . -439) (:&key . -418)
            (:parsed-name . -440) (:otherwise . -419)
            (<implies> . -430) (<escaped-hash-word> . -426))
           ((<rcbracket> . 393) (:end . 393) (<rbracket> . 393)
            (<rsbracket> . 393))
           ((<rcbracket> . 395) (:end . 395) (<rbracket> . 395)
            (<rsbracket> . 395))
           ((<rsbracket> . -529))
           ((<vector-open> . 412) (<list-open> . 412) (:false . 412)
            (:true . 412) (<keyword> . 412) (<string> . 412)
            (<literal> . 412) (<escaped-hash-word> . 412)
            (<implies> . 412) (:otherwise . 412) (:parsed-name . 412)
            (<not> . 412) (<becomes> . 412) (<var-singleton-sep> . 412)
            (<binds> . 412) (<minus> . 412) (<binary-operator> . 412)
            (<fragment-define-bindings-word> . 412)
            (<fragment-define-word> . 412) (<defining-word> . 412)
            (<symbol> . 412) (<lcbracket> . 412) (<lsbracket> . 412)
            (<lbracket> . 412) (<ellipsis> . 412) (<query> . 412)
            (<var-sep> . 412) (<statement-sep> . 412)
            (<rcbracket> . 412) (:end . 412) (<rbracket> . 412)
            (<rsbracket> . 412))
           ((<rbracket> . -531))
           ((<vector-open> . 411) (<list-open> . 411) (:false . 411)
            (:true . 411) (<keyword> . 411) (<string> . 411)
            (<literal> . 411) (<escaped-hash-word> . 411)
            (<implies> . 411) (:otherwise . 411) (:parsed-name . 411)
            (<not> . 411) (<becomes> . 411) (<var-singleton-sep> . 411)
            (<binds> . 411) (<minus> . 411) (<binary-operator> . 411)
            (<fragment-define-bindings-word> . 411)
            (<fragment-define-word> . 411) (<defining-word> . 411)
            (<symbol> . 411) (<lcbracket> . 411) (<lsbracket> . 411)
            (<lbracket> . 411) (<ellipsis> . 411) (<query> . 411)
            (<var-sep> . 411) (<statement-sep> . 411)
            (<rcbracket> . 411) (:end . 411) (<rbracket> . 411)
            (<rsbracket> . 411))
           ((<literal> . -124) (<string> . -436) (<keyword> . -112)
            (:true . -87) (:false . -92) (<list-open> . -116)
            (<vector-open> . -122) (<symbol> . -105)
            (<defining-word> . -117) (<fragment-define-word> . -95)
            (<fragment-define-bindings-word> . -132)
            (<binary-operator> . -113) (<minus> . -134)
            (<binds> . -136) (<var-singleton-sep> . -104)
            (<becomes> . -120) (<not> . -119) (<lbracket> . -425)
            (<lsbracket> . -427) (<lcbracket> . -429) (<query> . -424)
            (<ellipsis> . -437) (:&rest . -439) (:&key . -418)
            (:parsed-name . -440) (:otherwise . -419)
            (<implies> . -430) (<escaped-hash-word> . -426))
           ((<statement-sep> . 400) (<rcbracket> . 400) (:end . 400)
            (<rbracket> . 400) (<rsbracket> . 400))
           ((<rsbracket> . 418) (<rbracket> . 418) (:end . 418)
            (<rcbracket> . 418) (<statement-sep> . 418))
           ((<lcbracket> . -416)) ((<keyword> . -535) (:end . 381))
           ((:end . -540)) ((<keyword> . 591) (:end . 591))
           ((:end . 590) (<keyword> . 590) (<lcbracket> . 590))
           ((<dot> . 369) (<lsbracket> . 369) (<lbracket> . 369)
            (<becomes> . 369) (<var-singleton-sep> . 369)
            (<binds> . 369) (<minus> . 369) (<binary-operator> . 369)
            (:end . 369) (<statement-sep> . 369) (<implies> . 369)
            (<var-sep> . 369) (<syntax-open> . 369)
            (:parsed-literal . 369) (:parsed-case-body . 369)
            (:parsed-body . 369) (:parsed-expression . 369)
            (:parsed-variable . 369) (:parsed-name . 369)
            (<query-equal> . 369) (<query-query> . 369) (<query> . 369)
            (<ellipsis> . 369) (<var-type-sep> . 369)
            (:otherwise . 369) (:&all-keys . 369) (:&key . 369)
            (:&rest . 369) (:&next . 369)
            (<fragment-function-word> . 369) (<lcbracket> . 369)
            (<not> . 369) (<fragment-define-bindings-word> . 369)
            (<fragment-define-word> . 369) (<defining-word> . 369)
            (<symbol> . 369) (<vector-open> . 369) (<list-open> . 369)
            (:false . 369) (:true . 369) (<keyword> . 369)
            (<string> . 369) (<literal> . 369)
            (:parsed-local-declaration . 369)
            (<fragment-local-declaration-word> . 369) (:local . 369)
            (:let . 369) (:parsed-defining-form . 369)
            (<seal-word> . 369) (:define . 369) (<rbracket> . 369)
            (<rsbracket> . 369) (<simple-intermediate-word> . 369)
            (<expr-intermediate-word> . 369)
            (<details-intermediate-word> . 369) (<rcbracket> . 369)
            (:macro-case . -542))
           ((<rcbracket> . 368) (<details-intermediate-word> . 368)
            (<expr-intermediate-word> . 368)
            (<simple-intermediate-word> . 368) (<rsbracket> . 368)
            (<rbracket> . 368) (:define . 368) (<seal-word> . 368)
            (:parsed-defining-form . 368) (:let . 368) (:local . 368)
            (<fragment-local-declaration-word> . 368)
            (:parsed-local-declaration . 368) (<literal> . 368)
            (<string> . 368) (<keyword> . 368) (:true . 368)
            (:false . 368) (<list-open> . 368) (<vector-open> . 368)
            (<symbol> . 368) (<defining-word> . 368)
            (<fragment-define-word> . 368)
            (<fragment-define-bindings-word> . 368) (<not> . 368)
            (<lcbracket> . 368) (<fragment-function-word> . 368)
            (:&next . 368) (:&rest . 368) (:&key . 368)
            (:&all-keys . 368) (:otherwise . 368)
            (<var-type-sep> . 368) (<ellipsis> . 368) (<query> . 368)
            (<query-query> . 368) (<query-equal> . 368)
            (:parsed-name . 368) (:parsed-variable . 368)
            (:parsed-expression . 368) (:parsed-body . 368)
            (:parsed-case-body . 368) (:parsed-literal . 368)
            (<syntax-open> . 368) (<var-sep> . 368) (<implies> . 368)
            (<statement-sep> . 368) (:end . 368)
            (<binary-operator> . 368) (<minus> . 368) (<binds> . 368)
            (<var-singleton-sep> . 368) (<becomes> . 368)
            (<lbracket> . 368) (<lsbracket> . 368) (<dot> . 368))
           ((<rcbracket> . 370) (<details-intermediate-word> . 370)
            (<expr-intermediate-word> . 370)
            (<simple-intermediate-word> . 370) (<rsbracket> . 370)
            (<rbracket> . 370) (:define . 370) (<seal-word> . 370)
            (:parsed-defining-form . 370) (:let . 370) (:local . 370)
            (<fragment-local-declaration-word> . 370)
            (:parsed-local-declaration . 370) (<literal> . 370)
            (<string> . 370) (<keyword> . 370) (:true . 370)
            (:false . 370) (<list-open> . 370) (<vector-open> . 370)
            (<symbol> . 370) (<defining-word> . 370)
            (<fragment-define-word> . 370)
            (<fragment-define-bindings-word> . 370) (<not> . 370)
            (<lcbracket> . 370) (<fragment-function-word> . 370)
            (:&next . 370) (:&rest . 370) (:&key . 370)
            (:&all-keys . 370) (:otherwise . 370)
            (<var-type-sep> . 370) (<ellipsis> . 370) (<query> . 370)
            (<query-query> . 370) (<query-equal> . 370)
            (:parsed-name . 370) (:parsed-variable . 370)
            (:parsed-expression . 370) (:parsed-body . 370)
            (:parsed-case-body . 370) (:parsed-literal . 370)
            (<syntax-open> . 370) (<var-sep> . 370) (<implies> . 370)
            (<statement-sep> . 370) (:end . 370)
            (<binary-operator> . 370) (<minus> . 370) (<binds> . 370)
            (<var-singleton-sep> . 370) (<becomes> . 370)
            (<lbracket> . 370) (<lsbracket> . 370) (<dot> . 370))
           ((:end . 592) (<keyword> . 592))
           ((<lcbracket> . -416) (:end . 382) (<keyword> . 382))
           ((<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<keyword> . -221) (<unary-operator> . -65) (<minus> . -64)
            (<not> . -44) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((<var-sep> . 186) (<rbracket> . 186))
           ((<rbracket> . 187) (<var-sep> . 187))
           ((<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<keyword> . -221) (<unary-operator> . -65) (<minus> . -64)
            (<not> . -44) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((<var-sep> . 191) (<rbracket> . 191) (<symbol> . -490)
            (:parsed-name . -489))
           ((<rbracket> . 188) (<var-sep> . 188)) ((<rbracket> . 184))
           ((<var-sep> . -561) (<binds> . 81) (<rbracket> . 81))
           ((:parsed-name . -66) (:parsed-variable . -14)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59))
           ((<rbracket> . -555))
           ((<binds> . -557) (<var-sep> . 191) (<rbracket> . 191)
            (<symbol> . -490) (:parsed-name . -489))
           ((<rbracket> . 189) (<var-sep> . 189))
           ((<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<keyword> . -221) (<unary-operator> . -65) (<minus> . -64)
            (<not> . -44) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((<var-sep> . 191) (<rbracket> . 191) (<symbol> . -490)
            (:parsed-name . -489))
           ((<rbracket> . 190) (<var-sep> . 190))
           ((<rbracket> . 80) (<binds> . 80))
           ((:&rest . -553) (:generic . -33)
            (<generic-function-defining-word> . -50) (<symbol> . -34)
            (<defining-word> . -42) (<method-defining-word> . -5)
            (<ellipsis> . -58) (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59)
            (:parsed-name . -66) (:parsed-variable . -14))
           ((<binds> . 82) (<rbracket> . 82))
           ((:parsed-name . 86) (<symbol> . 86) (<binds> . 86)
            (<rbracket> . 86) (<var-sep> . 86) (:end . 86))
           ((<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((:end . 87) (<rbracket> . 87) (<symbol> . 87)
            (:parsed-name . 87) (<binds> . 87) (<var-sep> . 87)
            (<statement-sep> . 87))
           ((<dot> . -74) (<lsbracket> . -73) (<lbracket> . -72)
            (<binds> . 88) (:end . 88) (<rbracket> . 88)
            (<symbol> . 88) (:parsed-name . 88) (<var-sep> . 88)
            (<statement-sep> . 88))
           ((<lcbracket> . 179) (<statement-sep> . 179) (<not> . 179)
            (<minus> . 179) (<unary-operator> . 179)
            (<syntax-open> . 179) (:parsed-expression . 179)
            (:parsed-body . 179) (:parsed-statement . 179)
            (:macro-case . 179)
            (<fragment-define-bindings-and-begin-word> . 179)
            (<fragment-define-and-begin-word> . 179)
            (<fragment-begin-word> . 179) (<simple-begin-word> . 179)
            (<expr-begin-word> . 179) (<details-begin-word> . 179)
            (:method . 179) (<lbracket> . 179) (:parsed-variable . 179)
            (:parsed-name . 179)
            (<fragment-define-bindings-word> . 179)
            (<fragment-define-word> . 179) (<ellipsis> . 179)
            (<generic-function-defining-word> . 179) (:generic . 179)
            (<method-defining-word> . 179) (<defining-word> . 179)
            (<symbol> . 179) (:parsed-literal . 179)
            (<vector-open> . 179) (<list-open> . 179) (:false . 179)
            (:true . 179) (<string> . 179) (<literal> . 179)
            (<fragment-function-word> . 179) (<keyword> . 179)
            (:parsed-local-declaration . 179)
            (<fragment-local-declaration-word> . 179) (:local . 179)
            (:let . 179) (:parsed-defining-form . 179)
            (<seal-word> . 179) (:define . 179)
            (<simple-intermediate-word> . 179)
            (<expr-intermediate-word> . 179)
            (<details-intermediate-word> . 179) (:end . 179)
            (:otherwise . 179))
           ((<rbracket> . 18) (<var-sep> . -392)) ((<rbracket> . 29))
           ((<var-sep> . -392) (<rbracket> . 19))
           ((<var-sep> . -572) (<rbracket> . -360))
           ((<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<keyword> . -221) (<unary-operator> . -65) (<minus> . -64)
            (<not> . -44) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((<var-sep> . -576) (<rbracket> . -575))
           ((<implies> . 607) (<var-sep> . 607) (<rbracket> . 607))
           ((<implies> . -578))
           ((<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<keyword> . -221) (<unary-operator> . -65) (<minus> . -64)
            (<not> . -44) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((<var-sep> . 608) (<rbracket> . 608) (<implies> . 608))
           ((:end . 177) (:define . 177) (<seal-word> . 177)
            (:parsed-defining-form . 177) (:let . 177) (:local . 177)
            (<fragment-local-declaration-word> . 177)
            (:parsed-local-declaration . 177) (<keyword> . 177)
            (<fragment-function-word> . 177) (<literal> . 177)
            (<string> . 177) (:true . 177) (:false . 177)
            (<list-open> . 177) (<vector-open> . 177)
            (:parsed-literal . 177) (<symbol> . 177)
            (<defining-word> . 177) (<method-defining-word> . 177)
            (:generic . 177) (<generic-function-defining-word> . 177)
            (<ellipsis> . 177) (<fragment-define-word> . 177)
            (<fragment-define-bindings-word> . 177)
            (:parsed-name . 177) (:parsed-variable . 177)
            (<lbracket> . 177) (:method . 177)
            (<details-begin-word> . 177) (<expr-begin-word> . 177)
            (<simple-begin-word> . 177) (<fragment-begin-word> . 177)
            (<fragment-define-and-begin-word> . 177)
            (<fragment-define-bindings-and-begin-word> . 177)
            (:macro-case . 177) (:parsed-statement . 177)
            (:parsed-body . 177) (:parsed-expression . 177)
            (<syntax-open> . 177) (<unary-operator> . 177)
            (<minus> . 177) (<not> . 177) (<statement-sep> . 177))
           ((<dot> . 279) (<lsbracket> . 279) (<lbracket> . 279)
            (<becomes> . 279) (<var-singleton-sep> . 279)
            (<binds> . 279) (<minus> . 279) (<binary-operator> . 279)
            (:end . 279) (<statement-sep> . 279) (<implies> . 279)
            (<var-sep> . 279) (<syntax-open> . 279)
            (:parsed-literal . 279) (:parsed-case-body . 279)
            (:parsed-body . 279) (:parsed-expression . 279)
            (:parsed-variable . 279) (:parsed-name . 279)
            (<query-equal> . 279) (<query-query> . 279) (<query> . 279)
            (<ellipsis> . 279) (<var-type-sep> . 279)
            (:otherwise . 279) (:&all-keys . 279) (:&key . 279)
            (:&rest . 279) (:&next . 279)
            (<fragment-function-word> . 279) (<lcbracket> . 279)
            (<not> . 279) (<fragment-define-bindings-word> . 279)
            (<fragment-define-word> . 279) (<defining-word> . 279)
            (<symbol> . 279) (<vector-open> . 279) (<list-open> . 279)
            (:false . 279) (:true . 279) (<keyword> . 279)
            (<string> . 279) (<literal> . 279)
            (:parsed-local-declaration . 279)
            (<fragment-local-declaration-word> . 279) (:local . 279)
            (:let . 279) (:parsed-defining-form . 279)
            (<seal-word> . 279) (:define . 279) (<rbracket> . 279)
            (<rsbracket> . 279) (<simple-intermediate-word> . 279)
            (<expr-intermediate-word> . 279)
            (<details-intermediate-word> . 279) (<rcbracket> . 279)
            (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (<details-begin-word> . -585) (<expr-begin-word> . -582)
            (<simple-begin-word> . -583))
           ((<dot> . 143) (<lsbracket> . 143) (<lbracket> . 143)
            (<becomes> . 143) (<var-singleton-sep> . 143)
            (<binds> . 143) (<minus> . 143) (<binary-operator> . 143)
            (:end . 143) (<statement-sep> . 143) (<implies> . 143)
            (<var-sep> . 143) (<syntax-open> . 143)
            (:parsed-literal . 143) (:parsed-case-body . 143)
            (:parsed-body . 143) (:parsed-expression . 143)
            (:parsed-variable . 143) (:parsed-name . 143)
            (<query-equal> . 143) (<query-query> . 143) (<query> . 143)
            (<ellipsis> . 143) (<var-type-sep> . 143)
            (:otherwise . 143) (:&all-keys . 143) (:&key . 143)
            (:&rest . 143) (:&next . 143)
            (<fragment-function-word> . 143) (<lcbracket> . 143)
            (<not> . 143) (<fragment-define-bindings-word> . 143)
            (<fragment-define-word> . 143) (<defining-word> . 143)
            (<symbol> . 143) (<vector-open> . 143) (<list-open> . 143)
            (:false . 143) (:true . 143) (<keyword> . 143)
            (<string> . 143) (<literal> . 143)
            (:parsed-local-declaration . 143)
            (<fragment-local-declaration-word> . 143) (:local . 143)
            (:let . 143) (:parsed-defining-form . 143)
            (<seal-word> . 143) (:define . 143) (<rbracket> . 143)
            (<rsbracket> . 143) (<simple-intermediate-word> . 143)
            (<expr-intermediate-word> . 143)
            (<details-intermediate-word> . 143) (<rcbracket> . 143))
           ((<rcbracket> . 280) (<details-intermediate-word> . 280)
            (<expr-intermediate-word> . 280)
            (<simple-intermediate-word> . 280) (<rsbracket> . 280)
            (<rbracket> . 280) (:define . 280) (<seal-word> . 280)
            (:parsed-defining-form . 280) (:let . 280) (:local . 280)
            (<fragment-local-declaration-word> . 280)
            (:parsed-local-declaration . 280) (<literal> . 280)
            (<string> . 280) (<keyword> . 280) (:true . 280)
            (:false . 280) (<list-open> . 280) (<vector-open> . 280)
            (<symbol> . 280) (<defining-word> . 280)
            (<fragment-define-word> . 280)
            (<fragment-define-bindings-word> . 280) (<not> . 280)
            (<lcbracket> . 280) (<fragment-function-word> . 280)
            (:&next . 280) (:&rest . 280) (:&key . 280)
            (:&all-keys . 280) (:otherwise . 280)
            (<var-type-sep> . 280) (<ellipsis> . 280) (<query> . 280)
            (<query-query> . 280) (<query-equal> . 280)
            (:parsed-name . 280) (:parsed-variable . 280)
            (:parsed-expression . 280) (:parsed-body . 280)
            (:parsed-case-body . 280) (:parsed-literal . 280)
            (<syntax-open> . 280) (<var-sep> . 280) (<implies> . 280)
            (<statement-sep> . 280) (:end . 280)
            (<binary-operator> . 280) (<minus> . 280) (<binds> . 280)
            (<var-singleton-sep> . 280) (<becomes> . 280)
            (<lbracket> . 280) (<lsbracket> . 280) (<dot> . 280))
           ((<rcbracket> . 161) (<details-intermediate-word> . 161)
            (<expr-intermediate-word> . 161)
            (<simple-intermediate-word> . 161) (<rsbracket> . 161)
            (<rbracket> . 161) (:define . 161) (<seal-word> . 161)
            (:parsed-defining-form . 161) (:let . 161) (:local . 161)
            (<fragment-local-declaration-word> . 161)
            (:parsed-local-declaration . 161) (<literal> . 161)
            (<string> . 161) (<keyword> . 161) (:true . 161)
            (:false . 161) (<list-open> . 161) (<vector-open> . 161)
            (<symbol> . 161) (<defining-word> . 161)
            (<fragment-define-word> . 161)
            (<fragment-define-bindings-word> . 161) (<not> . 161)
            (<lcbracket> . 161) (<fragment-function-word> . 161)
            (:&next . 161) (:&rest . 161) (:&key . 161)
            (:&all-keys . 161) (:otherwise . 161)
            (<var-type-sep> . 161) (<ellipsis> . 161) (<query> . 161)
            (<query-query> . 161) (<query-equal> . 161)
            (:parsed-name . 161) (:parsed-variable . 161)
            (:parsed-expression . 161) (:parsed-body . 161)
            (:parsed-case-body . 161) (:parsed-literal . 161)
            (<syntax-open> . 161) (<var-sep> . 161) (<implies> . 161)
            (<statement-sep> . 161) (:end . 161)
            (<binary-operator> . 161) (<minus> . 161) (<binds> . 161)
            (<var-singleton-sep> . 161) (<becomes> . 161)
            (<lbracket> . 161) (<lsbracket> . 161) (<dot> . 161))
           ((<rcbracket> . 162) (<details-intermediate-word> . 162)
            (<expr-intermediate-word> . 162)
            (<simple-intermediate-word> . 162) (<rsbracket> . 162)
            (<rbracket> . 162) (:define . 162) (<seal-word> . 162)
            (:parsed-defining-form . 162) (:let . 162) (:local . 162)
            (<fragment-local-declaration-word> . 162)
            (:parsed-local-declaration . 162) (<literal> . 162)
            (<string> . 162) (<keyword> . 162) (:true . 162)
            (:false . 162) (<list-open> . 162) (<vector-open> . 162)
            (<symbol> . 162) (<defining-word> . 162)
            (<fragment-define-word> . 162)
            (<fragment-define-bindings-word> . 162) (<not> . 162)
            (<lcbracket> . 162) (<fragment-function-word> . 162)
            (:&next . 162) (:&rest . 162) (:&key . 162)
            (:&all-keys . 162) (:otherwise . 162)
            (<var-type-sep> . 162) (<ellipsis> . 162) (<query> . 162)
            (<query-query> . 162) (<query-equal> . 162)
            (:parsed-name . 162) (:parsed-variable . 162)
            (:parsed-expression . 162) (:parsed-body . 162)
            (:parsed-case-body . 162) (:parsed-literal . 162)
            (<syntax-open> . 162) (<var-sep> . 162) (<implies> . 162)
            (<statement-sep> . 162) (:end . 162)
            (<binary-operator> . 162) (<minus> . 162) (<binds> . 162)
            (<var-singleton-sep> . 162) (<becomes> . 162)
            (<lbracket> . 162) (<lsbracket> . 162) (<dot> . 162))
           ((<rcbracket> . 282) (<details-intermediate-word> . 282)
            (<expr-intermediate-word> . 282)
            (<simple-intermediate-word> . 282) (<rsbracket> . 282)
            (<rbracket> . 282) (:define . 282) (<seal-word> . 282)
            (:parsed-defining-form . 282) (:let . 282) (:local . 282)
            (<fragment-local-declaration-word> . 282)
            (:parsed-local-declaration . 282) (<literal> . 282)
            (<string> . 282) (<keyword> . 282) (:true . 282)
            (:false . 282) (<list-open> . 282) (<vector-open> . 282)
            (<symbol> . 282) (<defining-word> . 282)
            (<fragment-define-word> . 282)
            (<fragment-define-bindings-word> . 282) (<not> . 282)
            (<lcbracket> . 282) (<fragment-function-word> . 282)
            (:&next . 282) (:&rest . 282) (:&key . 282)
            (:&all-keys . 282) (:otherwise . 282)
            (<var-type-sep> . 282) (<ellipsis> . 282) (<query> . 282)
            (<query-query> . 282) (<query-equal> . 282)
            (:parsed-name . 282) (:parsed-variable . 282)
            (:parsed-expression . 282) (:parsed-body . 282)
            (:parsed-case-body . 282) (:parsed-literal . 282)
            (<syntax-open> . 282) (<var-sep> . 282) (<implies> . 282)
            (<statement-sep> . 282) (:end . 282)
            (<binary-operator> . 282) (<minus> . 282) (<binds> . 282)
            (<var-singleton-sep> . 282) (<becomes> . 282)
            (<lbracket> . 282) (<lsbracket> . 282) (<dot> . 282))
           ((<rcbracket> . 160) (<details-intermediate-word> . 160)
            (<expr-intermediate-word> . 160)
            (<simple-intermediate-word> . 160) (<rsbracket> . 160)
            (<rbracket> . 160) (:define . 160) (<seal-word> . 160)
            (:parsed-defining-form . 160) (:let . 160) (:local . 160)
            (<fragment-local-declaration-word> . 160)
            (:parsed-local-declaration . 160) (<literal> . 160)
            (<string> . 160) (<keyword> . 160) (:true . 160)
            (:false . 160) (<list-open> . 160) (<vector-open> . 160)
            (<symbol> . 160) (<defining-word> . 160)
            (<fragment-define-word> . 160)
            (<fragment-define-bindings-word> . 160) (<not> . 160)
            (<lcbracket> . 160) (<fragment-function-word> . 160)
            (:&next . 160) (:&rest . 160) (:&key . 160)
            (:&all-keys . 160) (:otherwise . 160)
            (<var-type-sep> . 160) (<ellipsis> . 160) (<query> . 160)
            (<query-query> . 160) (<query-equal> . 160)
            (:parsed-name . 160) (:parsed-variable . 160)
            (:parsed-expression . 160) (:parsed-body . 160)
            (:parsed-case-body . 160) (:parsed-literal . 160)
            (<syntax-open> . 160) (<var-sep> . 160) (<implies> . 160)
            (<statement-sep> . 160) (:end . 160)
            (<binary-operator> . 160) (<minus> . 160) (<binds> . 160)
            (<var-singleton-sep> . 160) (<becomes> . 160)
            (<lbracket> . 160) (<lsbracket> . 160) (<dot> . 160))
           ((<rcbracket> . 159) (<details-intermediate-word> . 159)
            (<expr-intermediate-word> . 159)
            (<simple-intermediate-word> . 159) (<rsbracket> . 159)
            (<rbracket> . 159) (:define . 159) (<seal-word> . 159)
            (:parsed-defining-form . 159) (:let . 159) (:local . 159)
            (<fragment-local-declaration-word> . 159)
            (:parsed-local-declaration . 159) (<literal> . 159)
            (<string> . 159) (<keyword> . 159) (:true . 159)
            (:false . 159) (<list-open> . 159) (<vector-open> . 159)
            (<symbol> . 159) (<defining-word> . 159)
            (<fragment-define-word> . 159)
            (<fragment-define-bindings-word> . 159) (<not> . 159)
            (<lcbracket> . 159) (<fragment-function-word> . 159)
            (:&next . 159) (:&rest . 159) (:&key . 159)
            (:&all-keys . 159) (:otherwise . 159)
            (<var-type-sep> . 159) (<ellipsis> . 159) (<query> . 159)
            (<query-query> . 159) (<query-equal> . 159)
            (:parsed-name . 159) (:parsed-variable . 159)
            (:parsed-expression . 159) (:parsed-body . 159)
            (:parsed-case-body . 159) (:parsed-literal . 159)
            (<syntax-open> . 159) (<var-sep> . 159) (<implies> . 159)
            (<statement-sep> . 159) (:end . 159)
            (<binary-operator> . 159) (<minus> . 159) (<binds> . 159)
            (<var-singleton-sep> . 159) (<becomes> . 159)
            (<lbracket> . 159) (<lsbracket> . 159) (<dot> . 159))
           ((<dot> . 142) (<lsbracket> . 142) (<lbracket> . 142)
            (<becomes> . 142) (<var-singleton-sep> . 142)
            (<binds> . 142) (<minus> . 142) (<binary-operator> . 142)
            (:end . 142) (<statement-sep> . 142) (<implies> . 142)
            (<var-sep> . 142) (<syntax-open> . 142)
            (:parsed-literal . 142) (:parsed-case-body . 142)
            (:parsed-body . 142) (:parsed-expression . 142)
            (:parsed-variable . 142) (:parsed-name . 142)
            (<query-equal> . 142) (<query-query> . 142) (<query> . 142)
            (<ellipsis> . 142) (<var-type-sep> . 142)
            (:otherwise . 142) (:&all-keys . 142) (:&key . 142)
            (:&rest . 142) (:&next . 142)
            (<fragment-function-word> . 142) (<lcbracket> . 142)
            (<not> . 142) (<fragment-define-bindings-word> . 142)
            (<fragment-define-word> . 142) (<defining-word> . 142)
            (<symbol> . 142) (<vector-open> . 142) (<list-open> . 142)
            (:false . 142) (:true . 142) (<keyword> . 142)
            (<string> . 142) (<literal> . 142)
            (:parsed-local-declaration . 142)
            (<fragment-local-declaration-word> . 142) (:local . 142)
            (:let . 142) (:parsed-defining-form . 142)
            (<seal-word> . 142) (:define . 142) (<rbracket> . 142)
            (<rsbracket> . 142) (<simple-intermediate-word> . 142)
            (<expr-intermediate-word> . 142)
            (<details-intermediate-word> . 142) (<rcbracket> . 142))
           ((:end . 174))
           ((:end . 255) (<details-intermediate-word> . 255)
            (<expr-intermediate-word> . 255)
            (<simple-intermediate-word> . 255))
           ((:end . 261) (<statement-sep> . -634))
           ((:end . 175) (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<keyword> . -221) (<unary-operator> . -65) (<minus> . -64)
            (<not> . -44) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (<lbracket> . -370)
            (:otherwise . -361) (:method . -28) (<symbol> . -34)
            (<defining-word> . -42) (<method-defining-word> . -5)
            (<ellipsis> . -58) (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((:end . 170)) ((:end . 166)) ((:end . 171))
           ((:end . 176) (:define . 176) (<seal-word> . 176)
            (:parsed-defining-form . 176) (:let . 176) (:local . 176)
            (<fragment-local-declaration-word> . 176)
            (:parsed-local-declaration . 176) (<keyword> . 176)
            (<fragment-function-word> . 176) (<literal> . 176)
            (<string> . 176) (:true . 176) (:false . 176)
            (<list-open> . 176) (<vector-open> . 176)
            (:parsed-literal . 176) (<symbol> . 176)
            (<defining-word> . 176) (<method-defining-word> . 176)
            (:generic . 176) (<generic-function-defining-word> . 176)
            (<ellipsis> . 176) (<fragment-define-word> . 176)
            (<fragment-define-bindings-word> . 176)
            (:parsed-name . 176) (:parsed-variable . 176)
            (<lbracket> . 176) (:method . 176)
            (<details-begin-word> . 176) (<expr-begin-word> . 176)
            (<simple-begin-word> . 176) (<fragment-begin-word> . 176)
            (<fragment-define-and-begin-word> . 176)
            (<fragment-define-bindings-and-begin-word> . 176)
            (:macro-case . 176) (:parsed-statement . 176)
            (:parsed-body . 176) (:parsed-expression . 176)
            (<syntax-open> . 176) (<unary-operator> . 176)
            (<minus> . 176) (<not> . 176) (<statement-sep> . 176))
           ((:end . 261) (<statement-sep> . -602))
           ((:end . 175) (<lbracket> . -370) (:otherwise . -361)
            (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<keyword> . -221) (<unary-operator> . -65) (<minus> . -64)
            (<not> . -44) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((:end . 173))
           ((<statement-sep> . 168) (<not> . 168) (<minus> . 168)
            (<unary-operator> . 168) (<syntax-open> . 168)
            (:parsed-expression . 168) (:parsed-body . 168)
            (:parsed-statement . 168) (:macro-case . 168)
            (<fragment-define-bindings-and-begin-word> . 168)
            (<fragment-define-and-begin-word> . 168)
            (<fragment-begin-word> . 168) (<simple-begin-word> . 168)
            (<expr-begin-word> . 168) (<details-begin-word> . 168)
            (:method . 168) (<lbracket> . 168) (:parsed-variable . 168)
            (:parsed-name . 168)
            (<fragment-define-bindings-word> . 168)
            (<fragment-define-word> . 168) (<ellipsis> . 168)
            (<generic-function-defining-word> . 168) (:generic . 168)
            (<method-defining-word> . 168) (<defining-word> . 168)
            (<symbol> . 168) (:parsed-literal . 168)
            (<vector-open> . 168) (<list-open> . 168) (:false . 168)
            (:true . 168) (<string> . 168) (<literal> . 168)
            (<fragment-function-word> . 168) (<keyword> . 168)
            (:parsed-local-declaration . 168)
            (<fragment-local-declaration-word> . 168) (:local . 168)
            (:let . 168) (:parsed-defining-form . 168)
            (<seal-word> . 168) (:define . 168) (:end . 168))
           ((:end . 266) (:define . 266) (<seal-word> . 266)
            (:parsed-defining-form . 266) (:let . 266) (:local . 266)
            (<fragment-local-declaration-word> . 266)
            (:parsed-local-declaration . 266) (<keyword> . 266)
            (<fragment-function-word> . 266) (<literal> . 266)
            (<string> . 266) (:true . 266) (:false . 266)
            (<list-open> . 266) (<vector-open> . 266)
            (:parsed-literal . 266) (<symbol> . 266)
            (<defining-word> . 266) (<method-defining-word> . 266)
            (:generic . 266) (<generic-function-defining-word> . 266)
            (<ellipsis> . 266) (<fragment-define-word> . 266)
            (<fragment-define-bindings-word> . 266)
            (:parsed-name . 266) (:parsed-variable . 266)
            (<lbracket> . 266) (:method . 266)
            (<details-begin-word> . 266) (<expr-begin-word> . 266)
            (<simple-begin-word> . 266) (<fragment-begin-word> . 266)
            (<fragment-define-and-begin-word> . 266)
            (<fragment-define-bindings-and-begin-word> . 266)
            (:macro-case . 266) (:parsed-statement . 266)
            (:parsed-body . 266) (:parsed-expression . 266)
            (<syntax-open> . 266) (<unary-operator> . 266)
            (<minus> . 266) (<not> . 266) (<statement-sep> . 266))
           ((:end . 178) (:define . 178) (<seal-word> . 178)
            (:parsed-defining-form . 178) (:let . 178) (:local . 178)
            (<fragment-local-declaration-word> . 178)
            (:parsed-local-declaration . 178) (<keyword> . 178)
            (<fragment-function-word> . 178) (<literal> . 178)
            (<string> . 178) (:true . 178) (:false . 178)
            (<list-open> . 178) (<vector-open> . 178)
            (:parsed-literal . 178) (<symbol> . 178)
            (<defining-word> . 178) (<method-defining-word> . 178)
            (:generic . 178) (<generic-function-defining-word> . 178)
            (<ellipsis> . 178) (<fragment-define-word> . 178)
            (<fragment-define-bindings-word> . 178)
            (:parsed-name . 178) (:parsed-variable . 178)
            (<lbracket> . 178) (:method . 178)
            (<details-begin-word> . 178) (<expr-begin-word> . 178)
            (<simple-begin-word> . 178) (<fragment-begin-word> . 178)
            (<fragment-define-and-begin-word> . 178)
            (<fragment-define-bindings-and-begin-word> . 178)
            (:macro-case . 178) (:parsed-statement . 178)
            (:parsed-body . 178) (:parsed-expression . 178)
            (<syntax-open> . 178) (<unary-operator> . 178)
            (<minus> . 178) (<not> . 178) (<statement-sep> . 178))
           ((<seal-word> . -4) (:let . -19) (:local . -29)
            (<fragment-local-declaration-word> . -45)
            (:parsed-local-declaration . -69) (:define . -31)
            (:parsed-defining-form . -23) (:end . 262)
            (<lbracket> . -370) (:otherwise . -361)
            (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<keyword> . -221) (<unary-operator> . -65) (<minus> . -64)
            (<not> . -44) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((:end . 10) (<details-intermediate-word> . 10)
            (<expr-intermediate-word> . 10)
            (<simple-intermediate-word> . 10))
           ((<statement-sep> . 624) (:end . 624)
            (<simple-intermediate-word> . 624)
            (<expr-intermediate-word> . 624)
            (<details-intermediate-word> . 624))
           ((:end . 169) (:define . 169) (<seal-word> . 169)
            (:parsed-defining-form . 169) (:let . 169) (:local . 169)
            (<fragment-local-declaration-word> . 169)
            (:parsed-local-declaration . 169) (<keyword> . 169)
            (<fragment-function-word> . 169) (<literal> . 169)
            (<string> . 169) (:true . 169) (:false . 169)
            (<list-open> . 169) (<vector-open> . 169)
            (:parsed-literal . 169) (<symbol> . 169)
            (<defining-word> . 169) (<method-defining-word> . 169)
            (:generic . 169) (<generic-function-defining-word> . 169)
            (<ellipsis> . 169) (<fragment-define-word> . 169)
            (<fragment-define-bindings-word> . 169)
            (:parsed-name . 169) (:parsed-variable . 169)
            (<lbracket> . 169) (:method . 169)
            (<details-begin-word> . 169) (<expr-begin-word> . 169)
            (<simple-begin-word> . 169) (<fragment-begin-word> . 169)
            (<fragment-define-and-begin-word> . 169)
            (<fragment-define-bindings-and-begin-word> . 169)
            (:macro-case . 169) (:parsed-statement . 169)
            (:parsed-body . 169) (:parsed-expression . 169)
            (<syntax-open> . 169) (<unary-operator> . 169)
            (<minus> . 169) (<not> . 169) (<statement-sep> . 169))
           ((:generic . -607))
           ((:parsed-name . -66) (:parsed-variable . -14)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59))
           ((<lbracket> . -609))
           ((<rbracket> . 54) (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<keyword> . -221) (<unary-operator> . -65) (<minus> . -64)
            (<not> . -44) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((<rbracket> . -612)) ((<var-sep> . -576) (<rbracket> . 55))
           ((:end . 67) (<statement-sep> . 67) (<rbracket> . 67)
            (<rsbracket> . 67) (<simple-intermediate-word> . 67)
            (<expr-intermediate-word> . 67)
            (<details-intermediate-word> . 67) (<rcbracket> . 67))
           ((<clauses-defining-word> . 618) (:macro . 618)
            (<macro-defining-word> . 618)
            (<fragment-define-bindings-word> . 618)
            (<fragment-define-bindings-and-begin-word> . 618)
            (<fragment-define-word> . 618)
            (<fragment-define-and-begin-word> . 618)
            (<defining-word> . 618)
            (<generic-function-defining-word> . 618) (:method . 618)
            (<method-defining-word> . 618) (:generic . 618)
            (<symbol> . 618) (:parsed-name . 618))
           ((<lbracket> . -624) (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((:&rest . -553) (:generic . -33)
            (<generic-function-defining-word> . -50) (<symbol> . -34)
            (<defining-word> . -42) (<method-defining-word> . -5)
            (<ellipsis> . -58) (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59)
            (:parsed-name . -66) (:parsed-variable . -14))
           ((<rcbracket> . 70) (<details-intermediate-word> . 70)
            (<expr-intermediate-word> . 70)
            (<simple-intermediate-word> . 70) (<rsbracket> . 70)
            (<rbracket> . 70) (:end . 70) (<statement-sep> . 70))
           ((<binds> . -618))
           ((<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<keyword> . -221) (<unary-operator> . -65) (<minus> . -64)
            (<not> . -44) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((<rcbracket> . 78) (<details-intermediate-word> . 78)
            (<expr-intermediate-word> . 78)
            (<simple-intermediate-word> . 78) (<rsbracket> . 78)
            (<rbracket> . 78) (:end . 78) (<statement-sep> . 78))
           ((<rbracket> . -621)) ((<binds> . -622))
           ((<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<keyword> . -221) (<unary-operator> . -65) (<minus> . -64)
            (<not> . -44) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((<rcbracket> . 79) (<details-intermediate-word> . 79)
            (<expr-intermediate-word> . 79)
            (<simple-intermediate-word> . 79) (<rsbracket> . 79)
            (<rbracket> . 79) (:end . 79) (<statement-sep> . 79))
           ((<keyword> . -221) (<unary-operator> . -65) (<minus> . -64)
            (<not> . -44) (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((<binds> . -627)) ((<binds> . 74))
           ((<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<keyword> . -221) (<unary-operator> . -65) (<minus> . -64)
            (<not> . -44) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((<statement-sep> . 71) (:end . 71) (<rbracket> . 71)
            (<rsbracket> . 71) (<simple-intermediate-word> . 71)
            (<expr-intermediate-word> . 71)
            (<details-intermediate-word> . 71) (<rcbracket> . 71))
           ((<statement-sep> . 76) (:end . 76) (<rbracket> . 76)
            (<rsbracket> . 76) (<simple-intermediate-word> . 76)
            (<expr-intermediate-word> . 76)
            (<details-intermediate-word> . 76) (<rcbracket> . 76))
           ((<var-sep> . -392))
           ((<dot> . -74) (<lsbracket> . -73) (<lbracket> . -72)
            (<becomes> . 107) (<var-singleton-sep> . 107)
            (<binds> . 107) (<minus> . 107) (<binary-operator> . 107)
            (<rbracket> . 107) (<var-sep> . 88))
           ((<rbracket> . -633)) ((<binds> . 75))
           ((<seal-word> . -4) (:let . -19) (:local . -29)
            (<fragment-local-declaration-word> . -45)
            (:parsed-local-declaration . -69) (:define . -31)
            (:parsed-defining-form . -23) (:end . 262)
            (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<keyword> . -221) (<unary-operator> . -65) (<minus> . -64)
            (<not> . -44) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (<lbracket> . -370)
            (:otherwise . -361) (:method . -28) (<symbol> . -34)
            (<defining-word> . -42) (<method-defining-word> . -5)
            (<ellipsis> . -58) (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((:end . 172))
           ((:end . 154) (<details-intermediate-word> . 154)
            (<expr-intermediate-word> . 154)
            (<simple-intermediate-word> . 154))
           ((<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<seal-word> . -4) (<keyword> . -221)
            (<unary-operator> . -65) (<minus> . -64) (<not> . -44)
            (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:let . -19) (:local . -29)
            (<fragment-local-declaration-word> . -45)
            (:parsed-local-declaration . -69) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (:define . -31) (:parsed-defining-form . -23)
            (<string> . -53) (<details-intermediate-word> . 262)
            (<expr-intermediate-word> . 262)
            (<simple-intermediate-word> . 262) (:end . 262))
           ((<lbracket> . -639))
           ((<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<keyword> . -221) (<unary-operator> . -65) (<minus> . -64)
            (<not> . -44) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((<rbracket> . 191) (<symbol> . -490) (:parsed-name . -489))
           ((<rbracket> . -642))
           ((:end . 261) (<details-intermediate-word> . 261)
            (<expr-intermediate-word> . 261)
            (<simple-intermediate-word> . 261) (:define . 261)
            (<seal-word> . 261) (:parsed-defining-form . 261)
            (:let . 261) (:local . 261)
            (<fragment-local-declaration-word> . 261)
            (:parsed-local-declaration . 261) (<keyword> . 261)
            (<fragment-function-word> . 261) (<literal> . 261)
            (<string> . 261) (:true . 261) (:false . 261)
            (<list-open> . 261) (<vector-open> . 261)
            (:parsed-literal . 261) (<symbol> . 261)
            (<defining-word> . 261) (<method-defining-word> . 261)
            (:generic . 261) (<generic-function-defining-word> . 261)
            (<ellipsis> . 261) (<fragment-define-word> . 261)
            (<fragment-define-bindings-word> . 261)
            (:parsed-name . 261) (:parsed-variable . 261)
            (<lbracket> . 261) (:method . 261)
            (<details-begin-word> . 261) (<expr-begin-word> . 261)
            (<simple-begin-word> . 261) (<fragment-begin-word> . 261)
            (<fragment-define-and-begin-word> . 261)
            (<fragment-define-bindings-and-begin-word> . 261)
            (:macro-case . 261) (:parsed-statement . 261)
            (:parsed-body . 261) (:parsed-expression . 261)
            (<syntax-open> . 261) (<unary-operator> . 261)
            (<minus> . 261) (<not> . 261) (<statement-sep> . -374))
           ((<not> . 157) (<minus> . 157) (<unary-operator> . 157)
            (<syntax-open> . 157) (:parsed-expression . 157)
            (:parsed-body . 157) (:parsed-statement . 157)
            (:macro-case . 157)
            (<fragment-define-bindings-and-begin-word> . 157)
            (<fragment-define-and-begin-word> . 157)
            (<fragment-begin-word> . 157) (<simple-begin-word> . 157)
            (<expr-begin-word> . 157) (<details-begin-word> . 157)
            (:method . 157) (<lbracket> . 157) (:parsed-variable . 157)
            (:parsed-name . 157)
            (<fragment-define-bindings-word> . 157)
            (<fragment-define-word> . 157) (<ellipsis> . 157)
            (<generic-function-defining-word> . 157) (:generic . 157)
            (<method-defining-word> . 157) (<defining-word> . 157)
            (<symbol> . 157) (:parsed-literal . 157)
            (<vector-open> . 157) (<list-open> . 157) (:false . 157)
            (:true . 157) (<string> . 157) (<literal> . 157)
            (<fragment-function-word> . 157) (<keyword> . 157)
            (:parsed-local-declaration . 157)
            (<fragment-local-declaration-word> . 157) (:local . 157)
            (:let . 157) (:parsed-defining-form . 157)
            (<seal-word> . 157) (:define . 157)
            (<simple-intermediate-word> . 157)
            (<expr-intermediate-word> . 157)
            (<details-intermediate-word> . 157) (:end . 157))
           ((:end . 256) (<details-intermediate-word> . 256)
            (<expr-intermediate-word> . 256)
            (<simple-intermediate-word> . 256)
            (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<seal-word> . -4) (<keyword> . -221)
            (<unary-operator> . -65) (<minus> . -64) (<not> . -44)
            (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:let . -19) (:local . -29)
            (<fragment-local-declaration-word> . -45)
            (:parsed-local-declaration . -69) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (:define . -31) (:parsed-defining-form . -23)
            (<string> . -53))
           ((<simple-intermediate-word> . 155)
            (<expr-intermediate-word> . 155)
            (<details-intermediate-word> . 155) (:end . 155))
           ((:end . 149))
           ((<details-intermediate-word> . -286)
            (<expr-intermediate-word> . -283)
            (<simple-intermediate-word> . -279) (:end . 152))
           ((<rbracket> . 229) (<var-sep> . 229))
           ((:generic . -33) (<generic-function-defining-word> . -50)
            (<keyword> . -344) (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59)
            (:parsed-name . -66) (:parsed-variable . -14)
            (:&all-keys . -650))
           ((<rbracket> . 225)) ((<var-sep> . 227) (<rbracket> . 227))
           ((<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((<binds> . 234) (<var-sep> . 234) (<rbracket> . 234))
           ((<rbracket> . 235) (<var-sep> . 235) (<binds> . 235)
            (<var-type-sep> . -657))
           ((<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((<binds> . 233) (<var-sep> . 233) (<rbracket> . 233))
           ((<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((<rbracket> . 232) (<var-sep> . 232) (<binds> . 232))
           ((<rbracket> . 220) (<var-sep> . 220))
           ((<rbracket> . 216) (<var-sep> . 216))
           ((:&key . -339) (:&all-keys . -332)) ((<rbracket> . 218))
           ((<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<keyword> . -221) (<unary-operator> . -65) (<minus> . -64)
            (<not> . -44) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<keyword> . -221) (<unary-operator> . -65) (<minus> . -64)
            (<not> . -44) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((<var-sep> . 211) (<rbracket> . 211)
            (<statement-sep> . 211) (:end . 211) (<rsbracket> . 211)
            (<simple-intermediate-word> . 211)
            (<expr-intermediate-word> . 211)
            (<details-intermediate-word> . 211) (<rcbracket> . 211))
           ((<var-sep> . 212) (<rbracket> . 212)
            (<statement-sep> . 212) (:end . 212) (<rsbracket> . 212)
            (<simple-intermediate-word> . 212)
            (<expr-intermediate-word> . 212)
            (<details-intermediate-word> . 212) (<rcbracket> . 212))
           ((:&rest . -337) (:&key . -339) (:&all-keys . -332))
           ((<rbracket> . 214))
           ((:define . 241) (<seal-word> . 241)
            (:parsed-defining-form . 241) (:let . 241) (:local . 241)
            (<fragment-local-declaration-word> . 241)
            (:parsed-local-declaration . 241) (<keyword> . 241)
            (<fragment-function-word> . 241) (<literal> . 241)
            (<string> . 241) (:true . 241) (:false . 241)
            (<list-open> . 241) (<vector-open> . 241)
            (:parsed-literal . 241) (<symbol> . 241)
            (<defining-word> . 241) (<method-defining-word> . 241)
            (:generic . 241) (<generic-function-defining-word> . 241)
            (<ellipsis> . 241) (<fragment-define-word> . 241)
            (<fragment-define-bindings-word> . 241)
            (:parsed-name . 241) (:parsed-variable . 241)
            (<lbracket> . 241) (:method . 241)
            (<details-begin-word> . 241) (<expr-begin-word> . 241)
            (<simple-begin-word> . 241) (<fragment-begin-word> . 241)
            (<fragment-define-and-begin-word> . 241)
            (<fragment-define-bindings-and-begin-word> . 241)
            (:macro-case . 241) (:parsed-statement . 241)
            (:parsed-body . 241) (:parsed-expression . 241)
            (<syntax-open> . 241) (<unary-operator> . 241)
            (<minus> . 241) (<not> . 241) (:end . 241)
            (<statement-sep> . -673) (<implies> . -670))
           ((<lbracket> . -675) (:generic . -33)
            (<generic-function-defining-word> . -50) (<symbol> . -34)
            (<defining-word> . -42) (<method-defining-word> . -5)
            (<ellipsis> . -58) (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59)
            (:parsed-name . -66) (:parsed-variable . -14))
           ((:end . 256) (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<seal-word> . -4) (<keyword> . -221)
            (<unary-operator> . -65) (<minus> . -64) (<not> . -44)
            (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:let . -19) (:local . -29)
            (<fragment-local-declaration-word> . -45)
            (:parsed-local-declaration . -69) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (:define . -31) (:parsed-defining-form . -23)
            (<string> . -53))
           ((<not> . 242) (<minus> . 242) (<unary-operator> . 242)
            (<syntax-open> . 242) (:parsed-expression . 242)
            (:parsed-body . 242) (:parsed-statement . 242)
            (:macro-case . 242)
            (<fragment-define-bindings-and-begin-word> . 242)
            (<fragment-define-and-begin-word> . 242)
            (<fragment-begin-word> . 242) (<simple-begin-word> . 242)
            (<expr-begin-word> . 242) (<details-begin-word> . 242)
            (:method . 242) (<lbracket> . 242) (:parsed-variable . 242)
            (:parsed-name . 242)
            (<fragment-define-bindings-word> . 242)
            (<fragment-define-word> . 242) (<ellipsis> . 242)
            (<generic-function-defining-word> . 242) (:generic . 242)
            (<method-defining-word> . 242) (<defining-word> . 242)
            (<symbol> . 242) (:parsed-literal . 242)
            (<vector-open> . 242) (<list-open> . 242) (:false . 242)
            (:true . 242) (<string> . 242) (<literal> . 242)
            (<fragment-function-word> . 242) (<keyword> . 242)
            (:parsed-local-declaration . 242)
            (<fragment-local-declaration-word> . 242) (:local . 242)
            (:let . 242) (:parsed-defining-form . 242)
            (<seal-word> . 242) (:define . 242) (:end . 242))
           ((<not> . 243) (<minus> . 243) (<unary-operator> . 243)
            (<syntax-open> . 243) (:parsed-expression . 243)
            (:parsed-body . 243) (:parsed-statement . 243)
            (:macro-case . 243)
            (<fragment-define-bindings-and-begin-word> . 243)
            (<fragment-define-and-begin-word> . 243)
            (<fragment-begin-word> . 243) (<simple-begin-word> . 243)
            (<expr-begin-word> . 243) (<details-begin-word> . 243)
            (:method . 243) (<lbracket> . 243) (:parsed-variable . 243)
            (:parsed-name . 243)
            (<fragment-define-bindings-word> . 243)
            (<fragment-define-word> . 243) (<ellipsis> . 243)
            (<generic-function-defining-word> . 243) (:generic . 243)
            (<method-defining-word> . 243) (<defining-word> . 243)
            (<symbol> . 243) (:parsed-literal . 243)
            (<vector-open> . 243) (<list-open> . 243) (:false . 243)
            (:true . 243) (<string> . 243) (<literal> . 243)
            (<fragment-function-word> . 243) (<keyword> . 243)
            (:parsed-local-declaration . 243)
            (<fragment-local-declaration-word> . 243) (:local . 243)
            (:let . 243) (:parsed-defining-form . 243)
            (<seal-word> . 243) (:define . 243) (:end . 243))
           ((:end . 201))
           ((<rbracket> . 250) (:generic . -33)
            (<generic-function-defining-word> . -50) (:&next . -334)
            (:&rest . -337) (:&key . -339) (:&all-keys . -332)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59)
            (:parsed-name . -66) (:parsed-variable . -14))
           ((<statement-sep> . -677))
           ((<not> . 244) (<minus> . 244) (<unary-operator> . 244)
            (<syntax-open> . 244) (:parsed-expression . 244)
            (:parsed-body . 244) (:parsed-statement . 244)
            (:macro-case . 244)
            (<fragment-define-bindings-and-begin-word> . 244)
            (<fragment-define-and-begin-word> . 244)
            (<fragment-begin-word> . 244) (<simple-begin-word> . 244)
            (<expr-begin-word> . 244) (<details-begin-word> . 244)
            (:method . 244) (<lbracket> . 244) (:parsed-variable . 244)
            (:parsed-name . 244)
            (<fragment-define-bindings-word> . 244)
            (<fragment-define-word> . 244) (<ellipsis> . 244)
            (<generic-function-defining-word> . 244) (:generic . 244)
            (<method-defining-word> . 244) (<defining-word> . 244)
            (<symbol> . 244) (:parsed-literal . 244)
            (<vector-open> . 244) (<list-open> . 244) (:false . 244)
            (:true . 244) (<string> . 244) (<literal> . 244)
            (<fragment-function-word> . 244) (<keyword> . 244)
            (:parsed-local-declaration . 244)
            (<fragment-local-declaration-word> . 244) (:local . 244)
            (:let . 244) (:parsed-defining-form . 244)
            (<seal-word> . 244) (:define . 244) (:end . 244))
           ((<rbracket> . -681)) ((<rbracket> . 252))
           ((<rbracket> . 251))
           ((:end . 261) (:define . 261) (<seal-word> . 261)
            (:parsed-defining-form . 261) (:let . 261) (:local . 261)
            (<fragment-local-declaration-word> . 261)
            (:parsed-local-declaration . 261) (<keyword> . 261)
            (<fragment-function-word> . 261) (<literal> . 261)
            (<string> . 261) (:true . 261) (:false . 261)
            (<list-open> . 261) (<vector-open> . 261)
            (:parsed-literal . 261) (<symbol> . 261)
            (<defining-word> . 261) (<method-defining-word> . 261)
            (:generic . 261) (<generic-function-defining-word> . 261)
            (<ellipsis> . 261) (<fragment-define-word> . 261)
            (<fragment-define-bindings-word> . 261)
            (:parsed-name . 261) (:parsed-variable . 261)
            (<lbracket> . 261) (:method . 261)
            (<details-begin-word> . 261) (<expr-begin-word> . 261)
            (<simple-begin-word> . 261) (<fragment-begin-word> . 261)
            (<fragment-define-and-begin-word> . 261)
            (<fragment-define-bindings-and-begin-word> . 261)
            (:macro-case . 261) (:parsed-statement . 261)
            (:parsed-body . 261) (:parsed-expression . 261)
            (<syntax-open> . 261) (<unary-operator> . 261)
            (<minus> . 261) (<not> . 261) (<statement-sep> . -374))
           ((<not> . 245) (<minus> . 245) (<unary-operator> . 245)
            (<syntax-open> . 245) (:parsed-expression . 245)
            (:parsed-body . 245) (:parsed-statement . 245)
            (:macro-case . 245)
            (<fragment-define-bindings-and-begin-word> . 245)
            (<fragment-define-and-begin-word> . 245)
            (<fragment-begin-word> . 245) (<simple-begin-word> . 245)
            (<expr-begin-word> . 245) (<details-begin-word> . 245)
            (:method . 245) (<lbracket> . 245) (:parsed-variable . 245)
            (:parsed-name . 245)
            (<fragment-define-bindings-word> . 245)
            (<fragment-define-word> . 245) (<ellipsis> . 245)
            (<generic-function-defining-word> . 245) (:generic . 245)
            (<method-defining-word> . 245) (<defining-word> . 245)
            (<symbol> . 245) (:parsed-literal . 245)
            (<vector-open> . 245) (<list-open> . 245) (:false . 245)
            (:true . 245) (<string> . 245) (<literal> . 245)
            (<fragment-function-word> . 245) (<keyword> . 245)
            (:parsed-local-declaration . 245)
            (<fragment-local-declaration-word> . 245) (:local . 245)
            (:let . 245) (:parsed-defining-form . 245)
            (<seal-word> . 245) (:define . 245) (:end . 245))
           ((<rsbracket> . -684))
           ((<implies> . 321) (<syntax-open> . 321)
            (:parsed-literal . 321) (:parsed-case-body . 321)
            (:parsed-body . 321) (:parsed-expression . 321)
            (:parsed-variable . 321) (:parsed-name . 321)
            (<query-equal> . 321) (<query-query> . 321) (<query> . 321)
            (<ellipsis> . 321) (<var-type-sep> . 321)
            (:otherwise . 321) (:&all-keys . 321) (:&key . 321)
            (:&rest . 321) (:&next . 321) (<dot> . 321)
            (<fragment-function-word> . 321) (<lcbracket> . 321)
            (<lsbracket> . 321) (<lbracket> . 321) (<not> . 321)
            (<becomes> . 321) (<var-singleton-sep> . 321)
            (<binds> . 321) (<minus> . 321) (<binary-operator> . 321)
            (<fragment-define-bindings-word> . 321)
            (<fragment-define-word> . 321) (<defining-word> . 321)
            (<symbol> . 321) (<vector-open> . 321) (<list-open> . 321)
            (:false . 321) (:true . 321) (<keyword> . 321)
            (<string> . 321) (<literal> . 321) (:method . 321)
            (:parsed-statement . 321) (:macro-case . 321)
            (<fragment-define-bindings-and-begin-word> . 321)
            (<fragment-define-and-begin-word> . 321)
            (<fragment-begin-word> . 321) (<simple-begin-word> . 321)
            (<expr-begin-word> . 321) (<details-begin-word> . 321)
            (<var-sep> . 321) (:parsed-local-declaration . 321)
            (<fragment-local-declaration-word> . 321) (:local . 321)
            (:let . 321) (:parsed-defining-form . 321)
            (<seal-word> . 321) (:define . 321) (<statement-sep> . 321)
            (:end . 321) (<rbracket> . 321) (<rsbracket> . 321)
            (<rcbracket> . 321) (<details-intermediate-word> . 321)
            (<expr-intermediate-word> . 321)
            (<simple-intermediate-word> . 321))
           ((<rbracket> . -686))
           ((<implies> . 320) (<syntax-open> . 320)
            (:parsed-literal . 320) (:parsed-case-body . 320)
            (:parsed-body . 320) (:parsed-expression . 320)
            (:parsed-variable . 320) (:parsed-name . 320)
            (<query-equal> . 320) (<query-query> . 320) (<query> . 320)
            (<ellipsis> . 320) (<var-type-sep> . 320)
            (:otherwise . 320) (:&all-keys . 320) (:&key . 320)
            (:&rest . 320) (:&next . 320) (<dot> . 320)
            (<fragment-function-word> . 320) (<lcbracket> . 320)
            (<lsbracket> . 320) (<lbracket> . 320) (<not> . 320)
            (<becomes> . 320) (<var-singleton-sep> . 320)
            (<binds> . 320) (<minus> . 320) (<binary-operator> . 320)
            (<fragment-define-bindings-word> . 320)
            (<fragment-define-word> . 320) (<defining-word> . 320)
            (<symbol> . 320) (<vector-open> . 320) (<list-open> . 320)
            (:false . 320) (:true . 320) (<keyword> . 320)
            (<string> . 320) (<literal> . 320) (:method . 320)
            (:parsed-statement . 320) (:macro-case . 320)
            (<fragment-define-bindings-and-begin-word> . 320)
            (<fragment-define-and-begin-word> . 320)
            (<fragment-begin-word> . 320) (<simple-begin-word> . 320)
            (<expr-begin-word> . 320) (<details-begin-word> . 320)
            (<var-sep> . 320) (:parsed-local-declaration . 320)
            (<fragment-local-declaration-word> . 320) (:local . 320)
            (:let . 320) (:parsed-defining-form . 320)
            (<seal-word> . 320) (:define . 320) (<statement-sep> . 320)
            (:end . 320) (<rbracket> . 320) (<rsbracket> . 320)
            (<rcbracket> . 320) (<details-intermediate-word> . 320)
            (<expr-intermediate-word> . 320)
            (<simple-intermediate-word> . 320))
           ((<simple-intermediate-word> . 306)
            (<expr-intermediate-word> . 306)
            (<details-intermediate-word> . 306) (<rcbracket> . 306)
            (<rsbracket> . 306) (<rbracket> . 306) (:end . 306)
            (<statement-sep> . 306) (:define . 306) (<seal-word> . 306)
            (:parsed-defining-form . 306) (:let . 306) (:local . 306)
            (<fragment-local-declaration-word> . 306)
            (:parsed-local-declaration . 306) (<var-sep> . 308)
            (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<implies> . -110) (<literal> . -124) (<string> . -128)
            (<keyword> . -112) (:true . -87) (:false . -92)
            (<list-open> . -116) (<vector-open> . -122)
            (<symbol> . -105) (<defining-word> . -117)
            (<fragment-define-word> . -95)
            (<fragment-define-bindings-word> . -132)
            (<binary-operator> . -113) (<minus> . -134)
            (<binds> . -136) (<var-singleton-sep> . -104)
            (<becomes> . -120) (<not> . -119) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<lbracket> . -99) (<lsbracket> . -100)
            (<lcbracket> . -107) (<dot> . -101) (:&next . -125)
            (:&rest . -135) (:&key . -85) (:&all-keys . -111)
            (:otherwise . -88) (<var-type-sep> . -114)
            (<ellipsis> . -131) (<query> . -97) (<query-query> . -139)
            (<query-equal> . -90) (:parsed-name . -137)
            (:parsed-variable . -93) (:parsed-expression . -123)
            (:parsed-body . -130) (:parsed-case-body . -89)
            (:parsed-literal . -129))
           ((:parsed-local-declaration . 307)
            (<fragment-local-declaration-word> . 307) (:local . 307)
            (:let . 307) (:parsed-defining-form . 307)
            (<seal-word> . 307) (:define . 307) (<statement-sep> . 307)
            (:end . 307) (<rbracket> . 307) (<rsbracket> . 307)
            (<rcbracket> . 307) (<details-intermediate-word> . 307)
            (<expr-intermediate-word> . 307)
            (<simple-intermediate-word> . 307))
           ((:parsed-local-declaration . 305)
            (<fragment-local-declaration-word> . 305) (:local . 305)
            (:let . 305) (:parsed-defining-form . 305)
            (<seal-word> . 305) (:define . 305) (<statement-sep> . 305)
            (:end . 305) (<rbracket> . 305) (<rsbracket> . 305)
            (<rcbracket> . 305) (<details-intermediate-word> . 305)
            (<expr-intermediate-word> . 305)
            (<simple-intermediate-word> . 305))
           ((<symbol> . 564) (<defining-word> . 564)
            (<method-defining-word> . 564) (:generic . 564)
            (<generic-function-defining-word> . 564) (<ellipsis> . 564)
            (<fragment-define-word> . 564)
            (<fragment-define-bindings-word> . 564)
            (:parsed-name . 564) (:parsed-variable . 564)
            (<rcbracket> . 564) (<details-intermediate-word> . 564)
            (<expr-intermediate-word> . 564)
            (<simple-intermediate-word> . 564) (<rsbracket> . 564)
            (<rbracket> . 564) (<statement-sep> . 564) (:end . 564)
            (<clauses-defining-word> . -692))
           ((:end . 89) (<statement-sep> . 89) (<rbracket> . 89)
            (<rsbracket> . 89) (<simple-intermediate-word> . 89)
            (<expr-intermediate-word> . 89)
            (<details-intermediate-word> . 89) (<rcbracket> . 89)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59)
            (:parsed-name . -66) (:parsed-variable . -14))
           ((:parsed-variable . 565) (:parsed-name . 565)
            (<fragment-define-bindings-word> . 565)
            (<fragment-define-word> . 565) (<ellipsis> . 565)
            (<generic-function-defining-word> . 565) (:generic . 565)
            (<method-defining-word> . 565) (<defining-word> . 565)
            (<symbol> . 565) (:end . 565) (<statement-sep> . 565)
            (<rbracket> . 565) (<rsbracket> . 565)
            (<simple-intermediate-word> . 565)
            (<expr-intermediate-word> . 565)
            (<details-intermediate-word> . 565) (<rcbracket> . 565))
           ((<rcbracket> . 558) (<details-intermediate-word> . 558)
            (<expr-intermediate-word> . 558)
            (<simple-intermediate-word> . 558) (<rsbracket> . 558)
            (<rbracket> . 558) (<statement-sep> . 558) (:end . 558))
           ((<var-sep> . 561) (<rbracket> . 561))
           ((<var-sep> . -697) (<rbracket> . -696))
           ((:define . 560) (<seal-word> . 560)
            (:parsed-defining-form . 560) (:let . 560) (:local . 560)
            (<fragment-local-declaration-word> . 560)
            (:parsed-local-declaration . 560) (<keyword> . 560)
            (<fragment-function-word> . 560) (<literal> . 560)
            (<string> . 560) (:true . 560) (:false . 560)
            (<list-open> . 560) (<vector-open> . 560)
            (:parsed-literal . 560) (<symbol> . 560)
            (<defining-word> . 560) (<method-defining-word> . 560)
            (:generic . 560) (<generic-function-defining-word> . 560)
            (<ellipsis> . 560) (<fragment-define-word> . 560)
            (<fragment-define-bindings-word> . 560)
            (:parsed-name . 560) (:parsed-variable . 560)
            (<lbracket> . 560) (:method . 560)
            (<details-begin-word> . 560) (<expr-begin-word> . 560)
            (<simple-begin-word> . 560) (<fragment-begin-word> . 560)
            (<fragment-define-and-begin-word> . 560)
            (<fragment-define-bindings-and-begin-word> . 560)
            (:macro-case . 560) (:parsed-statement . 560)
            (:parsed-body . 560) (:parsed-expression . 560)
            (<syntax-open> . 560) (<unary-operator> . 560)
            (<minus> . 560) (<not> . 560)
            (<details-intermediate-word> . 560)
            (<expr-intermediate-word> . 560)
            (<simple-intermediate-word> . 560) (:end . 560))
           ((:parsed-name . -66) (:parsed-variable . -14)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59))
           ((<var-sep> . 562) (<rbracket> . 562)) ((<lbracket> . -701))
           ((<rcbracket> . 32) (<details-intermediate-word> . 32)
            (<expr-intermediate-word> . 32)
            (<simple-intermediate-word> . 32) (<rsbracket> . 32)
            (<rbracket> . 32) (<statement-sep> . 32) (:end . 32))
           ((<rbracket> . 203) (:generic . -33)
            (<generic-function-defining-word> . -50) (:&next . -334)
            (:&rest . -337) (:&key . -339) (:&all-keys . -332)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59)
            (:parsed-name . -66) (:parsed-variable . -14))
           ((:end . 15) (<statement-sep> . 15) (<rbracket> . 15)
            (<rsbracket> . 15) (<simple-intermediate-word> . 15)
            (<expr-intermediate-word> . 15)
            (<details-intermediate-word> . 15) (<rcbracket> . 15)
            (<var-sep> . -392))
           ((<rcbracket> . 44) (<details-intermediate-word> . 44)
            (<expr-intermediate-word> . 44)
            (<simple-intermediate-word> . 44) (<rsbracket> . 44)
            (<rbracket> . 44) (<statement-sep> . 44) (:end . 44))
           ((<rbracket> . -705))
           ((<var-sep> . 246) (:end . 246) (<statement-sep> . 246)
            (<rbracket> . 246) (<rsbracket> . 246)
            (<simple-intermediate-word> . 246)
            (<expr-intermediate-word> . 246)
            (<details-intermediate-word> . 246) (<rcbracket> . 246)
            (<implies> . -707))
           ((<rcbracket> . 202) (<details-intermediate-word> . 202)
            (<expr-intermediate-word> . 202)
            (<simple-intermediate-word> . 202) (<rsbracket> . 202)
            (<rbracket> . 202) (<statement-sep> . 202) (:end . 202)
            (<var-sep> . 202))
           ((<lbracket> . -709) (:generic . -33)
            (<generic-function-defining-word> . -50) (<symbol> . -34)
            (<defining-word> . -42) (<method-defining-word> . -5)
            (<ellipsis> . -58) (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59)
            (:parsed-name . -66) (:parsed-variable . -14))
           ((<rcbracket> . 247) (<details-intermediate-word> . 247)
            (<expr-intermediate-word> . 247)
            (<simple-intermediate-word> . 247) (<rsbracket> . 247)
            (<rbracket> . 247) (<statement-sep> . 247) (:end . 247)
            (<var-sep> . 247))
           ((<rbracket> . 250) (:generic . -33)
            (<generic-function-defining-word> . -50) (:&next . -334)
            (:&rest . -337) (:&key . -339) (:&all-keys . -332)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59)
            (:parsed-name . -66) (:parsed-variable . -14))
           ((<var-sep> . 248) (:end . 248) (<statement-sep> . 248)
            (<rbracket> . 248) (<rsbracket> . 248)
            (<simple-intermediate-word> . 248)
            (<expr-intermediate-word> . 248)
            (<details-intermediate-word> . 248) (<rcbracket> . 248))
           ((<rbracket> . -712))
           ((<var-sep> . 249) (:end . 249) (<statement-sep> . 249)
            (<rbracket> . 249) (<rsbracket> . 249)
            (<simple-intermediate-word> . 249)
            (<expr-intermediate-word> . 249)
            (<details-intermediate-word> . 249) (<rcbracket> . 249))
           ((:end . -715))
           ((:end . 288) (<statement-sep> . 288) (<rbracket> . 288)
            (<rsbracket> . 288) (<simple-intermediate-word> . 288)
            (<expr-intermediate-word> . 288)
            (<details-intermediate-word> . 288) (<rcbracket> . 288))
           ((<fragment-define-and-begin-word> . -717)
            (:parsed-name . -66) (:parsed-variable . -14)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<symbol> . -34) (<defining-word> . -718)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -719)
            (<fragment-define-bindings-word> . -59) (:end . 46)
            (<statement-sep> . 46) (<rbracket> . 46) (<rsbracket> . 46)
            (<simple-intermediate-word> . 46)
            (<expr-intermediate-word> . 46)
            (<details-intermediate-word> . 46) (<rcbracket> . 46))
           ((<rcbracket> . 47) (<details-intermediate-word> . 47)
            (<expr-intermediate-word> . 47)
            (<simple-intermediate-word> . 47) (<rsbracket> . 47)
            (<rbracket> . 47) (<statement-sep> . 47) (:end . 47))
           ((<rcbracket> . 286) (<details-intermediate-word> . 286)
            (<expr-intermediate-word> . 286)
            (<simple-intermediate-word> . 286) (<rsbracket> . 286)
            (<rbracket> . 286) (<statement-sep> . 286) (:end . 286)
            (:parsed-variable . 2) (:parsed-name . 2)
            (<fragment-define-bindings-word> . 2)
            (<fragment-define-word> . 2) (<ellipsis> . 2)
            (<generic-function-defining-word> . 2) (:generic . 2)
            (<method-defining-word> . 2) (<defining-word> . 2)
            (<symbol> . 2))
           ((<rcbracket> . 93) (<details-intermediate-word> . 93)
            (<expr-intermediate-word> . 93)
            (<simple-intermediate-word> . 93) (<rsbracket> . 93)
            (<rbracket> . 93) (<statement-sep> . 93) (:end . 93)
            (:parsed-name . -66) (:parsed-variable . -14)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59))
           ((<rcbracket> . 284) (<details-intermediate-word> . 284)
            (<expr-intermediate-word> . 284)
            (<simple-intermediate-word> . 284) (<rsbracket> . 284)
            (<rbracket> . 284) (<statement-sep> . 284) (:end . 284)
            (:parsed-variable . 1) (:parsed-name . 1)
            (<fragment-define-bindings-word> . 1)
            (<fragment-define-word> . 1) (<ellipsis> . 1)
            (<generic-function-defining-word> . 1) (:generic . 1)
            (<method-defining-word> . 1) (<defining-word> . 1)
            (<symbol> . 1))
           ((:parsed-name . -66) (:parsed-variable . -14)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59))
           ((:end . 287) (<statement-sep> . 287) (<rbracket> . 287)
            (<rsbracket> . 287) (<simple-intermediate-word> . 287)
            (<expr-intermediate-word> . 287)
            (<details-intermediate-word> . 287) (<rcbracket> . 287))
           ((:end . 48) (<statement-sep> . 48) (<rbracket> . 48)
            (<rsbracket> . 48) (<simple-intermediate-word> . 48)
            (<expr-intermediate-word> . 48)
            (<details-intermediate-word> . 48) (<rcbracket> . 48))
           ((<lbracket> . -321))
           ((<rcbracket> . 31) (<details-intermediate-word> . 31)
            (<expr-intermediate-word> . 31)
            (<simple-intermediate-word> . 31) (<rsbracket> . 31)
            (<rbracket> . 31) (<statement-sep> . 31) (:end . 31))
           ((:end . -726))
           ((<symbol> . 97) (<defining-word> . 97)
            (<method-defining-word> . 97) (:generic . 97)
            (<generic-function-defining-word> . 97) (<ellipsis> . 97)
            (<fragment-define-word> . 97)
            (<fragment-define-bindings-word> . 97) (:parsed-name . 97)
            (:parsed-variable . 97) (<rcbracket> . 97)
            (<details-intermediate-word> . 97)
            (<expr-intermediate-word> . 97)
            (<simple-intermediate-word> . 97) (<rsbracket> . 97)
            (<rbracket> . 97) (<statement-sep> . 97) (:end . 97)
            (:method . -312) (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57))
           ((:end . 89) (<statement-sep> . 89) (<rbracket> . 89)
            (<rsbracket> . 89) (<simple-intermediate-word> . 89)
            (<expr-intermediate-word> . 89)
            (<details-intermediate-word> . 89) (<rcbracket> . 89)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59)
            (:parsed-name . -66) (:parsed-variable . -14))
           ((<rcbracket> . 43) (<details-intermediate-word> . 43)
            (<expr-intermediate-word> . 43)
            (<simple-intermediate-word> . 43) (<rsbracket> . 43)
            (<rbracket> . 43) (<statement-sep> . 43) (:end . 43))
           ((<var-type-sep> . -564) (<binds> . 85) (<var-sep> . 85)
            (:end . 51) (<defining-word> . 51) (<symbol> . 51)
            (<lbracket> . -732))
           ((<rcbracket> . 33) (<details-intermediate-word> . 33)
            (<expr-intermediate-word> . 33)
            (<simple-intermediate-word> . 33) (<rsbracket> . 33)
            (<rbracket> . 33) (<statement-sep> . 33) (:end . 33))
           ((<rcbracket> . 34) (<details-intermediate-word> . 34)
            (<expr-intermediate-word> . 34)
            (<simple-intermediate-word> . 34) (<rsbracket> . 34)
            (<rbracket> . 34) (<statement-sep> . 34) (:end . 34))
           ((<rbracket> . 54) (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<keyword> . -221) (<unary-operator> . -65) (<minus> . -64)
            (<not> . -44) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((<symbol> . 52) (<defining-word> . 52) (:end . 52))
           ((:end . 56) (<symbol> . -741) (<defining-word> . -736))
           ((:generic . -33) (<generic-function-defining-word> . -50)
            (<keyword> . -746) (<symbol> . -751)
            (<defining-word> . -748) (<method-defining-word> . -5)
            (<ellipsis> . -58) (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59)
            (:parsed-name . -66) (:parsed-variable . -14))
           ((<keyword> . 64) (:parsed-variable . 64)
            (:parsed-name . 64) (<fragment-define-bindings-word> . 64)
            (<fragment-define-word> . 64) (<ellipsis> . 64)
            (<generic-function-defining-word> . 64) (:generic . 64)
            (<method-defining-word> . 64) (<defining-word> . 64)
            (<symbol> . 64))
           ((:end . -715))
           ((<keyword> . 613) (:parsed-variable . 613)
            (:parsed-name . 613)
            (<fragment-define-bindings-word> . 613)
            (<fragment-define-word> . 613) (<ellipsis> . 613)
            (<generic-function-defining-word> . 613) (:generic . 613)
            (<method-defining-word> . 613) (<defining-word> . 613)
            (<symbol> . 613))
           ((:end . 57)) ((<statement-sep> . 615) (:end . 615))
           ((<keyword> . 63) (:parsed-variable . 63)
            (:parsed-name . 63) (<fragment-define-bindings-word> . 63)
            (<fragment-define-word> . 63) (<ellipsis> . 63)
            (<generic-function-defining-word> . 63) (:generic . 63)
            (<method-defining-word> . 63) (<defining-word> . 63)
            (<symbol> . 63))
           ((:end . 261) (<statement-sep> . -743))
           ((<symbol> . -741) (<defining-word> . -736) (:end . 262))
           ((:end . 58)) ((<statement-sep> . 616) (:end . 616))
           ((<var-sep> . 66) (<var-type-sep> . 66) (<binds> . 66)
            (:end . 66) (<statement-sep> . 66))
           ((<var-sep> . 65) (<var-type-sep> . 65) (<binds> . 65)
            (:end . 65) (<statement-sep> . 65))
           ((<var-sep> . 93) (<var-type-sep> . 93) (<binds> . 93)
            (:end . 93) (<statement-sep> . 93) (<symbol> . 64)
            (<defining-word> . 64) (<method-defining-word> . 64)
            (:generic . 64) (<generic-function-defining-word> . 64)
            (<ellipsis> . 64) (<fragment-define-word> . 64)
            (<fragment-define-bindings-word> . 64) (:parsed-name . 64)
            (:parsed-variable . 64) (<keyword> . 64))
           ((<symbol> . 614) (<defining-word> . 614)
            (<method-defining-word> . 614) (:generic . 614)
            (<generic-function-defining-word> . 614) (<ellipsis> . 614)
            (<fragment-define-word> . 614)
            (<fragment-define-bindings-word> . 614)
            (:parsed-name . 614) (:parsed-variable . 614)
            (<keyword> . 614))
           ((<binds> . -354) (<var-type-sep> . -564) (:end . 15)
            (<statement-sep> . 15) (<var-sep> . -755))
           ((<var-sep> . 92) (<var-type-sep> . 92) (<binds> . 92)
            (:end . 92) (<statement-sep> . 92) (<symbol> . 63)
            (<defining-word> . 63) (<method-defining-word> . 63)
            (:generic . 63) (<generic-function-defining-word> . 63)
            (<ellipsis> . 63) (<fragment-define-word> . 63)
            (<fragment-define-bindings-word> . 63) (:parsed-name . 63)
            (:parsed-variable . 63) (<keyword> . 63))
           ((<var-sep> . 611) (<var-type-sep> . 611) (<binds> . 611)
            (:end . 611) (<statement-sep> . 611))
           ((<statement-sep> . 59) (:end . 59))
           ((<statement-sep> . 15) (:end . 15) (<var-sep> . -392))
           ((:generic . -33) (<generic-function-defining-word> . -50)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59)
            (:parsed-name . -66) (:parsed-variable . -14)
            (:parsed-property-list . -395) (<keyword> . -760))
           ((<binds> . -354) (<statement-sep> . 15) (:end . 15)
            (<var-sep> . -392))
           ((:end . 60) (<statement-sep> . 60))
           ((:end . 15) (<statement-sep> . 15) (<var-sep> . -392))
           ((<statement-sep> . 62) (:end . 62))
           ((<var-sep> . 66) (<var-type-sep> . 66) (<binds> . 66)
            (:end . 66) (<statement-sep> . 66) (<lcbracket> . -396)
            (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<keyword> . -221) (<unary-operator> . -65) (<minus> . -64)
            (<not> . -44) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((<var-sep> . 612) (<var-type-sep> . 612) (<binds> . 612)
            (:end . 612) (<statement-sep> . 612))
           ((:end . 61) (<statement-sep> . 61))
           ((:end . 45) (<statement-sep> . 45) (<rbracket> . 45)
            (<rsbracket> . 45) (<simple-intermediate-word> . 45)
            (<expr-intermediate-word> . 45)
            (<details-intermediate-word> . 45) (<rcbracket> . 45))
           ((<rbracket> . -765))
           ((<symbol> . 53) (<defining-word> . 53) (:end . 53))
           ((<lcbracket> . 365) (<lbracket> . -372))
           ((<rcbracket> . 362) (<details-intermediate-word> . 362)
            (<expr-intermediate-word> . 362)
            (<simple-intermediate-word> . 362) (<rsbracket> . 362)
            (<rbracket> . 362) (<statement-sep> . 362) (:end . 362))
           ((<lcbracket> . 366)) ((<lcbracket> . -774))
           ((<lcbracket> . -828) (<keyword> . 373) (:end . 373))
           ((<lcbracket> . 595) (<keyword> . 595) (:end . 595))
           ((:end . 380) (<keyword> . -535))
           ((<lcbracket> . -802) (<keyword> . 371) (:end . 371))
           ((:define . -780) (<symbol> . -168) (<defining-word> . -182)
            (<fragment-begin-word> . -190)
            (<fragment-define-word> . -152)
            (<fragment-define-and-begin-word> . -207)
            (<fragment-define-bindings-word> . -204)
            (<fragment-define-bindings-and-begin-word> . -203)
            (<fragment-function-word> . -213)
            (<fragment-local-declaration-word> . -186)
            (<details-begin-word> . -156) (<expr-begin-word> . -150)
            (<simple-begin-word> . -195)
            (<details-intermediate-word> . -174)
            (<expr-intermediate-word> . -170)
            (<simple-intermediate-word> . -158)
            (<method-defining-word> . -146)
            (<generic-function-defining-word> . -193)
            (<seal-word> . -145) (:parsed-name . -211))
           ((<lcbracket> . 597) (<keyword> . 597) (:end . 597))
           ((<lcbracket> . 593) (<keyword> . 593) (:end . 593))
           ((<lcbracket> . -779) (<keyword> . 372) (:end . 372))
           ((:end . 596) (<keyword> . 596) (<lcbracket> . 596))
           ((:define . -780))
           ((<literal> . -124) (<string> . -436) (<keyword> . -112)
            (:true . -87) (:false . -92) (<list-open> . -116)
            (<vector-open> . -122) (<symbol> . -105)
            (<defining-word> . -117) (<fragment-define-word> . -95)
            (<fragment-define-bindings-word> . -132)
            (<binary-operator> . -113) (<minus> . -134)
            (<binds> . -136) (<var-singleton-sep> . -104)
            (<becomes> . -120) (<not> . -119) (<lbracket> . -425)
            (<lsbracket> . -427) (<lcbracket> . -429) (<query> . -424)
            (<ellipsis> . -437) (:&rest . -439) (:&key . -418)
            (:parsed-name . -440) (:otherwise . -419)
            (<implies> . -430) (<escaped-hash-word> . -426))
           ((<rcbracket> . -783) (:end . -782)) ((<rcbracket> . -787))
           ((<implies> . -784))
           ((<lcbracket> . -508) (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<keyword> . -221) (<unary-operator> . -65) (<minus> . -64)
            (<not> . -44) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((<lcbracket> . 261) (<keyword> . 261) (:end . 261)
            (<statement-sep> . -374))
           ((:end . 376) (<keyword> . 376) (<lcbracket> . 376))
           ((<implies> . -788))
           ((<lcbracket> . -508) (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<keyword> . -221) (<unary-operator> . -65) (<minus> . -64)
            (<not> . -44) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((:end . 261) (<keyword> . 261) (<lcbracket> . 261)
            (<statement-sep> . -374))
           ((<lcbracket> . 375) (<keyword> . 375) (:end . 375))
           ((<rcbracket> . 389) (:end . 389) (<literal> . -124)
            (<string> . -436) (<keyword> . -112) (:true . -87)
            (:false . -92) (<list-open> . -116) (<vector-open> . -122)
            (<symbol> . -105) (<defining-word> . -117)
            (<fragment-define-word> . -95)
            (<fragment-define-bindings-word> . -132)
            (<binary-operator> . -113) (<minus> . -134)
            (<binds> . -136) (<var-singleton-sep> . -104)
            (<becomes> . -120) (<not> . -119) (<lbracket> . -425)
            (<lsbracket> . -427) (<lcbracket> . -429) (<query> . -424)
            (<ellipsis> . -437) (:&rest . -439) (:&key . -418)
            (:parsed-name . -440) (:otherwise . -419)
            (<implies> . -430) (<escaped-hash-word> . -426))
           ((<rcbracket> . -794) (:end . -793)) ((<rcbracket> . -798))
           ((<implies> . -795))
           ((<lcbracket> . -508) (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<keyword> . -221) (<unary-operator> . -65) (<minus> . -64)
            (<not> . -44) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((:end . 261) (<keyword> . 261) (<lcbracket> . 261)
            (<statement-sep> . -374))
           ((<lcbracket> . 377) (<keyword> . 377) (:end . 377))
           ((<implies> . -799))
           ((<lcbracket> . -508) (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<keyword> . -221) (<unary-operator> . -65) (<minus> . -64)
            (<not> . -44) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((<lcbracket> . 261) (<keyword> . 261) (:end . 261)
            (<statement-sep> . -374))
           ((:end . 374) (<keyword> . 374) (<lcbracket> . 374))
           ((<symbol> . -168) (<defining-word> . -182)
            (<fragment-begin-word> . -190)
            (<fragment-define-word> . -152)
            (<fragment-define-and-begin-word> . -207)
            (<fragment-define-bindings-word> . -204)
            (<fragment-define-bindings-and-begin-word> . -203)
            (<fragment-function-word> . -213)
            (<fragment-local-declaration-word> . -186)
            (<details-begin-word> . -156) (<expr-begin-word> . -150)
            (<simple-begin-word> . -195)
            (<details-intermediate-word> . -174)
            (<expr-intermediate-word> . -170)
            (<simple-intermediate-word> . -158)
            (<method-defining-word> . -146)
            (<generic-function-defining-word> . -193)
            (<seal-word> . -145) (:parsed-name . -211))
           ((:end . 598) (<keyword> . 598) (<lcbracket> . 598))
           ((:end . 389) (<literal> . -124) (<string> . -436)
            (<keyword> . -112) (:true . -87) (:false . -92)
            (<list-open> . -116) (<vector-open> . -122)
            (<symbol> . -105) (<defining-word> . -117)
            (<fragment-define-word> . -95)
            (<fragment-define-bindings-word> . -132)
            (<binary-operator> . -113) (<minus> . -134)
            (<binds> . -136) (<var-singleton-sep> . -104)
            (<becomes> . -120) (<not> . -119) (<lbracket> . -425)
            (<lsbracket> . -427) (<lcbracket> . -429) (<query> . -424)
            (<ellipsis> . -437) (:&rest . -439) (:&key . -418)
            (:parsed-name . -440) (:otherwise . -419)
            (<implies> . -430) (<escaped-hash-word> . -426))
           ((:end . -793)) ((:end . -807))
           ((<symbol> . 386) (<defining-word> . 386)
            (<fragment-begin-word> . 386)
            (<fragment-define-word> . 386)
            (<fragment-define-and-begin-word> . 386)
            (<fragment-define-bindings-word> . 386)
            (<fragment-define-bindings-and-begin-word> . 386)
            (<fragment-function-word> . 386)
            (<fragment-local-declaration-word> . 386)
            (<details-begin-word> . 386) (<expr-begin-word> . 386)
            (<simple-begin-word> . 386) (<method-defining-word> . 386)
            (<generic-function-defining-word> . 386)
            (<macro-defining-word> . 386) (<seal-word> . 386)
            (<rcbracket> . 386) (<details-intermediate-word> . 386)
            (<expr-intermediate-word> . 386)
            (<simple-intermediate-word> . 386) (<rsbracket> . 386)
            (<rbracket> . 386) (<statement-sep> . 386) (:end . 386)
            (:macro . -809))
           ((:end . 473) (<statement-sep> . 473) (<rbracket> . 473)
            (<rsbracket> . 473) (<simple-intermediate-word> . 473)
            (<expr-intermediate-word> . 473)
            (<details-intermediate-word> . 473) (<rcbracket> . 473)
            (<symbol> . -824) (<defining-word> . -817)
            (<fragment-begin-word> . -825)
            (<fragment-define-word> . -820)
            (<fragment-define-and-begin-word> . -813)
            (<fragment-define-bindings-word> . -826)
            (<fragment-define-bindings-and-begin-word> . -810)
            (<fragment-function-word> . -814)
            (<fragment-local-declaration-word> . -822)
            (<details-begin-word> . -821) (<expr-begin-word> . -815)
            (<simple-begin-word> . -818)
            (<method-defining-word> . -819)
            (<generic-function-defining-word> . -827)
            (<macro-defining-word> . -811) (<seal-word> . -812))
           ((<seal-word> . 387) (<macro-defining-word> . 387)
            (<generic-function-defining-word> . 387)
            (<method-defining-word> . 387) (<simple-begin-word> . 387)
            (<expr-begin-word> . 387) (<details-begin-word> . 387)
            (<fragment-local-declaration-word> . 387)
            (<fragment-function-word> . 387)
            (<fragment-define-bindings-and-begin-word> . 387)
            (<fragment-define-bindings-word> . 387)
            (<fragment-define-and-begin-word> . 387)
            (<fragment-define-word> . 387)
            (<fragment-begin-word> . 387) (<defining-word> . 387)
            (<symbol> . 387) (:end . 387) (<statement-sep> . 387)
            (<rbracket> . 387) (<rsbracket> . 387)
            (<simple-intermediate-word> . 387)
            (<expr-intermediate-word> . 387)
            (<details-intermediate-word> . 387) (<rcbracket> . 387))
           ((<rcbracket> . 463) (<details-intermediate-word> . 463)
            (<expr-intermediate-word> . 463)
            (<simple-intermediate-word> . 463) (<rsbracket> . 463)
            (<rbracket> . 463) (<statement-sep> . 463) (:end . 463))
           ((<rcbracket> . 471) (<details-intermediate-word> . 471)
            (<expr-intermediate-word> . 471)
            (<simple-intermediate-word> . 471) (<rsbracket> . 471)
            (<rbracket> . 471) (<statement-sep> . 471) (:end . 471))
           ((<rcbracket> . 472) (<details-intermediate-word> . 472)
            (<expr-intermediate-word> . 472)
            (<simple-intermediate-word> . 472) (<rsbracket> . 472)
            (<rbracket> . 472) (<statement-sep> . 472) (:end . 472))
           ((<rcbracket> . 461) (<details-intermediate-word> . 461)
            (<expr-intermediate-word> . 461)
            (<simple-intermediate-word> . 461) (<rsbracket> . 461)
            (<rbracket> . 461) (<statement-sep> . 461) (:end . 461))
           ((<rcbracket> . 464) (<details-intermediate-word> . 464)
            (<expr-intermediate-word> . 464)
            (<simple-intermediate-word> . 464) (<rsbracket> . 464)
            (<rbracket> . 464) (<statement-sep> . 464) (:end . 464))
           ((<rcbracket> . 467) (<details-intermediate-word> . 467)
            (<expr-intermediate-word> . 467)
            (<simple-intermediate-word> . 467) (<rsbracket> . 467)
            (<rbracket> . 467) (<statement-sep> . 467) (:end . 467))
           ((<rcbracket> . 367) (<details-intermediate-word> . 367)
            (<expr-intermediate-word> . 367)
            (<simple-intermediate-word> . 367) (<rsbracket> . 367)
            (<rbracket> . 367) (<statement-sep> . 367) (:end . 367))
           ((<rcbracket> . 458) (<details-intermediate-word> . 458)
            (<expr-intermediate-word> . 458)
            (<simple-intermediate-word> . 458) (<rsbracket> . 458)
            (<rbracket> . 458) (<statement-sep> . 458) (:end . 458))
           ((<rcbracket> . 468) (<details-intermediate-word> . 468)
            (<expr-intermediate-word> . 468)
            (<simple-intermediate-word> . 468) (<rsbracket> . 468)
            (<rbracket> . 468) (<statement-sep> . 468) (:end . 468))
           ((<rcbracket> . 469) (<details-intermediate-word> . 469)
            (<expr-intermediate-word> . 469)
            (<simple-intermediate-word> . 469) (<rsbracket> . 469)
            (<rbracket> . 469) (<statement-sep> . 469) (:end . 469))
           ((<rcbracket> . 460) (<details-intermediate-word> . 460)
            (<expr-intermediate-word> . 460)
            (<simple-intermediate-word> . 460) (<rsbracket> . 460)
            (<rbracket> . 460) (<statement-sep> . 460) (:end . 460))
           ((<rcbracket> . 466) (<details-intermediate-word> . 466)
            (<expr-intermediate-word> . 466)
            (<simple-intermediate-word> . 466) (<rsbracket> . 466)
            (<rbracket> . 466) (<statement-sep> . 466) (:end . 466))
           ((<rcbracket> . 465) (<details-intermediate-word> . 465)
            (<expr-intermediate-word> . 465)
            (<simple-intermediate-word> . 465) (<rsbracket> . 465)
            (<rbracket> . 465) (<statement-sep> . 465) (:end . 465))
           ((<rcbracket> . 474) (<details-intermediate-word> . 474)
            (<expr-intermediate-word> . 474)
            (<simple-intermediate-word> . 474) (<rsbracket> . 474)
            (<rbracket> . 474) (<statement-sep> . 474) (:end . 474))
           ((<rcbracket> . 457) (<details-intermediate-word> . 457)
            (<expr-intermediate-word> . 457)
            (<simple-intermediate-word> . 457) (<rsbracket> . 457)
            (<rbracket> . 457) (<statement-sep> . 457) (:end . 457))
           ((<rcbracket> . 459) (<details-intermediate-word> . 459)
            (<expr-intermediate-word> . 459)
            (<simple-intermediate-word> . 459) (<rsbracket> . 459)
            (<rbracket> . 459) (<statement-sep> . 459) (:end . 459))
           ((<rcbracket> . 462) (<details-intermediate-word> . 462)
            (<expr-intermediate-word> . 462)
            (<simple-intermediate-word> . 462) (<rsbracket> . 462)
            (<rbracket> . 462) (<statement-sep> . 462) (:end . 462))
           ((<rcbracket> . 470) (<details-intermediate-word> . 470)
            (<expr-intermediate-word> . 470)
            (<simple-intermediate-word> . 470) (<rsbracket> . 470)
            (<rbracket> . 470) (<statement-sep> . 470) (:end . 470))
           ((<symbol> . -168) (<defining-word> . -182)
            (<fragment-begin-word> . -190)
            (<fragment-define-word> . -152)
            (<fragment-define-and-begin-word> . -207)
            (<fragment-define-bindings-word> . -204)
            (<fragment-define-bindings-and-begin-word> . -203)
            (<fragment-function-word> . -213)
            (<fragment-local-declaration-word> . -186)
            (<details-begin-word> . -156) (<expr-begin-word> . -150)
            (<simple-begin-word> . -195)
            (<details-intermediate-word> . -174)
            (<expr-intermediate-word> . -170)
            (<simple-intermediate-word> . -158)
            (<method-defining-word> . -146)
            (<generic-function-defining-word> . -193)
            (<seal-word> . -145) (:parsed-name . -211))
           ((:end . 594) (<keyword> . 594) (<lcbracket> . 594))
           ((<rcbracket> . 389) (<literal> . -124) (<string> . -436)
            (<keyword> . -112) (:true . -87) (:false . -92)
            (<list-open> . -116) (<vector-open> . -122)
            (<symbol> . -105) (<defining-word> . -117)
            (<fragment-define-word> . -95)
            (<fragment-define-bindings-word> . -132)
            (<binary-operator> . -113) (<minus> . -134)
            (<binds> . -136) (<var-singleton-sep> . -104)
            (<becomes> . -120) (<not> . -119) (<lbracket> . -425)
            (<lsbracket> . -427) (<lcbracket> . -429) (<query> . -424)
            (<ellipsis> . -437) (:&rest . -439) (:&key . -418)
            (:parsed-name . -440) (:otherwise . -419)
            (<implies> . -430) (<escaped-hash-word> . -426))
           ((<rcbracket> . -794))
           ((<rcbracket> . 289) (<details-intermediate-word> . 289)
            (<expr-intermediate-word> . 289)
            (<simple-intermediate-word> . 289) (<rsbracket> . 289)
            (<rbracket> . 289) (<statement-sep> . 289) (:end . 289))
           ((<rcbracket> . 298) (<details-intermediate-word> . 298)
            (<expr-intermediate-word> . 298)
            (<simple-intermediate-word> . 298) (<rsbracket> . 298)
            (<rbracket> . 298) (<statement-sep> . 298) (:end . 298))
           ((<dot> . 283) (<lsbracket> . 283) (<lbracket> . 283)
            (<becomes> . 283) (<var-singleton-sep> . 283)
            (<binds> . 283) (<minus> . 283) (<binary-operator> . 283)
            (:end . 283) (<statement-sep> . 283) (<implies> . 283)
            (<var-sep> . 283) (<syntax-open> . 283)
            (:parsed-literal . 283) (:parsed-case-body . 283)
            (:parsed-body . 283) (:parsed-expression . 283)
            (:parsed-variable . 283) (:parsed-name . 283)
            (<query-equal> . 283) (<query-query> . 283) (<query> . 283)
            (<ellipsis> . 283) (<var-type-sep> . 283)
            (:otherwise . 283) (:&all-keys . 283) (:&key . 283)
            (:&rest . 283) (:&next . 283)
            (<fragment-function-word> . 283) (<lcbracket> . 283)
            (<not> . 283) (<fragment-define-bindings-word> . 283)
            (<fragment-define-word> . 283) (<defining-word> . 283)
            (<symbol> . 283) (<vector-open> . 283) (<list-open> . 283)
            (:false . 283) (:true . 283) (<keyword> . 283)
            (<string> . 283) (<literal> . 283)
            (:parsed-local-declaration . 283)
            (<fragment-local-declaration-word> . 283) (:local . 283)
            (:let . 283) (:parsed-defining-form . 283)
            (<seal-word> . 283) (:define . 283) (<rbracket> . 283)
            (<rsbracket> . 283) (<simple-intermediate-word> . 283)
            (<expr-intermediate-word> . 283)
            (<details-intermediate-word> . 283) (<rcbracket> . 283))
           ((<dot> . 555) (<lsbracket> . 555) (<lbracket> . 555)
            (<becomes> . 555) (<var-singleton-sep> . 555)
            (<binds> . 555) (<minus> . 555) (<binary-operator> . 555)
            (:end . 555) (<statement-sep> . 555) (<implies> . 555)
            (<var-sep> . 555) (<syntax-open> . 555)
            (:parsed-literal . 555) (:parsed-case-body . 555)
            (:parsed-body . 555) (:parsed-expression . 555)
            (:parsed-variable . 555) (:parsed-name . 555)
            (<query-equal> . 555) (<query-query> . 555) (<query> . 555)
            (<ellipsis> . 555) (<var-type-sep> . 555)
            (:otherwise . 555) (:&all-keys . 555) (:&key . 555)
            (:&rest . 555) (:&next . 555)
            (<fragment-function-word> . 555) (<lcbracket> . 555)
            (<not> . 555) (<fragment-define-bindings-word> . 555)
            (<fragment-define-word> . 555) (<defining-word> . 555)
            (<symbol> . 555) (<vector-open> . 555) (<list-open> . 555)
            (:false . 555) (:true . 555) (<keyword> . 555)
            (<string> . 555) (<literal> . 555) (:method . 555)
            (:parsed-statement . 555) (:macro-case . 555)
            (<fragment-define-bindings-and-begin-word> . 555)
            (<fragment-define-and-begin-word> . 555)
            (<fragment-begin-word> . 555) (<simple-begin-word> . 555)
            (<expr-begin-word> . 555) (<details-begin-word> . 555)
            (:parsed-local-declaration . 555)
            (<fragment-local-declaration-word> . 555) (:local . 555)
            (:let . 555) (:parsed-defining-form . 555)
            (<seal-word> . 555) (:define . 555) (<rbracket> . 555)
            (<rsbracket> . 555) (<simple-intermediate-word> . 555)
            (<expr-intermediate-word> . 555)
            (<details-intermediate-word> . 555) (<rcbracket> . 555))
           ((<rcbracket> . 123) (<details-intermediate-word> . 123)
            (<expr-intermediate-word> . 123)
            (<simple-intermediate-word> . 123) (<rsbracket> . 123)
            (<rbracket> . 123) (:define . 123) (<seal-word> . 123)
            (:parsed-defining-form . 123) (:let . 123) (:local . 123)
            (<fragment-local-declaration-word> . 123)
            (:parsed-local-declaration . 123)
            (<details-begin-word> . 123) (<expr-begin-word> . 123)
            (<simple-begin-word> . 123) (<fragment-begin-word> . 123)
            (<fragment-define-and-begin-word> . 123)
            (<fragment-define-bindings-and-begin-word> . 123)
            (:macro-case . 123) (:parsed-statement . 123)
            (:method . 123) (<literal> . 123) (<string> . 123)
            (<keyword> . 123) (:true . 123) (:false . 123)
            (<list-open> . 123) (<vector-open> . 123) (<symbol> . 123)
            (<defining-word> . 123) (<fragment-define-word> . 123)
            (<fragment-define-bindings-word> . 123) (<not> . 123)
            (<lcbracket> . 123) (<fragment-function-word> . 123)
            (:&next . 123) (:&rest . 123) (:&key . 123)
            (:&all-keys . 123) (:otherwise . 123)
            (<var-type-sep> . 123) (<ellipsis> . 123) (<query> . 123)
            (<query-query> . 123) (<query-equal> . 123)
            (:parsed-name . 123) (:parsed-variable . 123)
            (:parsed-expression . 123) (:parsed-body . 123)
            (:parsed-case-body . 123) (:parsed-literal . 123)
            (<syntax-open> . 123) (<var-sep> . 123) (<implies> . 123)
            (<statement-sep> . 123) (:end . 123)
            (<binary-operator> . 123) (<minus> . 123) (<binds> . 123)
            (<var-singleton-sep> . 123) (<becomes> . 123)
            (<lbracket> . 123) (<lsbracket> . 123) (<dot> . 123))
           ((<keyword> . -78) (:parsed-property-list . -77)
            (<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<unary-operator> . -65) (<minus> . -64) (<not> . -44)
            (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((<var-sep> . 604) (<rbracket> . 604) (<rsbracket> . 604))
           ((<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<keyword> . -221) (<unary-operator> . -65) (<minus> . -64)
            (<not> . -44) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (<string> . -53))
           ((<binary-operator> . -245) (<minus> . -244)
            (<binds> . -246) (<var-singleton-sep> . -247)
            (<becomes> . -243) (<statement-sep> . 104)
            (<var-sep> . 104) (<rbracket> . 104) (<rsbracket> . 104))
           ((<rsbracket> . 126) (<rbracket> . 126) (<var-sep> . 126))
           ((<rsbracket> . 118) (<details-intermediate-word> . 118)
            (<expr-intermediate-word> . 118)
            (<simple-intermediate-word> . 118) (:parsed-name . 118)
            (<symbol> . 118) (<rbracket> . 118) (<var-sep> . 118)
            (<implies> . 118) (<statement-sep> . 118) (:end . 118)
            (<binary-operator> . 118) (<minus> . 118) (<binds> . 118)
            (<var-singleton-sep> . 118) (<becomes> . 118)
            (<lbracket> . 118) (<lsbracket> . 118) (<dot> . 118)
            (<keyword> . 118) (<lcbracket> . 118) (<rcbracket> . 118))
           ((<rsbracket> . 119) (<details-intermediate-word> . 119)
            (<expr-intermediate-word> . 119)
            (<simple-intermediate-word> . 119) (:parsed-name . 119)
            (<symbol> . 119) (<rbracket> . 119) (<var-sep> . 119)
            (<implies> . 119) (<statement-sep> . 119) (:end . 119)
            (<binary-operator> . 119) (<minus> . 119) (<binds> . 119)
            (<var-singleton-sep> . 119) (<becomes> . 119)
            (<lbracket> . 119) (<lsbracket> . 119) (<dot> . 119)
            (<keyword> . 119) (<lcbracket> . 119) (<rcbracket> . 119))
           ((<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<seal-word> . -4) (<unary-operator> . -65) (<minus> . -64)
            (<not> . -44) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:let . -19) (:local . -29)
            (<fragment-local-declaration-word> . -45)
            (:parsed-local-declaration . -69) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (:define . -31) (:parsed-defining-form . -23)
            (<string> . -53))
           ((<statement-sep> . 570)) ((<statement-sep> . -851))
           ((<statement-sep> . 569)) ((<statement-sep> . -849))
           ((<fragment-begin-word> . -48)
            (<fragment-define-and-begin-word> . -63)
            (<fragment-define-bindings-and-begin-word> . -57)
            (:generic . -33) (<generic-function-defining-word> . -50)
            (<seal-word> . -4) (<unary-operator> . -65) (<minus> . -64)
            (<not> . -44) (<fragment-function-word> . -68)
            (<details-begin-word> . -21) (<expr-begin-word> . -13)
            (<simple-begin-word> . -52) (:method . -28)
            (<symbol> . -34) (<defining-word> . -42)
            (<method-defining-word> . -5) (<ellipsis> . -58)
            (<fragment-define-word> . -17)
            (<fragment-define-bindings-word> . -59) (<lbracket> . -24)
            (:parsed-body . -56) (:parsed-expression . -47)
            (:parsed-name . -66) (:parsed-variable . -14)
            (<literal> . -51) (:true . -3) (:false . -12)
            (<list-open> . -40) (<vector-open> . -46)
            (:parsed-literal . -55) (:let . -19) (:local . -29)
            (<fragment-local-declaration-word> . -45)
            (:parsed-local-declaration . -69) (:macro-case . -15)
            (:parsed-statement . -60) (<syntax-open> . -54)
            (:define . -31) (:parsed-defining-form . -23)
            (<string> . -53))
           ((<statement-sep> . 571)) ((:eoi . 574)) ((:end . -853))
           ((:eoi . 584)) ((<statement-sep> . -856)) ((:eoi . 575))
           ((:eoi . 576)) ((:end . 165)) ((:end . -859)) ((:eoi . 581))
           ((:eoi . 572)) ((:end . -862)) ((:eoi . 580))
           ((:end . -864)) ((:eoi . 579)) ((:end . -866))
           ((:eoi . 578)) ((:end . -868)) ((:eoi . 577)) ((:eoi . 573))
           ((:end . -873)) ((:end . -872)) ((:eoi . 582))
           ((:eoi . 583)))
          :goto-table
          '((670 (operand . 70) (unary-operator . 69)
             (:parsed-local-declaration . 68)
             (<fragment-function-word> . 67) (expression . 289)
             (local-declaration . 288) (:parsed-name . 65)
             (<unary-operator> . 64) (<minus> . 63)
             (<fragment-define-and-begin-word> . 62)
             (keyless-binary-operand . 221) (function-macro-call . 60)
             (:parsed-statement . 59)
             (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
             (<fragment-define-bindings-and-begin-word> . 56)
             (:parsed-body . 55) (:parsed-literal . 54)
             (<syntax-open> . 53) (<string> . 52)
             (<simple-begin-word> . 51) (<literal> . 50)
             (<generic-function-defining-word> . 49)
             (generic-function-defining-word . 48)
             (<fragment-begin-word> . 47) (:parsed-expression . 46)
             (<vector-open> . 45)
             (<fragment-local-declaration-word> . 44) (<not> . 43)
             (statement . 42) (<defining-word> . 41) (<list-open> . 39)
             (<keyword> . 220) (binary-operand-series . 219)
             (defining-form . 281) (procedural-template . 34)
             (<symbol> . 33) (:generic . 32) (fragment-begin-word . 31)
             (:define . 30) (constituents . 279) (:local . 28)
             (binary-operand . 218) (:method . 27) (seal-word . 24)
             (literal . 25) (<lbracket> . 23)
             (:parsed-defining-form . 22) (begin-clause . 21)
             (<details-begin-word> . 20) (:let . 18) (body . 588)
             (opt-body . 673) (anonymous-method . 17) (literal0 . 15)
             (<fragment-define-word> . 16) (:macro-case . 14)
             (:parsed-variable . 13) (<expr-begin-word> . 12)
             (:false . 11) (variable-name . 9) (leaf . 8)
             (the-variable-name . 5) (<method-defining-word> . 4)
             (constituent . 276) (<seal-word> . 3) (:true . 2))
           (669 (<generic-function-defining-word> . 49)
            (<ellipsis> . 57) (:generic . 32)
            (<fragment-define-bindings-word> . 58) (<symbol> . 33)
            (generic-function-defining-word . 48) (:parsed-name . 65)
            (the-variable-name . 5) (<fragment-define-word> . 16)
            (<method-defining-word> . 4) (positional-parameter . 675)
            (<defining-word> . 41) (:parsed-variable . 13)
            (<lbracket> . 674) (variable-name . 328))
           (668 (<statement-sep> . 672) (method-return-type . 671)
            (opt-method-return-type . 670) (<implies> . 669))
           (666 (:&key . 338) (:&rest . 336) (rest-parameters . 667)
            (:&all-keys . 331) (rest-parameter . 329)
            (keyword-parameters . 327))
           (663 (operand . 70) (unary-operator . 69)
            (<fragment-function-word> . 67) (expression . 664)
            (:parsed-name . 65) (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (<not> . 43) (statement . 42)
            (<defining-word> . 41) (<list-open> . 39) (<keyword> . 220)
            (binary-operand-series . 219) (procedural-template . 34)
            (<symbol> . 33) (:generic . 32) (fragment-begin-word . 31)
            (:method . 27) (binary-operand . 218) (literal . 25)
            (<lbracket> . 23) (begin-clause . 21)
            (<details-begin-word> . 20) (anonymous-method . 17)
            (<fragment-define-word> . 16) (literal0 . 15)
            (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (:true . 2))
           (662 (operand . 70) (unary-operator . 69)
            (<fragment-function-word> . 67) (expression . 665)
            (:parsed-name . 65) (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (<not> . 43) (statement . 42)
            (<defining-word> . 41) (<list-open> . 39) (<keyword> . 220)
            (binary-operand-series . 219) (procedural-template . 34)
            (<symbol> . 33) (:generic . 32) (fragment-begin-word . 31)
            (:method . 27) (binary-operand . 218) (literal . 25)
            (<lbracket> . 23) (begin-clause . 21)
            (<details-begin-word> . 20) (anonymous-method . 17)
            (<fragment-define-word> . 16) (literal0 . 15)
            (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (:true . 2))
           (660 (:&key . 338) (:&all-keys . 331)
            (keyword-parameters . 661))
           (656 (operand . 565) (<fragment-function-word> . 67)
            (:parsed-name . 65) (<fragment-define-and-begin-word> . 62)
            (type . 657) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (statement . 42)
            (<defining-word> . 41) (<list-open> . 39)
            (procedural-template . 34) (<symbol> . 33) (:generic . 32)
            (fragment-begin-word . 31) (:method . 27) (literal . 25)
            (<lbracket> . 23) (begin-clause . 21)
            (<details-begin-word> . 20) (anonymous-method . 17)
            (<fragment-define-word> . 16) (literal0 . 15)
            (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (:true . 2))
           (654 (operand . 565) (<fragment-function-word> . 67)
            (:parsed-name . 65) (<fragment-define-and-begin-word> . 62)
            (type . 655) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (statement . 42)
            (<defining-word> . 41) (<list-open> . 39)
            (procedural-template . 34) (<symbol> . 33) (:generic . 32)
            (fragment-begin-word . 31) (:method . 27) (literal . 25)
            (<lbracket> . 23) (begin-clause . 21)
            (<details-begin-word> . 20) (anonymous-method . 17)
            (<fragment-define-word> . 16) (literal0 . 15)
            (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (:true . 2))
           (653 (<var-type-sep> . 656))
           (651 (operand . 565) (<fragment-function-word> . 67)
            (:parsed-name . 65) (<fragment-define-and-begin-word> . 62)
            (type . 652) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (statement . 42)
            (<defining-word> . 41) (<list-open> . 39)
            (procedural-template . 34) (<symbol> . 33) (:generic . 32)
            (fragment-begin-word . 31) (:method . 27) (literal . 25)
            (<lbracket> . 23) (begin-clause . 21)
            (<details-begin-word> . 20) (anonymous-method . 17)
            (<fragment-define-word> . 16) (literal0 . 15)
            (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (:true . 2))
           (648 (<generic-function-defining-word> . 49)
            (<ellipsis> . 57) (:generic . 32) (keyword-parameter . 650)
            (<fragment-define-bindings-word> . 58) (<symbol> . 33)
            (generic-function-defining-word . 48) (:parsed-name . 65)
            (the-variable-name . 5) (<fragment-define-word> . 16)
            (<method-defining-word> . 4) (typed-keyword-variable . 347)
            (<defining-word> . 41) (:&all-keys . 649)
            (untyped-keyword-variable . 346) (:parsed-variable . 13)
            (variable-name . 344) (<keyword> . 343))
           (646 (<expr-intermediate-word> . 282)
            (<simple-intermediate-word> . 278)
            (intermediate-clause . 643)
            (<details-intermediate-word> . 285))
           (643 (operand . 70) (unary-operator . 69)
            (:parsed-local-declaration . 68)
            (<fragment-function-word> . 67) (expression . 289)
            (local-declaration . 288) (:parsed-name . 65)
            (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45)
            (<fragment-local-declaration-word> . 44) (<not> . 43)
            (statement . 42) (<defining-word> . 41) (<list-open> . 39)
            (<keyword> . 220) (binary-operand-series . 219)
            (defining-form . 281) (procedural-template . 34)
            (<symbol> . 33) (:generic . 32) (fragment-begin-word . 31)
            (:define . 30) (constituents . 279) (:local . 28)
            (binary-operand . 218) (:method . 27) (seal-word . 24)
            (literal . 25) (<lbracket> . 23)
            (:parsed-defining-form . 22) (begin-clause . 21)
            (<details-begin-word> . 20) (:let . 18) (body . 588)
            (opt-body . 644) (anonymous-method . 17) (literal0 . 15)
            (<fragment-define-word> . 16) (:macro-case . 14)
            (:parsed-variable . 13) (<expr-begin-word> . 12)
            (:false . 11) (variable-name . 9) (leaf . 8)
            (the-variable-name . 5) (<method-defining-word> . 4)
            (constituent . 276) (<seal-word> . 3) (:true . 2))
           (641 (opt-<statement-sep> . 642) (<statement-sep> . 373))
           (640 (<rbracket> . 641))
           (639 (<symbol> . 489) (:parsed-name . 488)
            (opt-detail-clauses . 640) (detail-clause . 486)
            (the-detail-clauses . 485) (detail-clauses . 484)
            (detail-clause-word . 483))
           (638 (operand . 70) (unary-operator . 69)
            (<fragment-function-word> . 67) (expression . 639)
            (:parsed-name . 65) (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (<not> . 43) (statement . 42)
            (<defining-word> . 41) (<list-open> . 39) (<keyword> . 220)
            (binary-operand-series . 219) (procedural-template . 34)
            (<symbol> . 33) (:generic . 32) (fragment-begin-word . 31)
            (:method . 27) (binary-operand . 218) (literal . 25)
            (<lbracket> . 23) (begin-clause . 21)
            (<details-begin-word> . 20) (anonymous-method . 17)
            (<fragment-define-word> . 16) (literal0 . 15)
            (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (:true . 2))
           (637 (<lbracket> . 638))
           (636 (operand . 70) (unary-operator . 69)
            (:parsed-local-declaration . 68)
            (<fragment-function-word> . 67) (expression . 289)
            (local-declaration . 288) (:parsed-name . 65)
            (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45)
            (<fragment-local-declaration-word> . 44) (<not> . 43)
            (statement . 42) (<defining-word> . 41) (<list-open> . 39)
            (<keyword> . 220) (binary-operand-series . 219)
            (defining-form . 281) (procedural-template . 34)
            (<symbol> . 33) (:generic . 32) (fragment-begin-word . 31)
            (:define . 30) (:local . 28) (binary-operand . 218)
            (:method . 27) (literal . 25) (seal-word . 24)
            (<lbracket> . 23) (:parsed-defining-form . 22)
            (begin-clause . 21) (<details-begin-word> . 20) (:let . 18)
            (anonymous-method . 17) (literal0 . 15)
            (<fragment-define-word> . 16) (:macro-case . 14)
            (:parsed-variable . 13) (<expr-begin-word> . 12)
            (:false . 11) (variable-name . 9) (leaf . 8)
            (the-variable-name . 5) (<method-defining-word> . 4)
            (constituent . 603) (<seal-word> . 3) (:true . 2))
           (633 (operand . 70) (unary-operator . 69)
            (<fragment-function-word> . 67)
            (:parsed-local-declaration . 68) (expression . 364)
            (local-declaration . 288) (:parsed-name . 65)
            (expressions . 363) (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52) (case-label . 362)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (case-body . 634)
            (:parsed-expression . 46) (<vector-open> . 45)
            (final-case . 361) (<not> . 43)
            (<fragment-local-declaration-word> . 44) (statement . 42)
            (<defining-word> . 41) (the-case-body . 367)
            (<list-open> . 39) (<keyword> . 220)
            (binary-operand-series . 219) (intermediate-case . 365)
            (defining-form . 281) (procedural-template . 34)
            (<symbol> . 33) (:generic . 32) (fragment-begin-word . 31)
            (:define . 30) (:local . 28) (binary-operand . 218)
            (:method . 27) (literal . 25) (seal-word . 24)
            (<lbracket> . 369) (:parsed-defining-form . 22)
            (begin-clause . 21) (<details-begin-word> . 20) (:let . 18)
            (anonymous-method . 17) (<fragment-define-word> . 16)
            (literal0 . 15) (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (constituent . 603)
            (<seal-word> . 3) (:true . 2) (:otherwise . 360))
           (631 (<rbracket> . 632))
           (630 (<dot> . 73) (<lsbracket> . 72) (<lbracket> . 71))
           (629 (property . 390) (the-property-list . 389)
            (<var-sep> . 391) (property-list . 631))
           (626 (operand . 70) (unary-operator . 69)
            (<fragment-function-word> . 67) (expression . 628)
            (:parsed-name . 65) (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (<not> . 43) (statement . 42)
            (<defining-word> . 41) (<list-open> . 39) (<keyword> . 220)
            (binary-operand-series . 219) (procedural-template . 34)
            (<symbol> . 33) (:generic . 32) (fragment-begin-word . 31)
            (:method . 27) (binary-operand . 218) (handler . 627)
            (literal . 25) (<lbracket> . 23) (begin-clause . 21)
            (<details-begin-word> . 20) (anonymous-method . 17)
            (<fragment-define-word> . 16) (literal0 . 15)
            (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (:true . 2))
           (624 (<binds> . 626))
           (623 (operand . 630) (unary-operator . 69)
            (<fragment-function-word> . 67) (expression . 358)
            (:parsed-name . 65) (<unary-operator> . 64)
            (<fragment-define-and-begin-word> . 62) (<minus> . 63)
            (keyless-binary-operand . 221) (type . 629)
            (function-macro-call . 60) (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (<not> . 43) (statement . 42)
            (<defining-word> . 41) (<list-open> . 39) (<keyword> . 220)
            (binary-operand-series . 219) (procedural-template . 34)
            (<symbol> . 33) (:generic . 32) (fragment-begin-word . 31)
            (:method . 27) (binary-operand . 218) (literal . 25)
            (<lbracket> . 23) (begin-clause . 21)
            (<details-begin-word> . 20) (anonymous-method . 17)
            (<fragment-define-word> . 16) (literal0 . 15)
            (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (:true . 2))
           (621 (operand . 70) (unary-operator . 69)
            (<fragment-function-word> . 67) (expression . 622)
            (:parsed-name . 65) (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (<not> . 43) (statement . 42)
            (<defining-word> . 41) (<list-open> . 39) (<keyword> . 220)
            (binary-operand-series . 219) (procedural-template . 34)
            (<symbol> . 33) (:generic . 32) (fragment-begin-word . 31)
            (:method . 27) (binary-operand . 218) (literal . 25)
            (<lbracket> . 23) (begin-clause . 21)
            (<details-begin-word> . 20) (anonymous-method . 17)
            (<fragment-define-word> . 16) (literal0 . 15)
            (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (:true . 2))
           (620 (<binds> . 621)) (619 (<rbracket> . 620))
           (617 (operand . 70) (unary-operator . 69)
            (<fragment-function-word> . 67) (expression . 618)
            (:parsed-name . 65) (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (<not> . 43) (statement . 42)
            (<defining-word> . 41) (<list-open> . 39) (<keyword> . 220)
            (binary-operand-series . 219) (procedural-template . 34)
            (<symbol> . 33) (:generic . 32) (fragment-begin-word . 31)
            (:method . 27) (binary-operand . 218) (literal . 25)
            (<lbracket> . 23) (begin-clause . 21)
            (<details-begin-word> . 20) (anonymous-method . 17)
            (<fragment-define-word> . 16) (literal0 . 15)
            (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (:true . 2))
           (616 (<binds> . 617))
           (614 (typed-variable . 385)
            (<generic-function-defining-word> . 49) (<ellipsis> . 57)
            (variables . 619) (:generic . 32)
            (<fragment-define-bindings-word> . 58) (<symbol> . 33)
            (generic-function-defining-word . 48) (:parsed-name . 65)
            (the-variable-name . 5) (:&rest . 552) (variable . 551)
            (<fragment-define-word> . 16) (<method-defining-word> . 4)
            (<defining-word> . 41) (:parsed-variable . 13)
            (untyped-variable . 378) (variable-name . 376))
           (613 (operand . 565) (<fragment-function-word> . 67)
            (:parsed-name . 65) (<fragment-define-and-begin-word> . 62)
            (type . 625) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (condition . 624) (:parsed-body . 55)
            (:parsed-literal . 54) (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (statement . 42)
            (<defining-word> . 41) (<list-open> . 39)
            (procedural-template . 34) (<symbol> . 33) (:generic . 32)
            (fragment-begin-word . 31) (:method . 27) (literal . 25)
            (<lbracket> . 623) (begin-clause . 21)
            (<details-begin-word> . 20) (anonymous-method . 17)
            (<fragment-define-word> . 16) (literal0 . 15)
            (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (:true . 2))
           (610 (<var-sep> . 575)) (609 (<rbracket> . 611))
           (608 (operand . 70) (unary-operator . 69)
            (<fragment-function-word> . 67) (expression . 573)
            (:parsed-name . 65) (expressions . 610)
            (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (<not> . 43) (statement . 42)
            (<defining-word> . 41) (<list-open> . 39) (<keyword> . 220)
            (binary-operand-series . 219) (procedural-template . 34)
            (<symbol> . 33) (:generic . 32) (fragment-begin-word . 31)
            (binary-operand . 218) (:method . 27) (literal . 25)
            (<lbracket> . 23) (begin-clause . 21)
            (<details-begin-word> . 20) (anonymous-method . 17)
            (<fragment-define-word> . 16) (literal0 . 15)
            (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (opt-expressions . 609)
            (:false . 11) (variable-name . 9) (leaf . 8)
            (the-variable-name . 5) (<method-defining-word> . 4)
            (:true . 2))
           (607 (<lbracket> . 608))
           (606 (<generic-function-defining-word> . 49)
            (<ellipsis> . 57) (:generic . 32)
            (<fragment-define-bindings-word> . 58) (<symbol> . 33)
            (generic-function-defining-word . 48) (:parsed-name . 65)
            (the-variable-name . 5) (<fragment-define-word> . 16)
            (<method-defining-word> . 4) (<defining-word> . 41)
            (:parsed-variable . 13) (variable-name . 607))
           (605 (:generic . 606))
           (601 (operand . 70) (unary-operator . 69)
            (<fragment-function-word> . 67)
            (:parsed-local-declaration . 68) (expression . 364)
            (local-declaration . 288) (:parsed-name . 65)
            (expressions . 363) (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52) (case-label . 604)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (<not> . 43)
            (<fragment-local-declaration-word> . 44) (statement . 42)
            (<defining-word> . 41) (<list-open> . 39) (<keyword> . 220)
            (binary-operand-series . 219) (defining-form . 281)
            (procedural-template . 34) (<symbol> . 33) (:generic . 32)
            (fragment-begin-word . 31) (:define . 30) (:local . 28)
            (binary-operand . 218) (:method . 27) (literal . 25)
            (seal-word . 24) (<lbracket> . 369)
            (:parsed-defining-form . 22) (begin-clause . 21)
            (<details-begin-word> . 20) (:let . 18)
            (anonymous-method . 17) (<fragment-define-word> . 16)
            (literal0 . 15) (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (constituent . 603)
            (<seal-word> . 3) (:true . 2) (:otherwise . 360))
           (596 (operand . 70) (unary-operator . 69)
            (<fragment-function-word> . 67) (expression . 573)
            (:parsed-name . 65) (expressions . 363)
            (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52) (case-label . 598)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (<not> . 43) (statement . 42)
            (<defining-word> . 41) (<list-open> . 39) (<keyword> . 220)
            (binary-operand-series . 219) (procedural-template . 34)
            (<symbol> . 33) (:generic . 32) (fragment-begin-word . 31)
            (binary-operand . 218) (:method . 27) (literal . 25)
            (<lbracket> . 369) (begin-clause . 21)
            (<details-begin-word> . 20) (anonymous-method . 17)
            (<fragment-define-word> . 16) (literal0 . 15)
            (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (:true . 2) (:otherwise . 360))
           (595 (opt-<statement-sep> . 602) (<statement-sep> . 601))
           (590 (operand . 70) (unary-operator . 69)
            (<fragment-function-word> . 67) (expression . 573)
            (:parsed-name . 65) (expressions . 363)
            (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52) (case-label . 362)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (case-body . 593)
            (:parsed-expression . 46) (<vector-open> . 45)
            (final-case . 361) (<not> . 43) (statement . 42)
            (<defining-word> . 41) (the-case-body . 367)
            (<list-open> . 39) (<keyword> . 220)
            (binary-operand-series . 219) (intermediate-case . 365)
            (procedural-template . 34) (<symbol> . 33) (:generic . 32)
            (fragment-begin-word . 31) (binary-operand . 218)
            (:method . 27) (literal . 25) (<lbracket> . 369)
            (begin-clause . 21) (<details-begin-word> . 20)
            (anonymous-method . 17) (<fragment-define-word> . 16)
            (literal0 . 15) (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (:true . 2) (:otherwise . 360))
           (589 (opt-<statement-sep> . 602) (<statement-sep> . 633))
           (578 (<fragment-begin-word> . 47) (opt-begin-word . 585)
            (<details-begin-word> . 584) (fragment-begin-word . 583)
            (<simple-begin-word> . 582) (<expr-begin-word> . 581)
            (<fragment-define-and-begin-word> . 62)
            (<fragment-define-bindings-and-begin-word> . 56)
            (begin-word . 580))
           (575 (operand . 70) (unary-operator . 69)
            (<fragment-function-word> . 67) (expression . 576)
            (:parsed-name . 65) (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (<not> . 43) (statement . 42)
            (<defining-word> . 41) (<list-open> . 39) (<keyword> . 220)
            (binary-operand-series . 219) (procedural-template . 34)
            (<symbol> . 33) (:generic . 32) (fragment-begin-word . 31)
            (:method . 27) (binary-operand . 218) (literal . 25)
            (<lbracket> . 23) (begin-clause . 21)
            (<details-begin-word> . 20) (anonymous-method . 17)
            (<fragment-define-word> . 16) (literal0 . 15)
            (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (:true . 2))
           (574 (<implies> . 577))
           (572 (<var-sep> . 575) (<rbracket> . 574))
           (571 (operand . 70) (unary-operator . 69)
            (<fragment-function-word> . 67) (expression . 573)
            (:parsed-name . 65) (expressions . 572)
            (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (<not> . 43) (statement . 42)
            (<defining-word> . 41) (<list-open> . 39) (<keyword> . 220)
            (binary-operand-series . 219) (procedural-template . 34)
            (<symbol> . 33) (:generic . 32) (fragment-begin-word . 31)
            (:method . 27) (binary-operand . 218) (literal . 25)
            (<lbracket> . 23) (begin-clause . 21)
            (<details-begin-word> . 20) (anonymous-method . 17)
            (<fragment-define-word> . 16) (literal0 . 15)
            (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (:true . 2))
           (570 (<var-sep> . 571) (<rbracket> . 359))
           (569 (property . 392) (<var-sep> . 391))
           (567 (property . 390) (the-property-list . 569)
            (<var-sep> . 391) (opt-the-property-list . 568))
           (565 (<dot> . 73) (<lsbracket> . 72) (<lbracket> . 71))
           (563 (operand . 565) (<fragment-function-word> . 67)
            (:parsed-name . 65) (<fragment-define-and-begin-word> . 62)
            (type . 564) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (statement . 42)
            (<defining-word> . 41) (<list-open> . 39)
            (procedural-template . 34) (<symbol> . 33) (:generic . 32)
            (fragment-begin-word . 31) (:method . 27) (literal . 25)
            (<lbracket> . 23) (begin-clause . 21)
            (<details-begin-word> . 20) (anonymous-method . 17)
            (<fragment-define-word> . 16) (literal0 . 15)
            (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (:true . 2))
           (560 (typed-variable . 385)
            (<generic-function-defining-word> . 49) (<ellipsis> . 57)
            (variables . 561) (:generic . 32)
            (<fragment-define-bindings-word> . 58) (<symbol> . 33)
            (generic-function-defining-word . 48) (:parsed-name . 65)
            (the-variable-name . 5) (:&rest . 552) (variable . 551)
            (<fragment-define-word> . 16) (<method-defining-word> . 4)
            (<defining-word> . 41) (:parsed-variable . 13)
            (untyped-variable . 378) (variable-name . 376))
           (557 (<symbol> . 489) (:parsed-name . 488)
            (opt-detail-clauses . 558) (detail-clause . 486)
            (the-detail-clauses . 485) (detail-clauses . 484)
            (detail-clause-word . 483))
           (556 (operand . 70) (unary-operator . 69)
            (<fragment-function-word> . 67) (expression . 557)
            (:parsed-name . 65) (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (<not> . 43) (statement . 42)
            (<defining-word> . 41) (<list-open> . 39) (<keyword> . 220)
            (binary-operand-series . 219) (procedural-template . 34)
            (<symbol> . 33) (:generic . 32) (fragment-begin-word . 31)
            (:method . 27) (binary-operand . 218) (literal . 25)
            (<lbracket> . 23) (begin-clause . 21)
            (<details-begin-word> . 20) (anonymous-method . 17)
            (<fragment-define-word> . 16) (literal0 . 15)
            (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (:true . 2))
           (554 (<symbol> . 489) (<binds> . 556) (:parsed-name . 488)
            (opt-detail-clauses . 555) (detail-clause . 486)
            (the-detail-clauses . 485) (detail-clauses . 484)
            (detail-clause-word . 483))
           (553 (<rbracket> . 554))
           (552 (<generic-function-defining-word> . 49)
            (<ellipsis> . 57) (:generic . 32)
            (<fragment-define-bindings-word> . 58) (<symbol> . 33)
            (generic-function-defining-word . 48) (:parsed-name . 65)
            (the-variable-name . 5) (<fragment-define-word> . 16)
            (<method-defining-word> . 4) (<defining-word> . 41)
            (:parsed-variable . 13) (variable-name . 559))
           (551 (<var-sep> . 560))
           (548 (<symbol> . 489) (:parsed-name . 488)
            (opt-detail-clauses . 549) (detail-clause . 486)
            (the-detail-clauses . 485) (detail-clauses . 484)
            (detail-clause-word . 483))
           (547 (operand . 70) (unary-operator . 69)
            (<fragment-function-word> . 67) (expression . 548)
            (:parsed-name . 65) (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (<not> . 43) (statement . 42)
            (<defining-word> . 41) (<list-open> . 39) (<keyword> . 220)
            (binary-operand-series . 219) (procedural-template . 34)
            (<symbol> . 33) (:generic . 32) (fragment-begin-word . 31)
            (:method . 27) (binary-operand . 218) (literal . 25)
            (<lbracket> . 23) (begin-clause . 21)
            (<details-begin-word> . 20) (anonymous-method . 17)
            (<fragment-define-word> . 16) (literal0 . 15)
            (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (:true . 2))
           (544 (operand . 70) (unary-operator . 69)
            (<fragment-function-word> . 67) (expression . 550)
            (:parsed-name . 65) (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (<not> . 43) (statement . 42)
            (<defining-word> . 41) (<list-open> . 39) (<keyword> . 220)
            (binary-operand-series . 219) (procedural-template . 34)
            (<symbol> . 33) (:generic . 32) (fragment-begin-word . 31)
            (:method . 27) (binary-operand . 218) (literal . 25)
            (<lbracket> . 23) (begin-clause . 21)
            (<details-begin-word> . 20) (anonymous-method . 17)
            (<fragment-define-word> . 16) (literal0 . 15)
            (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (:true . 2))
           (543 (aux-rule . 538) (<lcbracket> . 415))
           (539 (:macro-case . 541) (opt-macro-case . 540))
           (536 (:end . 539))
           (535 (aux-rule-set . 542) (<keyword> . 534))
           (534 (aux-rule . 416) (<lcbracket> . 415) (aux-rules . 543))
           (531 (word-fragment . 441) (modified-constant . 440)
            (:parsed-name . 439) (<binds> . 135) (:&rest . 438)
            (<minus> . 133) (<fragment-define-bindings-word> . 131)
            (<ellipsis> . 436) (<string> . 435) (<literal> . 123)
            (the-pattern-sequence . 434) (<vector-open> . 121)
            (<becomes> . 119) (<not> . 118) (pattern-variable . 432)
            (<defining-word> . 116) (<list-open> . 115)
            (<binary-operator> . 112) (<keyword> . 111)
            (pattern-list . 532) (<implies> . 429) (<lcbracket> . 428)
            (<symbol> . 104) (property-list-pattern . 427)
            (<var-singleton-sep> . 103) (<lsbracket> . 426)
            (<escaped-hash-word> . 425) (<lbracket> . 424)
            (<query> . 423) (pattern-sequence . 422)
            (details-pattern . 421) (<fragment-define-word> . 94)
            (:false . 91) (literal-pattern . 420)
            (simple-pattern . 419) (:otherwise . 418) (:true . 86)
            (:&key . 417))
           (529 (<rbracket> . 530)) (527 (<rsbracket> . 528))
           (524 (word-fragment . 441) (modified-constant . 440)
            (:parsed-name . 439) (<binds> . 135) (:&rest . 438)
            (<minus> . 133) (opt-the-pattern . 526)
            (<fragment-define-bindings-word> . 131) (<ellipsis> . 436)
            (<string> . 435) (<literal> . 123)
            (the-pattern-sequence . 434) (<vector-open> . 121)
            (<becomes> . 119) (<not> . 118) (the-pattern . 525)
            (pattern-variable . 432) (<defining-word> . 116)
            (<list-open> . 115) (<binary-operator> . 112)
            (<keyword> . 111) (pattern-list . 431) (<implies> . 429)
            (<lcbracket> . 428) (<symbol> . 104)
            (property-list-pattern . 427) (<var-singleton-sep> . 103)
            (<lsbracket> . 426) (<escaped-hash-word> . 425)
            (<lbracket> . 424) (<query> . 423) (pattern-sequence . 422)
            (details-pattern . 421) (<fragment-define-word> . 94)
            (:false . 91) (literal-pattern . 420)
            (simple-pattern . 419) (:otherwise . 418) (:true . 86)
            (:&key . 417))
           (522 (<rcbracket> . 523))
           (519 (<ellipsis> . 436) (pattern-variable . 520)
            (<query> . 423))
           (518 (<string> . 521)) (515 (<string> . 516))
           (514 (<splice> . 515))
           (513 (<ellipsis> . 436) (pattern-variable . 514)
            (<query> . 423))
           (511 (<rcbracket> . 512))
           (508 (opt-<statement-sep> . 510) (<statement-sep> . 373))
           (507 (<fragment-function-word> . 212) (<query-query> . 211)
            (:parsed-name . 210) (<binds> . 209) (:&rest . 208)
            (<unary-operator> . 207)
            (<fragment-define-and-begin-word> . 206) (<minus> . 205)
            (opt-template . 511)
            (<fragment-define-bindings-word> . 203)
            (<fragment-define-bindings-and-begin-word> . 202)
            (<ellipsis> . 201) (:parsed-body . 200)
            (:parsed-literal . 199) (:end . 198) (:macro . 197)
            (<string> . 196) (<syntax-open> . 195)
            (<simple-begin-word> . 194) (:&next . 193)
            (<generic-function-defining-word> . 192) (<literal> . 191)
            (spliceable-replacement . 190)
            (<fragment-begin-word> . 189) (:parsed-expression . 188)
            (<vector-open> . 187) (<becomes> . 186)
            (<fragment-local-declaration-word> . 185) (<not> . 184)
            (replacement . 183) (<var-sep> . 182)
            (<defining-word> . 181) (template . 180)
            (<list-open> . 179) (<var-type-sep> . 178)
            (<binary-operator> . 177) (:handler . 176)
            (<keyword> . 175) (<statement-sep> . 174)
            (<details-intermediate-word> . 173) (:&all-keys . 172)
            (word . 171) (<implies> . 170)
            (<expr-intermediate-word> . 169) (<lcbracket> . 168)
            (<symbol> . 167) (:generic . 166) (:define . 165)
            (<var-singleton-sep> . 164) (separator . 163) (<dot> . 162)
            (:local . 161) (<lsbracket> . 160)
            (replacement-element . 159) (:method . 158)
            (<simple-intermediate-word> . 157) (<lbracket> . 156)
            (<details-begin-word> . 155) (<escaped-substitution> . 154)
            (:let . 153) (<query> . 152) (<fragment-define-word> . 151)
            (:parsed-variable . 150) (<expr-begin-word> . 149)
            (:false . 148) (<query-equal> . 147)
            (:parsed-case-body . 146) (<method-defining-word> . 145)
            (<seal-word> . 144) (:otherwise . 143) (:true . 142)
            (:&key . 141))
           (506 (operand . 70) (unary-operator . 69)
            (<fragment-function-word> . 67) (expression . 509)
            (:parsed-name . 65) (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (<not> . 43) (statement . 42)
            (<defining-word> . 41) (<list-open> . 39) (rule-rhs . 508)
            (<keyword> . 220) (binary-operand-series . 219)
            (<lcbracket> . 507) (procedural-template . 34)
            (<symbol> . 33) (:generic . 32) (fragment-begin-word . 31)
            (:method . 27) (binary-operand . 218) (literal . 25)
            (<lbracket> . 23) (begin-clause . 21)
            (<details-begin-word> . 20) (anonymous-method . 17)
            (<fragment-define-word> . 16) (literal0 . 15)
            (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (:true . 2))
           (505 (<implies> . 506))
           (500 (<ellipsis> . 436) (pattern-variable . 451)
            (pattern-keyword . 449) (sequence-pattern-variable . 448)
            (pattern-keywords . 501) (:&all-keys . 446)
            (<query-query> . 445) (<query> . 423))
           (487 (<rbracket> . 490))
           (485 (<symbol> . 489) (:parsed-name . 488)
            (detail-clause . 491) (detail-clause-word . 483))
           (483 (operand . 70) (unary-operator . 69)
            (<fragment-function-word> . 67) (expression . 492)
            (:parsed-name . 65) (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (<not> . 43) (statement . 42)
            (<defining-word> . 41) (<list-open> . 39) (<keyword> . 220)
            (binary-operand-series . 219) (procedural-template . 34)
            (<symbol> . 33) (:generic . 32) (fragment-begin-word . 31)
            (:method . 27) (binary-operand . 218) (literal . 25)
            (<lbracket> . 23) (begin-clause . 21)
            (<details-begin-word> . 20) (anonymous-method . 17)
            (<fragment-define-word> . 16) (literal0 . 15)
            (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (:true . 2))
           (482 (<symbol> . 489) (:parsed-name . 488)
            (opt-detail-clauses . 487) (detail-clause . 486)
            (the-detail-clauses . 485) (detail-clauses . 484)
            (detail-clause-word . 483))
           (481 (operand . 70) (unary-operator . 69)
            (<fragment-function-word> . 67) (expression . 482)
            (:parsed-name . 65) (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (<not> . 43) (statement . 42)
            (<defining-word> . 41) (<list-open> . 39) (<keyword> . 220)
            (binary-operand-series . 219) (procedural-template . 34)
            (<symbol> . 33) (:generic . 32) (fragment-begin-word . 31)
            (:method . 27) (binary-operand . 218) (literal . 25)
            (<lbracket> . 23) (begin-clause . 21)
            (<details-begin-word> . 20) (anonymous-method . 17)
            (<fragment-define-word> . 16) (literal0 . 15)
            (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (:true . 2))
           (480 (<lbracket> . 481)) (478 (<rbracket> . 479))
           (477 (operand . 70) (unary-operator . 69)
            (<fragment-function-word> . 67) (expression . 478)
            (:parsed-name . 65) (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (<not> . 43) (statement . 42)
            (<defining-word> . 41) (<list-open> . 39) (<keyword> . 220)
            (binary-operand-series . 219) (procedural-template . 34)
            (<symbol> . 33) (:generic . 32) (fragment-begin-word . 31)
            (:method . 27) (binary-operand . 218) (literal . 25)
            (<lbracket> . 23) (begin-clause . 21)
            (<details-begin-word> . 20) (anonymous-method . 17)
            (<fragment-define-word> . 16) (literal0 . 15)
            (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (:true . 2))
           (476 (<rbracket> . 494)) (475 (<rsbracket> . 495))
           (474 (<rcbracket> . 496)) (473 (<rbracket> . 497))
           (471 (<rsbracket> . 498)) (469 (<string> . 470))
           (468 (<fragment-function-word> . 212) (<query-query> . 211)
            (:parsed-name . 210) (<binds> . 209) (:&rest . 208)
            (<unary-operator> . 207)
            (<fragment-define-and-begin-word> . 206) (<minus> . 205)
            (<fragment-define-bindings-word> . 203)
            (<fragment-define-bindings-and-begin-word> . 202)
            (<ellipsis> . 201) (:parsed-body . 200)
            (:parsed-literal . 199) (:end . 198) (:macro . 197)
            (<string> . 196) (<syntax-open> . 195)
            (<simple-begin-word> . 194) (:&next . 193)
            (<generic-function-defining-word> . 192) (<literal> . 191)
            (spliceable-replacement . 190)
            (<fragment-begin-word> . 189) (:parsed-expression . 188)
            (<vector-open> . 187) (<becomes> . 186)
            (<fragment-local-declaration-word> . 185) (<not> . 184)
            (<var-sep> . 182) (<defining-word> . 181)
            (<list-open> . 179) (<var-type-sep> . 178)
            (<binary-operator> . 177) (:handler . 176)
            (<keyword> . 175) (<statement-sep> . 174)
            (<details-intermediate-word> . 173) (:&all-keys . 172)
            (word . 171) (<implies> . 170)
            (<expr-intermediate-word> . 169) (<lcbracket> . 168)
            (<symbol> . 167) (:generic . 166) (:define . 165)
            (<var-singleton-sep> . 164) (separator . 163) (<dot> . 162)
            (:local . 161) (<lsbracket> . 160)
            (replacement-element . 472) (:method . 158)
            (<simple-intermediate-word> . 157) (<lbracket> . 156)
            (<details-begin-word> . 155) (<escaped-substitution> . 154)
            (:let . 153) (<query> . 152) (<fragment-define-word> . 151)
            (:parsed-variable . 150) (<expr-begin-word> . 149)
            (:false . 148) (<query-equal> . 147)
            (:parsed-case-body . 146) (<method-defining-word> . 145)
            (<seal-word> . 144) (:otherwise . 143) (:true . 142)
            (:&key . 141))
           (467 (<rcbracket> . 499)) (462 (<string> . 463))
           (461 (<splice> . 462))
           (460 (<generic-function-defining-word> . 192)
            (<fragment-define-bindings-word> . 203) (<string> . 466)
            (<fragment-begin-word> . 189) (<symbol> . 167)
            (<expr-intermediate-word> . 169)
            (<simple-intermediate-word> . 157) (:parsed-name . 210)
            (<fragment-local-declaration-word> . 185)
            (<details-begin-word> . 155) (<fragment-define-word> . 151)
            (<method-defining-word> . 145) (<simple-begin-word> . 194)
            (<defining-word> . 181) (<expr-begin-word> . 149)
            (<fragment-function-word> . 212)
            (<details-intermediate-word> . 173) (<literal> . 465)
            (<fragment-define-and-begin-word> . 206) (word . 464)
            (<seal-word> . 144)
            (<fragment-define-bindings-and-begin-word> . 202))
           (459 (spliceable-replacement . 461) (<query> . 460))
           (457 (<rcbracket> . 458))
           (455 (<fragment-function-word> . 212) (<query-query> . 211)
            (:parsed-name . 210) (<binds> . 209) (:&rest . 208)
            (<unary-operator> . 207)
            (<fragment-define-and-begin-word> . 206) (<minus> . 205)
            (opt-template . 457)
            (<fragment-define-bindings-word> . 203)
            (<fragment-define-bindings-and-begin-word> . 202)
            (<ellipsis> . 201) (:parsed-body . 200)
            (:parsed-literal . 199) (:end . 198) (:macro . 197)
            (<string> . 196) (<syntax-open> . 195)
            (<simple-begin-word> . 194) (:&next . 193)
            (<generic-function-defining-word> . 192) (<literal> . 191)
            (spliceable-replacement . 190)
            (<fragment-begin-word> . 189) (:parsed-expression . 188)
            (<vector-open> . 187) (<becomes> . 186)
            (<fragment-local-declaration-word> . 185) (<not> . 184)
            (replacement . 183) (<var-sep> . 182)
            (<defining-word> . 181) (template . 180)
            (<list-open> . 179) (<var-type-sep> . 178)
            (<binary-operator> . 177) (:handler . 176)
            (<keyword> . 175) (<statement-sep> . 174)
            (<details-intermediate-word> . 173) (:&all-keys . 172)
            (word . 171) (<implies> . 170)
            (<expr-intermediate-word> . 169) (<lcbracket> . 168)
            (<symbol> . 167) (:generic . 166) (:define . 165)
            (<var-singleton-sep> . 164) (separator . 163) (<dot> . 162)
            (:local . 161) (<lsbracket> . 160)
            (replacement-element . 159) (:method . 158)
            (<simple-intermediate-word> . 157) (<lbracket> . 156)
            (<details-begin-word> . 155) (<escaped-substitution> . 154)
            (:let . 153) (<query> . 152) (<fragment-define-word> . 151)
            (:parsed-variable . 150) (<expr-begin-word> . 149)
            (:false . 148) (<query-equal> . 147)
            (:parsed-case-body . 146) (<method-defining-word> . 145)
            (<seal-word> . 144) (:otherwise . 143) (:true . 142)
            (:&key . 141))
           (454 (operand . 70) (unary-operator . 69)
            (<fragment-function-word> . 67) (expression . 456)
            (:parsed-name . 65) (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (<not> . 43) (statement . 42)
            (<defining-word> . 41) (<list-open> . 39) (<keyword> . 220)
            (binary-operand-series . 219) (<lcbracket> . 455)
            (procedural-template . 34) (<symbol> . 33) (:generic . 32)
            (fragment-begin-word . 31) (:method . 27)
            (binary-operand . 218) (literal . 25) (<lbracket> . 23)
            (begin-clause . 21) (<details-begin-word> . 20)
            (anonymous-method . 17) (<fragment-define-word> . 16)
            (literal0 . 15) (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (:true . 2))
           (451 (<binds> . 454) (pattern-keyword-default . 453)
            (opt-pattern-keyword-default . 452))
           (449 (<var-sep> . 500))
           (448 (<binds> . 454) (pattern-keyword-default . 453)
            (opt-pattern-keyword-default . 502))
           (445 (<generic-function-defining-word> . 192)
            (<fragment-define-bindings-word> . 203)
            (<fragment-begin-word> . 189) (<symbol> . 167)
            (<expr-intermediate-word> . 169)
            (<simple-intermediate-word> . 157) (:parsed-name . 210)
            (<fragment-local-declaration-word> . 185)
            (<details-begin-word> . 155) (<fragment-define-word> . 151)
            (<method-defining-word> . 145) (<simple-begin-word> . 194)
            (<defining-word> . 181) (<expr-begin-word> . 149)
            (<fragment-function-word> . 212)
            (<details-intermediate-word> . 173)
            (<fragment-define-and-begin-word> . 206) (word . 503)
            (<seal-word> . 144)
            (<fragment-define-bindings-and-begin-word> . 202))
           (444 (<ellipsis> . 436) (pattern-variable . 451)
            (opt-pattern-keywords . 450) (pattern-keyword . 449)
            (sequence-pattern-variable . 448) (pattern-keywords . 447)
            (:&all-keys . 446) (<query-query> . 445) (<query> . 423))
           (443 (:&key . 444)) (442 (<var-sep> . 443))
           (438 (<ellipsis> . 436) (pattern-variable . 442)
            (<query> . 423))
           (437 (<rcbracket> . 505)) (435 (<splice> . 513))
           (434 (<ellipsis> . 436) (<escaped-hash-word> . 425)
            (<fragment-define-bindings-word> . 131) (<string> . 435)
            (<var-singleton-sep> . 103) (<binds> . 135)
            (<symbol> . 104) (simple-pattern . 517)
            (<binary-operator> . 112) (pattern-variable . 432)
            (:parsed-name . 439) (:false . 91)
            (modified-constant . 440) (<lcbracket> . 428)
            (<fragment-define-word> . 94) (details-pattern . 421)
            (:true . 86) (<minus> . 133) (<defining-word> . 116)
            (<lsbracket> . 426) (<vector-open> . 121)
            (literal-pattern . 420) (<literal> . 123) (<becomes> . 119)
            (<lbracket> . 424) (<list-open> . 115)
            (word-fragment . 441) (<query> . 423) (<implies> . 429)
            (:otherwise . 418) (<keyword> . 111) (<not> . 118))
           (432 (<var-type-sep> . 519) (<splice> . 518))
           (431 (<statement-sep> . 524))
           (428 (word-fragment . 441) (modified-constant . 440)
            (:parsed-name . 439) (<binds> . 135) (:&rest . 438)
            (<minus> . 133) (opt-pattern . 522)
            (<fragment-define-bindings-word> . 131) (<ellipsis> . 436)
            (<string> . 435) (<literal> . 123)
            (the-pattern-sequence . 434) (<vector-open> . 121)
            (<becomes> . 119) (<not> . 118) (the-pattern . 433)
            (pattern-variable . 432) (<defining-word> . 116)
            (<list-open> . 115) (<binary-operator> . 112)
            (<keyword> . 111) (pattern-list . 431) (pattern . 430)
            (<implies> . 429) (<lcbracket> . 428) (<symbol> . 104)
            (property-list-pattern . 427) (<var-singleton-sep> . 103)
            (<lsbracket> . 426) (<escaped-hash-word> . 425)
            (<lbracket> . 424) (<query> . 423) (pattern-sequence . 422)
            (details-pattern . 421) (<fragment-define-word> . 94)
            (:false . 91) (literal-pattern . 420)
            (simple-pattern . 419) (:otherwise . 418) (:true . 86)
            (:&key . 417))
           (426 (word-fragment . 441) (modified-constant . 440)
            (:parsed-name . 439) (<binds> . 135) (:&rest . 438)
            (<minus> . 133) (opt-pattern . 527)
            (<fragment-define-bindings-word> . 131) (<ellipsis> . 436)
            (<string> . 435) (<literal> . 123)
            (the-pattern-sequence . 434) (<vector-open> . 121)
            (<becomes> . 119) (<not> . 118) (the-pattern . 433)
            (pattern-variable . 432) (<defining-word> . 116)
            (<list-open> . 115) (<binary-operator> . 112)
            (<keyword> . 111) (pattern-list . 431) (pattern . 430)
            (<implies> . 429) (<lcbracket> . 428) (<symbol> . 104)
            (property-list-pattern . 427) (<var-singleton-sep> . 103)
            (<lsbracket> . 426) (<escaped-hash-word> . 425)
            (<lbracket> . 424) (<query> . 423) (pattern-sequence . 422)
            (details-pattern . 421) (<fragment-define-word> . 94)
            (:false . 91) (literal-pattern . 420)
            (simple-pattern . 419) (:otherwise . 418) (:true . 86)
            (:&key . 417))
           (424 (word-fragment . 441) (modified-constant . 440)
            (:parsed-name . 439) (<binds> . 135) (:&rest . 438)
            (<minus> . 133) (opt-pattern . 529)
            (<fragment-define-bindings-word> . 131) (<ellipsis> . 436)
            (<string> . 435) (<literal> . 123)
            (the-pattern-sequence . 434) (<vector-open> . 121)
            (<becomes> . 119) (<not> . 118) (the-pattern . 433)
            (pattern-variable . 432) (<defining-word> . 116)
            (<list-open> . 115) (<binary-operator> . 112)
            (<keyword> . 111) (pattern-list . 431) (pattern . 430)
            (<implies> . 429) (<lcbracket> . 428) (<symbol> . 104)
            (property-list-pattern . 427) (<var-singleton-sep> . 103)
            (<lsbracket> . 426) (<escaped-hash-word> . 425)
            (<lbracket> . 424) (<query> . 423) (pattern-sequence . 422)
            (details-pattern . 421) (<fragment-define-word> . 94)
            (:false . 91) (literal-pattern . 420)
            (simple-pattern . 419) (:otherwise . 418) (:true . 86)
            (:&key . 417))
           (423 (<generic-function-defining-word> . 192)
            (<fragment-define-bindings-word> . 203)
            (<fragment-begin-word> . 189) (<symbol> . 167)
            (<expr-intermediate-word> . 169)
            (<simple-intermediate-word> . 157) (:parsed-name . 210)
            (<fragment-local-declaration-word> . 185)
            (<details-begin-word> . 155) (<fragment-define-word> . 151)
            (<method-defining-word> . 145) (<simple-begin-word> . 194)
            (<defining-word> . 181) (<expr-begin-word> . 149)
            (<fragment-function-word> . 212)
            (<details-intermediate-word> . 173)
            (<fragment-define-and-begin-word> . 206) (word . 504)
            (<seal-word> . 144)
            (<fragment-define-bindings-and-begin-word> . 202))
           (422 (<var-sep> . 531))
           (417 (<ellipsis> . 436) (pattern-variable . 451)
            (opt-pattern-keywords . 533) (pattern-keyword . 449)
            (sequence-pattern-variable . 448) (pattern-keywords . 447)
            (:&all-keys . 446) (<query-query> . 445) (<query> . 423))
           (415 (word-fragment . 441) (modified-constant . 440)
            (:parsed-name . 439) (<binds> . 135) (:&rest . 438)
            (<minus> . 133) (opt-pattern . 437)
            (<fragment-define-bindings-word> . 131) (<ellipsis> . 436)
            (<string> . 435) (<literal> . 123)
            (the-pattern-sequence . 434) (<vector-open> . 121)
            (<becomes> . 119) (<not> . 118) (the-pattern . 433)
            (pattern-variable . 432) (<defining-word> . 116)
            (<list-open> . 115) (<binary-operator> . 112)
            (<keyword> . 111) (pattern-list . 431) (pattern . 430)
            (<implies> . 429) (<lcbracket> . 428) (<symbol> . 104)
            (property-list-pattern . 427) (<var-singleton-sep> . 103)
            (<lsbracket> . 426) (<escaped-hash-word> . 425)
            (<lbracket> . 424) (<query> . 423) (pattern-sequence . 422)
            (details-pattern . 421) (<fragment-define-word> . 94)
            (:false . 91) (literal-pattern . 420)
            (simple-pattern . 419) (:otherwise . 418) (:true . 86)
            (:&key . 417))
           (414 (aux-rule . 538) (aux-rule-set . 537)
            (<lcbracket> . 415) (opt-aux-rule-sets . 536)
            (aux-rule-sets . 535) (<keyword> . 534))
           (413 (aux-rule . 416) (<lcbracket> . 415) (aux-rules . 414))
           (412 (<rbracket> . 413))
           (411 (operand . 70) (unary-operator . 69)
            (<fragment-function-word> . 67) (expression . 412)
            (:parsed-name . 65) (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (<not> . 43) (statement . 42)
            (<defining-word> . 41) (<list-open> . 39) (<keyword> . 220)
            (binary-operand-series . 219) (procedural-template . 34)
            (<symbol> . 33) (:generic . 32) (fragment-begin-word . 31)
            (:method . 27) (binary-operand . 218) (literal . 25)
            (<lbracket> . 23) (begin-clause . 21)
            (<details-begin-word> . 20) (anonymous-method . 17)
            (<fragment-define-word> . 16) (literal0 . 15)
            (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (:true . 2))
           (409 (detail-info . 410) (<lbracket> . 371))
           (406 (<generic-function-defining-word> . 192)
            (literal0 . 15) (<string> . 52)
            (<fragment-define-bindings-word> . 203)
            (property-set-item . 407) (<fragment-begin-word> . 189)
            (<symbol> . 167) (<expr-intermediate-word> . 169)
            (:parsed-literal . 54) (<simple-intermediate-word> . 157)
            (:parsed-name . 210)
            (<fragment-local-declaration-word> . 185) (:false . 11)
            (:parsed-expression . 231) (<details-begin-word> . 155)
            (<fragment-define-word> . 151)
            (<method-defining-word> . 145) (:true . 2)
            (<simple-begin-word> . 194) (<defining-word> . 181)
            (<expr-begin-word> . 149) (<vector-open> . 45)
            (<fragment-function-word> . 212) (<literal> . 50)
            (<details-intermediate-word> . 173)
            (<fragment-define-and-begin-word> . 206) (constant . 399)
            (<seal-word> . 144) (word . 398) (literal . 228)
            (<list-open> . 39) (<keyword> . 227)
            (<fragment-define-bindings-and-begin-word> . 202))
           (404 (<generic-function-defining-word> . 192)
            (literal0 . 15) (<string> . 52)
            (<fragment-define-bindings-word> . 203)
            (<fragment-begin-word> . 189) (<symbol> . 167)
            (property-set-item . 402) (<expr-intermediate-word> . 169)
            (:parsed-literal . 54) (<simple-intermediate-word> . 157)
            (:parsed-name . 210)
            (<fragment-local-declaration-word> . 185) (:false . 11)
            (:parsed-expression . 231) (<details-begin-word> . 155)
            (property-set-member . 405) (<fragment-define-word> . 151)
            (<method-defining-word> . 145) (:true . 2)
            (<simple-begin-word> . 194) (<defining-word> . 181)
            (<expr-begin-word> . 149) (<vector-open> . 45)
            (<fragment-function-word> . 212) (<literal> . 50)
            (<details-intermediate-word> . 173)
            (<fragment-define-and-begin-word> . 206) (constant . 399)
            (<seal-word> . 144) (word . 398) (literal . 228)
            (<list-open> . 39) (<keyword> . 227)
            (<fragment-define-bindings-and-begin-word> . 202))
           (403 (<var-sep> . 404)) (402 (<implies> . 406))
           (401 (<rcbracket> . 408))
           (395 (<generic-function-defining-word> . 192)
            (literal0 . 15) (<string> . 52)
            (<fragment-define-bindings-word> . 203)
            (property-set . 403) (<fragment-begin-word> . 189)
            (<symbol> . 167) (property-set-item . 402)
            (<expr-intermediate-word> . 169) (:parsed-literal . 54)
            (<simple-intermediate-word> . 157) (:parsed-name . 210)
            (<fragment-local-declaration-word> . 185) (:false . 11)
            (opt-property-set . 401) (:parsed-expression . 231)
            (<details-begin-word> . 155) (property-set-member . 400)
            (<fragment-define-word> . 151)
            (<method-defining-word> . 145) (:true . 2)
            (<simple-begin-word> . 194) (<defining-word> . 181)
            (<expr-begin-word> . 149) (<vector-open> . 45)
            (<fragment-function-word> . 212) (<literal> . 50)
            (<details-intermediate-word> . 173)
            (<fragment-define-and-begin-word> . 206) (constant . 399)
            (<seal-word> . 144) (word . 398) (literal . 228)
            (<list-open> . 39) (<keyword> . 227)
            (<fragment-define-bindings-and-begin-word> . 202))
           (393 (operand . 70) (unary-operator . 69)
            (<fragment-function-word> . 67) (expression . 397)
            (:parsed-name . 65) (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (value . 396) (<not> . 43)
            (statement . 42) (<defining-word> . 41) (<list-open> . 39)
            (<keyword> . 220) (binary-operand-series . 219)
            (<lcbracket> . 395) (procedural-template . 34)
            (<symbol> . 33) (:generic . 32) (fragment-begin-word . 31)
            (:method . 27) (binary-operand . 218) (literal . 25)
            (<lbracket> . 23) (begin-clause . 21)
            (<details-begin-word> . 20) (anonymous-method . 17)
            (<fragment-define-word> . 16) (literal0 . 15)
            (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (:true . 2))
           (391 (:parsed-property-list . 394) (<keyword> . 393))
           (389 (property . 392) (<var-sep> . 391))
           (388 (typed-variable . 385)
            (<generic-function-defining-word> . 49) (<ellipsis> . 57)
            (:generic . 32) (<fragment-define-bindings-word> . 58)
            (<symbol> . 33) (generic-function-defining-word . 48)
            (detail . 545) (:parsed-name . 65) (the-variable-name . 5)
            (variable . 382) (<fragment-define-word> . 16)
            (<method-defining-word> . 4) (<defining-word> . 41)
            (<expr-begin-word> . 544) (:parsed-property-list . 394)
            (:parsed-variable . 13) (untyped-variable . 378)
            (<lbracket> . 377) (variable-name . 376) (<keyword> . 393))
           (383 (property . 390) (the-property-list . 389)
            (<var-sep> . 388) (property-list . 387)
            (opt-property-list . 386))
           (382 (<symbol> . 489) (<binds> . 547) (:parsed-name . 488)
            (opt-detail-clauses . 546) (detail-clause . 486)
            (the-detail-clauses . 485) (detail-clauses . 484)
            (detail-clause-word . 483))
           (379 (<rbracket> . 566))
           (377 (typed-variable . 385)
            (<generic-function-defining-word> . 49) (<ellipsis> . 57)
            (variables . 553) (:generic . 32)
            (<fragment-define-bindings-word> . 58) (<symbol> . 33)
            (generic-function-defining-word . 48) (:parsed-name . 65)
            (the-variable-name . 5) (:&rest . 552) (variable . 551)
            (<fragment-define-word> . 16) (<method-defining-word> . 4)
            (<defining-word> . 41) (:parsed-variable . 13)
            (untyped-variable . 378) (variable-name . 376))
           (376 (<var-type-sep> . 563) (type-designator . 562))
           (375 (operand . 70) (unary-operator . 69)
            (<fragment-function-word> . 67) (expression . 397)
            (:parsed-name . 65) (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (value . 567) (<not> . 43)
            (statement . 42) (<defining-word> . 41) (<list-open> . 39)
            (<keyword> . 220) (binary-operand-series . 219)
            (<lcbracket> . 395) (procedural-template . 34)
            (<symbol> . 33) (:generic . 32) (fragment-begin-word . 31)
            (:method . 27) (binary-operand . 218) (literal . 25)
            (<lbracket> . 23) (begin-clause . 21)
            (<details-begin-word> . 20) (anonymous-method . 17)
            (<fragment-define-word> . 16) (literal0 . 15)
            (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (:true . 2))
           (372 (opt-<statement-sep> . 374) (<statement-sep> . 373))
           (371 (typed-variable . 385)
            (<generic-function-defining-word> . 49) (<ellipsis> . 57)
            (:generic . 32) (<fragment-define-bindings-word> . 58)
            (<symbol> . 33) (generic-function-defining-word . 48)
            (:parsed-name . 65) (detail . 384) (details . 383)
            (the-variable-name . 5) (variable . 382)
            (<fragment-define-word> . 16) (<method-defining-word> . 4)
            (property-list-no-comma . 381) (<defining-word> . 41)
            (detail-list . 380) (opt-detail-list . 379)
            (:parsed-variable . 13) (untyped-variable . 378)
            (<lbracket> . 377) (variable-name . 376) (<keyword> . 375))
           (370 (detail-info . 372) (<lbracket> . 371))
           (369 (operand . 70) (unary-operator . 69)
            (<fragment-function-word> . 67) (expression . 570)
            (:parsed-name . 65) (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (<not> . 43) (statement . 42)
            (<defining-word> . 41) (<list-open> . 39) (<keyword> . 220)
            (binary-operand-series . 219) (procedural-template . 34)
            (<symbol> . 33) (:generic . 32) (fragment-begin-word . 31)
            (:method . 27) (binary-operand . 218) (literal . 25)
            (<lbracket> . 23) (begin-clause . 21)
            (<details-begin-word> . 20) (anonymous-method . 17)
            (<fragment-define-word> . 16) (literal0 . 15)
            (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (:true . 2))
           (368 (end-clause . 579) (:end . 578))
           (366 (end-clause . 586) (:end . 578))
           (365 (operand . 70) (unary-operator . 69)
            (:parsed-local-declaration . 68)
            (<fragment-function-word> . 67) (expression . 289)
            (local-declaration . 288) (:parsed-name . 65)
            (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (intermediate-case-tail . 592) (<syntax-open> . 53)
            (<string> . 52) (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (final-case-body . 591) (<vector-open> . 45)
            (<fragment-local-declaration-word> . 44) (<not> . 43)
            (statement . 42) (<defining-word> . 41) (<list-open> . 39)
            (<keyword> . 220) (binary-operand-series . 219)
            (<statement-sep> . 590) (defining-form . 281)
            (procedural-template . 34) (<symbol> . 33) (:generic . 32)
            (fragment-begin-word . 31) (:define . 30)
            (constituents . 589) (:local . 28) (binary-operand . 218)
            (:method . 27) (seal-word . 24) (literal . 25)
            (<lbracket> . 23) (:parsed-defining-form . 22)
            (begin-clause . 21) (<details-begin-word> . 20) (:let . 18)
            (body . 588) (opt-body . 587) (anonymous-method . 17)
            (literal0 . 15) (<fragment-define-word> . 16)
            (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (constituent . 276)
            (<seal-word> . 3) (:true . 2))
           (363 (<var-sep> . 575) (<implies> . 594))
           (362 (operand . 70) (unary-operator . 69)
            (:parsed-local-declaration . 68)
            (<fragment-function-word> . 67) (expression . 289)
            (local-declaration . 288) (:parsed-name . 65)
            (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (final-case-body . 597) (<vector-open> . 45)
            (<fragment-local-declaration-word> . 44) (<not> . 43)
            (statement . 42) (<defining-word> . 41) (<list-open> . 39)
            (<keyword> . 220) (binary-operand-series . 219)
            (<statement-sep> . 596) (defining-form . 281)
            (procedural-template . 34) (<symbol> . 33) (:generic . 32)
            (fragment-begin-word . 31) (:define . 30)
            (constituents . 595) (:local . 28) (binary-operand . 218)
            (:method . 27) (literal . 25) (seal-word . 24)
            (<lbracket> . 23) (:parsed-defining-form . 22)
            (begin-clause . 21) (<details-begin-word> . 20) (:let . 18)
            (body . 588) (opt-body . 587) (anonymous-method . 17)
            (literal0 . 15) (<fragment-define-word> . 16)
            (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (<seal-word> . 3)
            (constituent . 276) (:true . 2))
           (360 (opt-<implies> . 600) (<implies> . 599))
           (358 (<rbracket> . 359))
           (356 (<fragment-begin-word> . 47)
            (fragment-begin-word . 314) (opt-method . 357)
            (<fragment-define-and-begin-word> . 62)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:method . 311))
           (355 (:end . 356))
           (353 (operand . 70) (unary-operator . 69)
            (<fragment-function-word> . 67) (expression . 354)
            (:parsed-name . 65) (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (<not> . 43) (statement . 42)
            (<defining-word> . 41) (<list-open> . 39) (<keyword> . 220)
            (binary-operand-series . 219) (procedural-template . 34)
            (<symbol> . 33) (:generic . 32) (fragment-begin-word . 31)
            (:method . 27) (binary-operand . 218) (literal . 25)
            (<lbracket> . 23) (begin-clause . 21)
            (<details-begin-word> . 20) (anonymous-method . 17)
            (<fragment-define-word> . 16) (literal0 . 15)
            (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (:true . 2))
           (348 (:&all-keys . 350))
           (347 (<binds> . 353) (opt-default . 352) (default . 351))
           (346 (<binds> . 353) (opt-default . 647) (default . 351))
           (345 (<var-sep> . 648)) (344 (<var-type-sep> . 651))
           (343 (<generic-function-defining-word> . 49)
            (<ellipsis> . 57) (<var-type-sep> . 654) (:generic . 32)
            (<fragment-define-bindings-word> . 58) (<symbol> . 33)
            (generic-function-defining-word . 48) (:parsed-name . 65)
            (the-variable-name . 5) (<fragment-define-word> . 16)
            (<method-defining-word> . 4) (<defining-word> . 41)
            (:parsed-variable . 13) (variable-name . 653))
           (340 (<generic-function-defining-word> . 49)
            (<ellipsis> . 57) (:generic . 32)
            (<fragment-define-bindings-word> . 58) (<symbol> . 33)
            (:&key . 338) (generic-function-defining-word . 48)
            (:parsed-name . 65) (the-variable-name . 5) (:&rest . 336)
            (<fragment-define-word> . 16) (<method-defining-word> . 4)
            (positional-parameter . 342) (<defining-word> . 41)
            (:&next . 333) (rest-parameters . 332) (:&all-keys . 331)
            (next-parameters . 341) (:parsed-variable . 13)
            (rest-parameter . 329) (variable-name . 328)
            (keyword-parameters . 327) (next-parameter . 326))
           (339 (<var-sep> . 340))
           (338 (<generic-function-defining-word> . 49)
            (<ellipsis> . 57) (:generic . 32) (keyword-parameter . 349)
            (<fragment-define-bindings-word> . 58) (<symbol> . 33)
            (generic-function-defining-word . 48) (:parsed-name . 65)
            (<var-sep> . 348) (the-variable-name . 5)
            (<fragment-define-word> . 16) (<method-defining-word> . 4)
            (typed-keyword-variable . 347) (<defining-word> . 41)
            (untyped-keyword-variable . 346)
            (keyword-parameter-list . 345) (:parsed-variable . 13)
            (variable-name . 344) (<keyword> . 343))
           (336 (<generic-function-defining-word> . 49)
            (typed-variable . 385) (<ellipsis> . 57) (:generic . 32)
            (<fragment-define-bindings-word> . 58) (<symbol> . 33)
            (generic-function-defining-word . 48) (:parsed-name . 65)
            (the-variable-name . 5) (variable . 658)
            (<fragment-define-word> . 16) (<method-defining-word> . 4)
            (<defining-word> . 41) (:parsed-variable . 13)
            (untyped-variable . 378) (variable-name . 376))
           (334 (<rbracket> . 668))
           (333 (<generic-function-defining-word> . 49)
            (<ellipsis> . 57) (:generic . 32)
            (<fragment-define-bindings-word> . 58) (<symbol> . 33)
            (generic-function-defining-word . 48) (:parsed-name . 65)
            (the-variable-name . 5) (<fragment-define-word> . 16)
            (<method-defining-word> . 4) (<defining-word> . 41)
            (:parsed-variable . 13) (variable-name . 659))
           (329 (<var-sep> . 660))
           (328 (<var-type-sep> . 663) (<var-singleton-sep> . 662))
           (326 (<var-sep> . 666))
           (323 (<generic-function-defining-word> . 49)
            (<ellipsis> . 57) (:generic . 32)
            (<fragment-define-bindings-word> . 58) (<symbol> . 33)
            (generic-function-defining-word . 48) (:parsed-name . 65)
            (the-variable-name . 5) (<fragment-define-word> . 16)
            (<method-defining-word> . 4) (<defining-word> . 41)
            (:parsed-variable . 13) (variable-name . 325)
            (opt-variable-name . 324))
           (322 (<fragment-begin-word> . 47)
            (fragment-begin-word . 314) (opt-method . 323)
            (<fragment-define-and-begin-word> . 62)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:method . 311))
           (321 (:end . 322))
           (320 (<generic-function-defining-word> . 49)
            (<ellipsis> . 57) (positional-parameters . 339)
            (:generic . 32) (<fragment-define-bindings-word> . 58)
            (<symbol> . 33) (generic-function-defining-word . 48)
            (:&key . 338) (:parsed-name . 65) (parameters . 337)
            (the-variable-name . 5) (:&rest . 336)
            (<fragment-define-word> . 16) (<method-defining-word> . 4)
            (positional-parameter . 335) (<defining-word> . 41)
            (opt-parameters . 334) (:&next . 333)
            (rest-parameters . 332) (:&all-keys . 331)
            (next-parameters . 330) (:parsed-variable . 13)
            (rest-parameter . 329) (variable-name . 328)
            (keyword-parameters . 327) (next-parameter . 326))
           (318 (method-body . 321) (<lbracket> . 320))
           (316 (<fragment-begin-word> . 47) (local-method . 317)
            (fragment-begin-word . 314) (opt-method . 312)
            (<fragment-define-and-begin-word> . 62)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:method . 311))
           (315 (<var-sep> . 316))
           (312 (<generic-function-defining-word> . 49)
            (<ellipsis> . 57) (:generic . 32)
            (<fragment-define-bindings-word> . 58) (<symbol> . 33)
            (generic-function-defining-word . 48) (:parsed-name . 65)
            (named-method . 319) (the-variable-name . 5)
            (<fragment-define-word> . 16) (<method-defining-word> . 4)
            (<defining-word> . 41) (:parsed-variable . 13)
            (variable-name . 318))
           (309 (word-fragment . 140) (modified-constant . 139)
            (<query-query> . 138) (:parsed-local-declaration . 68)
            (<fragment-function-word> . 67) (local-declaration . 137)
            (opt-fragment-constituents . 310) (:parsed-name . 136)
            (<binds> . 135) (:&rest . 134) (<minus> . 133)
            (<fragment-define-and-begin-word> . 62)
            (function-macro-call . 132) (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 131) (<ellipsis> . 130)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 129) (:parsed-literal . 128)
            (<syntax-open> . 53) (<string> . 127) (fragment-list . 126)
            (fragment-constituent . 125) (:&next . 124)
            (<simple-begin-word> . 51) (<literal> . 123)
            (<fragment-begin-word> . 47) (:parsed-expression . 122)
            (<vector-open> . 121) (statement-or-method . 120)
            (<becomes> . 119) (<not> . 118)
            (<fragment-local-declaration-word> . 44) (statement . 117)
            (<defining-word> . 116) (<list-open> . 115)
            (implies-fragment . 114) (<var-type-sep> . 113)
            (<binary-operator> . 112) (<keyword> . 111)
            (:&all-keys . 110) (<implies> . 109)
            (simple-fragment . 108) (defining-form . 107)
            (<lcbracket> . 106) (procedural-template . 105)
            (<symbol> . 104) (fragment-begin-word . 31) (:define . 30)
            (<var-singleton-sep> . 103) (fragment-constituents . 304)
            (<dot> . 100) (:local . 28) (<lsbracket> . 99)
            (:method . 27) (seal-word . 24) (<lbracket> . 98)
            (:parsed-defining-form . 22) (begin-clause . 21)
            (<details-begin-word> . 20) (:let . 18)
            (fragment-sequence . 97) (<query> . 96)
            (anonymous-method . 95) (<fragment-define-word> . 94)
            (:macro-case . 14) (:parsed-variable . 92)
            (<expr-begin-word> . 12) (:false . 91)
            (opt-fragment-sequence . 90) (<query-equal> . 89)
            (:parsed-case-body . 88) (<seal-word> . 3)
            (:otherwise . 87) (:true . 86) (non-statement-etc . 85)
            (:&key . 84))
           (306 (<rcbracket> . 308))
           (305 (<rcbracket> . 307) (:end . 306))
           (298 (<rbracket> . 299))
           (297 (literal0 . 15) (<string> . 52) (:parsed-literal . 54)
            (:false . 11) (:parsed-expression . 231) (:true . 2)
            (<vector-open> . 45) (<literal> . 50) (constant . 298)
            (<list-open> . 39) (literal . 228) (<keyword> . 227))
           (296 (<var-sep> . 233) (<dot> . 297))
           (295 (<rbracket> . 300)) (291 (<rsbracket> . 292))
           (285 (<generic-function-defining-word> . 49)
            (<ellipsis> . 57) (:generic . 32)
            (<fragment-define-bindings-word> . 58) (<symbol> . 33)
            (generic-function-defining-word . 48) (:parsed-name . 65)
            (the-variable-name . 5) (<fragment-define-word> . 16)
            (<method-defining-word> . 4) (<defining-word> . 41)
            (:parsed-variable . 13) (variable-name . 325)
            (opt-variable-name . 370))
           (284 (<expr-intermediate-word> . 282)
            (<simple-intermediate-word> . 278)
            (intermediate-clause . 643)
            (<details-intermediate-word> . 285))
           (283 (:end . 689))
           (282 (<generic-function-defining-word> . 49)
            (<ellipsis> . 57) (:generic . 32)
            (<fragment-define-bindings-word> . 58) (<symbol> . 33)
            (generic-function-defining-word . 48) (:parsed-name . 65)
            (the-variable-name . 5) (<fragment-define-word> . 16)
            (<method-defining-word> . 4) (<defining-word> . 41)
            (:parsed-variable . 13) (variable-name . 325)
            (opt-variable-name . 637))
           (280 (operand . 70) (unary-operator . 69)
            (:parsed-local-declaration . 68)
            (<fragment-function-word> . 67) (expression . 289)
            (local-declaration . 288) (:parsed-name . 65)
            (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45)
            (<fragment-local-declaration-word> . 44) (<not> . 43)
            (statement . 42) (<defining-word> . 41) (<list-open> . 39)
            (<keyword> . 220) (binary-operand-series . 219)
            (defining-form . 281) (procedural-template . 34)
            (<symbol> . 33) (:generic . 32) (fragment-begin-word . 31)
            (:define . 30) (constituents . 279) (:local . 28)
            (binary-operand . 218) (:method . 27) (seal-word . 24)
            (literal . 25) (<lbracket> . 23)
            (:parsed-defining-form . 22) (begin-clause . 21)
            (<details-begin-word> . 20) (:let . 18) (body . 588)
            (opt-body . 635) (anonymous-method . 17) (literal0 . 15)
            (<fragment-define-word> . 16) (:macro-case . 14)
            (:parsed-variable . 13) (<expr-begin-word> . 12)
            (:false . 11) (variable-name . 9) (leaf . 8)
            (the-variable-name . 5) (<method-defining-word> . 4)
            (constituent . 276) (<seal-word> . 3) (:true . 2))
           (279 (opt-<statement-sep> . 602) (<statement-sep> . 636))
           (277 (<expr-intermediate-word> . 282)
            (<simple-intermediate-word> . 278)
            (the-intermediate-clauses . 287)
            (intermediate-clause . 280) (intermediate-clauses . 646)
            (<details-intermediate-word> . 285)
            (opt-intermediate-clauses . 645))
           (275 (operand . 70) (unary-operator . 69)
            (:parsed-local-declaration . 68)
            (<fragment-function-word> . 67) (expression . 289)
            (local-declaration . 288) (:parsed-name . 65)
            (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45)
            (<fragment-local-declaration-word> . 44) (<not> . 43)
            (statement . 42) (<defining-word> . 41) (<list-open> . 39)
            (the-intermediate-clauses . 287) (clause-body . 286)
            (<keyword> . 220) (binary-operand-series . 219)
            (<details-intermediate-word> . 285)
            (intermediate-clauses . 284) (opt-clause-body . 283)
            (<expr-intermediate-word> . 282) (defining-form . 281)
            (procedural-template . 34) (<symbol> . 33) (:generic . 32)
            (fragment-begin-word . 31) (:define . 30)
            (intermediate-clause . 280) (constituents . 279)
            (:local . 28) (binary-operand . 218) (:method . 27)
            (<simple-intermediate-word> . 278) (seal-word . 24)
            (literal . 25) (<lbracket> . 23)
            (:parsed-defining-form . 22) (begin-clause . 21)
            (<details-begin-word> . 20) (:let . 18) (body . 277)
            (anonymous-method . 17) (literal0 . 15)
            (<fragment-define-word> . 16) (:macro-case . 14)
            (:parsed-variable . 13) (<expr-begin-word> . 12)
            (:false . 11) (variable-name . 9) (leaf . 8)
            (the-variable-name . 5) (<method-defining-word> . 4)
            (constituent . 276) (<seal-word> . 3) (:true . 2))
           (274 (<generic-function-defining-word> . 49)
            (<ellipsis> . 57) (:generic . 32)
            (<fragment-define-bindings-word> . 58) (<symbol> . 33)
            (generic-function-defining-word . 48) (:parsed-name . 65)
            (the-variable-name . 5) (name-list . 694)
            (<fragment-define-word> . 16) (<method-defining-word> . 4)
            (<defining-word> . 41) (:parsed-variable . 13)
            (variable-name . 693))
           (272 (<generic-function-defining-word> . 49)
            (<ellipsis> . 57) (:generic . 32)
            (<fragment-define-bindings-word> . 58) (<symbol> . 33)
            (generic-function-defining-word . 48) (names . 275)
            (:parsed-name . 65) (the-variable-name . 5)
            (<fragment-define-word> . 16) (<method-defining-word> . 4)
            (<defining-word> . 41) (:parsed-variable . 13)
            (<lbracket> . 274) (variable-name . 273))
           (270 (generic-function-definition . 699)
            (<generic-function-defining-word> . 49) (<ellipsis> . 57)
            (:generic . 32) (<fragment-define-bindings-word> . 58)
            (<symbol> . 33) (generic-function-defining-word . 48)
            (:parsed-name . 65) (the-variable-name . 5)
            (<fragment-define-word> . 16) (<method-defining-word> . 4)
            (<defining-word> . 41) (:parsed-variable . 13)
            (variable-name . 698))
           (269 (word-fragment . 140) (modified-constant . 139)
            (<query-query> . 138) (:parsed-local-declaration . 68)
            (<fragment-function-word> . 67) (local-declaration . 137)
            (:parsed-name . 136) (<binds> . 135) (:&rest . 134)
            (<minus> . 133) (<fragment-define-and-begin-word> . 62)
            (function-macro-call . 132) (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 131) (<ellipsis> . 130)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 129) (:parsed-literal . 128)
            (<syntax-open> . 53) (<string> . 127) (fragment-list . 126)
            (fragment-constituent . 125) (:&next . 124)
            (<simple-begin-word> . 51) (<literal> . 123)
            (<fragment-begin-word> . 47) (:parsed-expression . 122)
            (<vector-open> . 121) (statement-or-method . 120)
            (<becomes> . 119) (<not> . 118)
            (<fragment-local-declaration-word> . 44) (statement . 117)
            (<defining-word> . 116) (<list-open> . 115)
            (implies-fragment . 114) (<var-type-sep> . 113)
            (<binary-operator> . 112) (<keyword> . 111)
            (:&all-keys . 110) (<implies> . 109)
            (simple-fragment . 108) (defining-form . 107)
            (<lcbracket> . 106) (procedural-template . 105)
            (<symbol> . 104) (fragment-begin-word . 31) (:define . 30)
            (<var-singleton-sep> . 103) (fragment-constituents . 102)
            (opt-fragment . 712) (<dot> . 100) (:local . 28)
            (<lsbracket> . 99) (:method . 27) (seal-word . 24)
            (<lbracket> . 98) (:parsed-defining-form . 22)
            (begin-clause . 21) (<details-begin-word> . 20) (:let . 18)
            (fragment-sequence . 97) (<query> . 96)
            (anonymous-method . 95) (<fragment-define-word> . 94)
            (:macro-case . 14) (fragment . 93) (:parsed-variable . 92)
            (<expr-begin-word> . 12) (:false . 91)
            (opt-fragment-sequence . 90) (<query-equal> . 89)
            (:parsed-case-body . 88) (<seal-word> . 3)
            (:otherwise . 87) (:true . 86) (non-statement-etc . 85)
            (:&key . 84))
           (265 (<generic-function-defining-word> . 49)
            (<ellipsis> . 57) (:generic . 32)
            (<fragment-define-bindings-word> . 58)
            (method-definition . 723) (<symbol> . 33)
            (generic-function-defining-word . 48) (:parsed-name . 65)
            (the-variable-name . 5) (<fragment-define-word> . 16)
            (<method-defining-word> . 4) (<defining-word> . 41)
            (:parsed-variable . 13) (variable-name . 722))
           (264 (<generic-function-defining-word> . 49)
            (typed-variable . 385) (<ellipsis> . 57) (:generic . 32)
            (variables . 616) (<fragment-define-bindings-word> . 58)
            (<symbol> . 33) (generic-function-defining-word . 48)
            (:parsed-name . 65) (bindings . 730)
            (the-variable-name . 5) (:&rest . 552) (variable . 551)
            (<fragment-define-word> . 16) (<method-defining-word> . 4)
            (<defining-word> . 41) (definition . 729)
            (:parsed-variable . 13) (untyped-variable . 378)
            (<lbracket> . 614) (variable-name . 728))
           (263 (<generic-function-defining-word> . 192)
            (<fragment-define-bindings-word> . 203)
            (<fragment-begin-word> . 189) (<symbol> . 167)
            (<expr-intermediate-word> . 169)
            (<simple-intermediate-word> . 157) (:parsed-name . 210)
            (<fragment-local-declaration-word> . 185)
            (<details-begin-word> . 155) (<fragment-define-word> . 151)
            (<method-defining-word> . 145) (<simple-begin-word> . 194)
            (<defining-word> . 181) (macro-definition . 766)
            (<expr-begin-word> . 149) (<fragment-function-word> . 212)
            (<details-intermediate-word> . 173)
            (<fragment-define-and-begin-word> . 206)
            (<seal-word> . 144) (word . 765)
            (<fragment-define-bindings-and-begin-word> . 202))
           (260 (word-fragment . 140) (modified-constant . 139)
            (<query-query> . 138) (:parsed-local-declaration . 68)
            (<fragment-function-word> . 67) (local-declaration . 137)
            (:parsed-name . 136) (<binds> . 135) (:&rest . 134)
            (<minus> . 133) (<fragment-define-and-begin-word> . 62)
            (function-macro-call . 132) (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 131) (<ellipsis> . 130)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 129) (:parsed-literal . 128)
            (<syntax-open> . 53) (<string> . 127) (fragment-list . 126)
            (fragment-constituent . 832)
            (opt-fragment-constituent . 831) (:&next . 124)
            (<simple-begin-word> . 51) (<literal> . 123)
            (<fragment-begin-word> . 47) (:parsed-expression . 122)
            (<vector-open> . 121) (statement-or-method . 120)
            (<becomes> . 119) (<not> . 118)
            (<fragment-local-declaration-word> . 44) (statement . 117)
            (<defining-word> . 116) (<list-open> . 115)
            (implies-fragment . 114) (<var-type-sep> . 113)
            (<binary-operator> . 112) (<keyword> . 111)
            (:&all-keys . 110) (<implies> . 109)
            (simple-fragment . 108) (defining-form . 107)
            (<lcbracket> . 106) (procedural-template . 105)
            (<symbol> . 104) (fragment-begin-word . 31) (:define . 30)
            (<var-singleton-sep> . 103) (<dot> . 100) (:local . 28)
            (<lsbracket> . 99) (:method . 27) (seal-word . 24)
            (<lbracket> . 98) (:parsed-defining-form . 22)
            (begin-clause . 21) (<details-begin-word> . 20) (:let . 18)
            (fragment-sequence . 97) (<query> . 96)
            (anonymous-method . 95) (<fragment-define-word> . 94)
            (:macro-case . 14) (:parsed-variable . 92)
            (<expr-begin-word> . 12) (:false . 91)
            (opt-fragment-sequence . 90) (<query-equal> . 89)
            (:parsed-case-body . 88) (<seal-word> . 3)
            (:otherwise . 87) (:true . 86) (non-statement-etc . 85)
            (:&key . 84))
           (255 (<generic-function-defining-word> . 49) (:generic . 32)
            (<clauses-defining-word> . 272)
            (<fragment-define-bindings-word> . 271)
            (generic-function-defining-word . 270)
            (fragment-define-word . 269) (<fragment-define-word> . 268)
            (<method-defining-word> . 267) (:macro . 266)
            (method-defining-word . 265) (<defining-word> . 264)
            (macro-defining-word . 263)
            (<fragment-define-and-begin-word> . 262)
            (<macro-defining-word> . 261)
            (fragment-define-bindings-word . 260)
            (<fragment-define-bindings-and-begin-word> . 259)
            (:method . 258))
           (254 (<symbol> . 257) (:parsed-name . 256) (modifier . 612))
           (249 (end-clause . 833) (:end . 578))
           (247 (operand . 70) (unary-operator . 69)
            (<fragment-function-word> . 67) (:parsed-name . 65)
            (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (<not> . 43) (statement . 42)
            (<defining-word> . 41) (<list-open> . 39) (<keyword> . 220)
            (procedural-template . 34) (<symbol> . 33) (:generic . 32)
            (fragment-begin-word . 31) (:method . 27)
            (binary-operand . 248) (literal . 25) (<lbracket> . 23)
            (begin-clause . 21) (<details-begin-word> . 20)
            (anonymous-method . 17) (<fragment-define-word> . 16)
            (literal0 . 15) (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (:true . 2))
           (238 (<rbracket> . 239))
           (237 (literal0 . 15) (<string> . 52) (:parsed-literal . 54)
            (:false . 11) (:parsed-expression . 231) (:true . 2)
            (<vector-open> . 45) (<literal> . 50) (constant . 238)
            (<list-open> . 39) (literal . 228) (<keyword> . 227))
           (236 (<var-sep> . 233) (<dot> . 237))
           (235 (<rbracket> . 240))
           (233 (literal0 . 15) (<string> . 52) (:parsed-literal . 54)
            (:false . 11) (:parsed-expression . 231) (:true . 2)
            (<vector-open> . 45) (<literal> . 50) (constant . 234)
            (<list-open> . 39) (literal . 228) (<keyword> . 227))
           (230 (<var-sep> . 233)) (226 (<rsbracket> . 241))
           (224 (<ellipsis> . 225))
           (223 (<var-singleton-sep> . 164) (<binds> . 209)
            (<binary-operator> . 177) (<var-sep> . 182)
            (separator . 224) (<statement-sep> . 174) (<minus> . 205)
            (<becomes> . 186))
           (222 (<rbracket> . 223))
           (219 (binary-operator . 247) (<var-singleton-sep> . 246)
            (<binds> . 245) (<binary-operator> . 244) (<minus> . 243)
            (<becomes> . 242))
           (215 (<ellipsis> . 217))
           (214 (<ellipsis> . 216) (<var-singleton-sep> . 164)
            (<binds> . 209) (<binary-operator> . 177) (<var-sep> . 182)
            (separator . 215) (<statement-sep> . 174) (<minus> . 205)
            (<becomes> . 186))
           (213 (operand . 70) (unary-operator . 69)
            (<fragment-function-word> . 67) (expression . 222)
            (:parsed-name . 65) (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (<not> . 43) (statement . 42)
            (<defining-word> . 41) (<list-open> . 39) (<keyword> . 220)
            (binary-operand-series . 219) (procedural-template . 34)
            (<symbol> . 33) (:generic . 32) (fragment-begin-word . 31)
            (:method . 27) (binary-operand . 218) (literal . 25)
            (<lbracket> . 23) (begin-clause . 21)
            (<details-begin-word> . 20) (anonymous-method . 17)
            (<fragment-define-word> . 16) (literal0 . 15)
            (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (:true . 2))
           (211 (<generic-function-defining-word> . 192)
            (<fragment-define-bindings-word> . 203)
            (<fragment-begin-word> . 189) (<symbol> . 167)
            (<expr-intermediate-word> . 169)
            (<simple-intermediate-word> . 157) (:parsed-name . 210)
            (<fragment-local-declaration-word> . 185)
            (<details-begin-word> . 155) (<fragment-define-word> . 151)
            (<method-defining-word> . 145) (<simple-begin-word> . 194)
            (<defining-word> . 181) (<expr-begin-word> . 149)
            (<fragment-function-word> . 212)
            (<details-intermediate-word> . 173)
            (<fragment-define-and-begin-word> . 206) (word . 214)
            (<seal-word> . 144) (<lbracket> . 213)
            (<fragment-define-bindings-and-begin-word> . 202))
           (204 (<rcbracket> . 834)) (870 (:end . 871))
           (869 (:end . 872)) (196 (<splice> . 459))
           (195 (<fragment-function-word> . 212) (<query-query> . 211)
            (:parsed-name . 210) (<binds> . 209) (:&rest . 208)
            (<unary-operator> . 207)
            (<fragment-define-and-begin-word> . 206) (<minus> . 205)
            (<fragment-define-bindings-word> . 203)
            (<fragment-define-bindings-and-begin-word> . 202)
            (<ellipsis> . 201) (:parsed-body . 200)
            (:parsed-literal . 199) (:end . 198) (:macro . 197)
            (<string> . 196) (<syntax-open> . 195)
            (<simple-begin-word> . 194) (:&next . 193)
            (<generic-function-defining-word> . 192) (<literal> . 191)
            (spliceable-replacement . 190)
            (<fragment-begin-word> . 189) (:parsed-expression . 188)
            (<vector-open> . 187) (<becomes> . 186)
            (<fragment-local-declaration-word> . 185) (<not> . 184)
            (replacement . 468) (<var-sep> . 182)
            (<defining-word> . 181) (<list-open> . 179)
            (<var-type-sep> . 178) (<binary-operator> . 177)
            (:handler . 176) (<keyword> . 175) (<statement-sep> . 174)
            (<details-intermediate-word> . 173) (:&all-keys . 172)
            (word . 171) (<implies> . 170)
            (<expr-intermediate-word> . 169) (<lcbracket> . 168)
            (<symbol> . 167) (:generic . 166) (:define . 165)
            (<var-singleton-sep> . 164) (separator . 163) (<dot> . 162)
            (:local . 161) (<lsbracket> . 160)
            (replacement-element . 159) (:method . 158)
            (<simple-intermediate-word> . 157) (<lbracket> . 156)
            (<details-begin-word> . 155) (<escaped-substitution> . 154)
            (:let . 153) (<query> . 152) (<fragment-define-word> . 151)
            (:parsed-variable . 150) (<expr-begin-word> . 149)
            (:false . 148) (<query-equal> . 147)
            (:parsed-case-body . 146) (<method-defining-word> . 145)
            (<seal-word> . 144) (:otherwise . 143)
            (opt-replacement . 467) (:true . 142) (:&key . 141))
           (866 (:end . 867)) (864 (:end . 865)) (190 (<splice> . 469))
           (862 (:end . 863)) (860 (:end . 861))
           (187 (<fragment-function-word> . 212) (<query-query> . 211)
            (:parsed-name . 210) (<binds> . 209) (:&rest . 208)
            (<unary-operator> . 207)
            (<fragment-define-and-begin-word> . 206) (<minus> . 205)
            (<fragment-define-bindings-word> . 203)
            (<fragment-define-bindings-and-begin-word> . 202)
            (<ellipsis> . 201) (:parsed-body . 200)
            (:parsed-literal . 199) (:end . 198) (:macro . 197)
            (<string> . 196) (<syntax-open> . 195)
            (<simple-begin-word> . 194) (:&next . 193)
            (<generic-function-defining-word> . 192) (<literal> . 191)
            (spliceable-replacement . 190)
            (<fragment-begin-word> . 189) (:parsed-expression . 188)
            (<vector-open> . 187) (<becomes> . 186)
            (<fragment-local-declaration-word> . 185) (<not> . 184)
            (replacement . 468) (<var-sep> . 182)
            (<defining-word> . 181) (<list-open> . 179)
            (<var-type-sep> . 178) (<binary-operator> . 177)
            (:handler . 176) (<keyword> . 175) (<statement-sep> . 174)
            (<details-intermediate-word> . 173) (:&all-keys . 172)
            (word . 171) (<implies> . 170)
            (<expr-intermediate-word> . 169) (<lcbracket> . 168)
            (<symbol> . 167) (:generic . 166) (:define . 165)
            (<var-singleton-sep> . 164) (separator . 163) (<dot> . 162)
            (:local . 161) (<lsbracket> . 160)
            (replacement-element . 159) (:method . 158)
            (<simple-intermediate-word> . 157) (<lbracket> . 156)
            (<details-begin-word> . 155) (<escaped-substitution> . 154)
            (:let . 153) (<query> . 152) (<fragment-define-word> . 151)
            (:parsed-variable . 150) (<expr-begin-word> . 149)
            (:false . 148) (<query-equal> . 147)
            (:parsed-case-body . 146) (<method-defining-word> . 145)
            (<seal-word> . 144) (:otherwise . 143)
            (opt-replacement . 471) (:true . 142) (:&key . 141))
           (857 (:end . 858))
           (183 (<fragment-function-word> . 212) (<query-query> . 211)
            (:parsed-name . 210) (<binds> . 209) (:&rest . 208)
            (<unary-operator> . 207)
            (<fragment-define-and-begin-word> . 206) (<minus> . 205)
            (<fragment-define-bindings-word> . 203)
            (<fragment-define-bindings-and-begin-word> . 202)
            (<ellipsis> . 201) (:parsed-body . 200)
            (:parsed-literal . 199) (:end . 198) (:macro . 197)
            (<string> . 196) (<syntax-open> . 195)
            (<simple-begin-word> . 194) (:&next . 193)
            (<generic-function-defining-word> . 192) (<literal> . 191)
            (spliceable-replacement . 190)
            (<fragment-begin-word> . 189) (:parsed-expression . 188)
            (<vector-open> . 187) (<becomes> . 186)
            (<fragment-local-declaration-word> . 185) (<not> . 184)
            (<var-sep> . 182) (<defining-word> . 181)
            (<list-open> . 179) (<var-type-sep> . 178)
            (<binary-operator> . 177) (:handler . 176)
            (<keyword> . 175) (<statement-sep> . 174)
            (<details-intermediate-word> . 173) (:&all-keys . 172)
            (word . 171) (<implies> . 170)
            (<expr-intermediate-word> . 169) (<lcbracket> . 168)
            (<symbol> . 167) (:generic . 166) (:define . 165)
            (<var-singleton-sep> . 164) (separator . 163) (<dot> . 162)
            (:local . 161) (<lsbracket> . 160)
            (replacement-element . 472) (:method . 158)
            (<simple-intermediate-word> . 157) (<lbracket> . 156)
            (<details-begin-word> . 155) (<escaped-substitution> . 154)
            (:let . 153) (<query> . 152) (<fragment-define-word> . 151)
            (:parsed-variable . 150) (<expr-begin-word> . 149)
            (:false . 148) (<query-equal> . 147)
            (:parsed-case-body . 146) (<method-defining-word> . 145)
            (<seal-word> . 144) (:otherwise . 143) (:true . 142)
            (:&key . 141))
           (853 (<statement-sep> . 855))
           (179 (<fragment-function-word> . 212) (<query-query> . 211)
            (:parsed-name . 210) (<binds> . 209) (:&rest . 208)
            (<unary-operator> . 207)
            (<fragment-define-and-begin-word> . 206) (<minus> . 205)
            (<fragment-define-bindings-word> . 203)
            (<fragment-define-bindings-and-begin-word> . 202)
            (<ellipsis> . 201) (:parsed-body . 200)
            (:parsed-literal . 199) (:end . 198) (:macro . 197)
            (<string> . 196) (<syntax-open> . 195)
            (<simple-begin-word> . 194) (:&next . 193)
            (<generic-function-defining-word> . 192) (<literal> . 191)
            (spliceable-replacement . 190)
            (<fragment-begin-word> . 189) (:parsed-expression . 188)
            (<vector-open> . 187) (<becomes> . 186)
            (<fragment-local-declaration-word> . 185) (<not> . 184)
            (replacement . 468) (<var-sep> . 182)
            (<defining-word> . 181) (<list-open> . 179)
            (<var-type-sep> . 178) (<binary-operator> . 177)
            (:handler . 176) (<keyword> . 175) (<statement-sep> . 174)
            (<details-intermediate-word> . 173) (:&all-keys . 172)
            (word . 171) (<implies> . 170)
            (<expr-intermediate-word> . 169) (<lcbracket> . 168)
            (<symbol> . 167) (:generic . 166) (:define . 165)
            (<var-singleton-sep> . 164) (separator . 163) (<dot> . 162)
            (:local . 161) (<lsbracket> . 160)
            (replacement-element . 159) (:method . 158)
            (<simple-intermediate-word> . 157) (<lbracket> . 156)
            (<details-begin-word> . 155) (<escaped-substitution> . 154)
            (:let . 153) (<query> . 152) (<fragment-define-word> . 151)
            (:parsed-variable . 150) (<expr-begin-word> . 149)
            (:false . 148) (<query-equal> . 147)
            (:parsed-case-body . 146) (<method-defining-word> . 145)
            (<seal-word> . 144) (:otherwise . 143)
            (opt-replacement . 473) (:true . 142) (:&key . 141))
           (851 (:end . 852))
           (848 (operand . 70) (unary-operator . 69)
            (:parsed-local-declaration . 68)
            (<fragment-function-word> . 67) (local-declaration . 847)
            (:parsed-name . 65) (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 61) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45)
            (<fragment-local-declaration-word> . 44) (<not> . 43)
            (statement . 42) (<defining-word> . 41) (<list-open> . 39)
            (keyless-binary-operand-series . 37) (defining-form . 846)
            (procedural-template . 34) (<symbol> . 33) (:generic . 32)
            (fragment-begin-word . 31) (:define . 30) (:local . 28)
            (:method . 27) (listener-constituents . 849) (literal . 25)
            (seal-word . 24) (<lbracket> . 23)
            (:parsed-defining-form . 22) (begin-clause . 21)
            (<details-begin-word> . 20) (:let . 18)
            (anonymous-method . 17) (<fragment-define-word> . 16)
            (literal0 . 15) (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (keyless-expression . 844)
            (the-variable-name . 5) (<method-defining-word> . 4)
            (<seal-word> . 3) (:true . 2))
           (847 (<statement-sep> . 848)) (845 (<statement-sep> . 850))
           (843 (operand . 70) (unary-operator . 69)
            (:parsed-local-declaration . 68)
            (<fragment-function-word> . 67) (local-declaration . 847)
            (:parsed-name . 65) (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 61) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45)
            (<fragment-local-declaration-word> . 44) (<not> . 43)
            (statement . 42) (<defining-word> . 41) (<list-open> . 39)
            (keyless-binary-operand-series . 37) (defining-form . 846)
            (procedural-template . 34) (<symbol> . 33) (:generic . 32)
            (fragment-begin-word . 31) (:define . 30) (:local . 28)
            (:method . 27) (listener-constituents . 845) (literal . 25)
            (seal-word . 24) (<lbracket> . 23)
            (:parsed-defining-form . 22) (begin-clause . 21)
            (<details-begin-word> . 20) (:let . 18)
            (anonymous-method . 17) (<fragment-define-word> . 16)
            (literal0 . 15) (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (keyless-expression . 844)
            (the-variable-name . 5) (<method-defining-word> . 4)
            (<seal-word> . 3) (:true . 2))
           (168 (<fragment-function-word> . 212) (<query-query> . 211)
            (:parsed-name . 210) (<binds> . 209) (:&rest . 208)
            (<unary-operator> . 207)
            (<fragment-define-and-begin-word> . 206) (<minus> . 205)
            (<fragment-define-bindings-word> . 203)
            (<fragment-define-bindings-and-begin-word> . 202)
            (<ellipsis> . 201) (:parsed-body . 200)
            (:parsed-literal . 199) (:end . 198) (:macro . 197)
            (<string> . 196) (<syntax-open> . 195)
            (<simple-begin-word> . 194) (:&next . 193)
            (<generic-function-defining-word> . 192) (<literal> . 191)
            (spliceable-replacement . 190)
            (<fragment-begin-word> . 189) (:parsed-expression . 188)
            (<vector-open> . 187) (<becomes> . 186)
            (<fragment-local-declaration-word> . 185) (<not> . 184)
            (replacement . 468) (<var-sep> . 182)
            (<defining-word> . 181) (<list-open> . 179)
            (<var-type-sep> . 178) (<binary-operator> . 177)
            (:handler . 176) (<keyword> . 175) (<statement-sep> . 174)
            (<details-intermediate-word> . 173) (:&all-keys . 172)
            (word . 171) (<implies> . 170)
            (<expr-intermediate-word> . 169) (<lcbracket> . 168)
            (<symbol> . 167) (:generic . 166) (:define . 165)
            (<var-singleton-sep> . 164) (separator . 163) (<dot> . 162)
            (:local . 161) (<lsbracket> . 160)
            (replacement-element . 159) (:method . 158)
            (<simple-intermediate-word> . 157) (<lbracket> . 156)
            (<details-begin-word> . 155) (<escaped-substitution> . 154)
            (:let . 153) (<query> . 152) (<fragment-define-word> . 151)
            (:parsed-variable . 150) (<expr-begin-word> . 149)
            (:false . 148) (<query-equal> . 147)
            (:parsed-case-body . 146) (<method-defining-word> . 145)
            (<seal-word> . 144) (:otherwise . 143)
            (opt-replacement . 474) (:true . 142) (:&key . 141))
           (839 (binary-operator . 247) (<var-singleton-sep> . 246)
            (<binds> . 245) (<binary-operator> . 244) (<minus> . 243)
            (<becomes> . 242))
           (838 (operand . 70) (unary-operator . 69)
            (<fragment-function-word> . 67) (:parsed-name . 65)
            (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (<not> . 43) (statement . 42)
            (<defining-word> . 41) (<list-open> . 39) (<keyword> . 220)
            (binary-operand-series . 839) (procedural-template . 34)
            (<symbol> . 33) (:generic . 32) (fragment-begin-word . 31)
            (:method . 27) (binary-operand . 218) (literal . 25)
            (<lbracket> . 23) (begin-clause . 21)
            (<details-begin-word> . 20) (anonymous-method . 17)
            (<fragment-define-word> . 16) (literal0 . 15)
            (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (:true . 2))
           (836 (operand . 70) (unary-operator . 69)
            (<fragment-function-word> . 67) (:parsed-name . 65)
            (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 61) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (<not> . 43) (statement . 42)
            (argument . 837) (<defining-word> . 41) (<list-open> . 39)
            (<keyword> . 77) (keyless-binary-operand-series . 37)
            (procedural-template . 34) (<symbol> . 33) (:generic . 32)
            (fragment-begin-word . 31) (:parsed-property-list . 76)
            (:method . 27) (literal . 25) (<lbracket> . 23)
            (begin-clause . 21) (<details-begin-word> . 20)
            (anonymous-method . 17) (<fragment-define-word> . 16)
            (literal0 . 15) (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (keyless-expression . 75)
            (the-variable-name . 5) (<method-defining-word> . 4)
            (:true . 2))
           (160 (<fragment-function-word> . 212) (<query-query> . 211)
            (:parsed-name . 210) (<binds> . 209) (:&rest . 208)
            (<unary-operator> . 207)
            (<fragment-define-and-begin-word> . 206) (<minus> . 205)
            (<fragment-define-bindings-word> . 203)
            (<fragment-define-bindings-and-begin-word> . 202)
            (<ellipsis> . 201) (:parsed-body . 200)
            (:parsed-literal . 199) (:end . 198) (:macro . 197)
            (<string> . 196) (<syntax-open> . 195)
            (<simple-begin-word> . 194) (:&next . 193)
            (<generic-function-defining-word> . 192) (<literal> . 191)
            (spliceable-replacement . 190)
            (<fragment-begin-word> . 189) (:parsed-expression . 188)
            (<vector-open> . 187) (<becomes> . 186)
            (<fragment-local-declaration-word> . 185) (<not> . 184)
            (replacement . 468) (<var-sep> . 182)
            (<defining-word> . 181) (<list-open> . 179)
            (<var-type-sep> . 178) (<binary-operator> . 177)
            (:handler . 176) (<keyword> . 175) (<statement-sep> . 174)
            (<details-intermediate-word> . 173) (:&all-keys . 172)
            (word . 171) (<implies> . 170)
            (<expr-intermediate-word> . 169) (<lcbracket> . 168)
            (<symbol> . 167) (:generic . 166) (:define . 165)
            (<var-singleton-sep> . 164) (separator . 163) (<dot> . 162)
            (:local . 161) (<lsbracket> . 160)
            (replacement-element . 159) (:method . 158)
            (<simple-intermediate-word> . 157) (<lbracket> . 156)
            (<details-begin-word> . 155) (<escaped-substitution> . 154)
            (:let . 153) (<query> . 152) (<fragment-define-word> . 151)
            (:parsed-variable . 150) (<expr-begin-word> . 149)
            (:false . 148) (<query-equal> . 147)
            (:parsed-case-body . 146) (<method-defining-word> . 145)
            (<seal-word> . 144) (:otherwise . 143)
            (opt-replacement . 475) (:true . 142) (:&key . 141))
           (830 (<rcbracket> . 793))
           (829 (word-fragment . 441) (modified-constant . 440)
            (:parsed-name . 439) (<binds> . 135) (:&rest . 438)
            (<minus> . 133) (opt-pattern . 830)
            (<fragment-define-bindings-word> . 131) (<ellipsis> . 436)
            (<string> . 435) (<literal> . 123)
            (the-pattern-sequence . 434) (<vector-open> . 121)
            (<becomes> . 119) (<not> . 118) (the-pattern . 433)
            (pattern-variable . 432) (<defining-word> . 116)
            (<list-open> . 115) (<binary-operator> . 112)
            (<keyword> . 111) (pattern-list . 431) (pattern . 430)
            (<implies> . 429) (<lcbracket> . 428) (<symbol> . 104)
            (property-list-pattern . 427) (<var-singleton-sep> . 103)
            (<lsbracket> . 426) (<escaped-hash-word> . 425)
            (<lbracket> . 424) (<query> . 423) (pattern-sequence . 422)
            (details-pattern . 421) (<fragment-define-word> . 94)
            (:false . 91) (literal-pattern . 420)
            (simple-pattern . 419) (:otherwise . 418) (:true . 86)
            (:&key . 417))
           (156 (<fragment-function-word> . 212) (<query-query> . 211)
            (:parsed-name . 210) (<binds> . 209) (:&rest . 208)
            (<unary-operator> . 207)
            (<fragment-define-and-begin-word> . 206) (<minus> . 205)
            (<fragment-define-bindings-word> . 203)
            (<fragment-define-bindings-and-begin-word> . 202)
            (<ellipsis> . 201) (:parsed-body . 200)
            (:parsed-literal . 199) (:end . 198) (:macro . 197)
            (<string> . 196) (<syntax-open> . 195)
            (<simple-begin-word> . 194) (:&next . 193)
            (<generic-function-defining-word> . 192) (<literal> . 191)
            (spliceable-replacement . 190)
            (<fragment-begin-word> . 189) (:parsed-expression . 188)
            (<vector-open> . 187) (<becomes> . 186)
            (<fragment-local-declaration-word> . 185) (<not> . 184)
            (replacement . 468) (<var-sep> . 182)
            (<defining-word> . 181) (<list-open> . 179)
            (<var-type-sep> . 178) (<binary-operator> . 177)
            (:handler . 176) (<keyword> . 175) (<statement-sep> . 174)
            (<details-intermediate-word> . 173) (:&all-keys . 172)
            (word . 171) (<implies> . 170)
            (<expr-intermediate-word> . 169) (<lcbracket> . 168)
            (<symbol> . 167) (:generic . 166) (:define . 165)
            (<var-singleton-sep> . 164) (separator . 163) (<dot> . 162)
            (:local . 161) (<lsbracket> . 160)
            (replacement-element . 159) (:method . 158)
            (<simple-intermediate-word> . 157) (<lbracket> . 156)
            (<details-begin-word> . 155) (<escaped-substitution> . 154)
            (:let . 153) (<query> . 152) (<fragment-define-word> . 151)
            (:parsed-variable . 150) (<expr-begin-word> . 149)
            (:false . 148) (<query-equal> . 147)
            (:parsed-case-body . 146) (<method-defining-word> . 145)
            (<seal-word> . 144) (:otherwise . 143)
            (opt-replacement . 476) (:true . 142) (:&key . 141))
           (827 (<generic-function-defining-word> . 192)
            (<fragment-define-bindings-word> . 203)
            (<fragment-begin-word> . 189) (<symbol> . 167)
            (<expr-intermediate-word> . 169)
            (<simple-intermediate-word> . 157) (:parsed-name . 210)
            (<fragment-local-declaration-word> . 185)
            (<details-begin-word> . 155) (<fragment-define-word> . 151)
            (<method-defining-word> . 145) (<simple-begin-word> . 194)
            (<defining-word> . 181) (<expr-begin-word> . 149)
            (<fragment-function-word> . 212)
            (<details-intermediate-word> . 173)
            (<fragment-define-and-begin-word> . 206) (word . 829)
            (<seal-word> . 144)
            (<fragment-define-bindings-and-begin-word> . 202))
           (152 (<generic-function-defining-word> . 192)
            (<fragment-define-bindings-word> . 203) (<string> . 466)
            (<fragment-begin-word> . 189) (<symbol> . 167)
            (<expr-intermediate-word> . 169)
            (<simple-intermediate-word> . 157) (:parsed-name . 210)
            (<fragment-local-declaration-word> . 185)
            (<details-begin-word> . 155) (<fragment-define-word> . 151)
            (<method-defining-word> . 145) (<simple-begin-word> . 194)
            (<defining-word> . 181) (<expr-begin-word> . 149)
            (<fragment-function-word> . 212)
            (<details-intermediate-word> . 173) (<literal> . 465)
            (<fragment-define-and-begin-word> . 206) (word . 464)
            (<seal-word> . 144) (<lbracket> . 477)
            (<fragment-define-bindings-and-begin-word> . 202))
           (147 (<generic-function-defining-word> . 192)
            (<fragment-define-bindings-word> . 203)
            (<fragment-begin-word> . 189) (<symbol> . 167)
            (<expr-intermediate-word> . 169)
            (<simple-intermediate-word> . 157) (:parsed-name . 210)
            (<fragment-local-declaration-word> . 185)
            (<details-begin-word> . 155) (<fragment-define-word> . 151)
            (<method-defining-word> . 145) (<simple-begin-word> . 194)
            (<defining-word> . 181) (<expr-begin-word> . 149)
            (<fragment-function-word> . 212)
            (<details-intermediate-word> . 173)
            (<fragment-define-and-begin-word> . 206) (word . 493)
            (<seal-word> . 144)
            (<fragment-define-bindings-and-begin-word> . 202))
           (807 (<generic-function-defining-word> . 826)
            (<fragment-define-bindings-word> . 825)
            (<fragment-begin-word> . 824) (<symbol> . 823)
            (non-intermediate-word . 822)
            (<fragment-local-declaration-word> . 821)
            (<details-begin-word> . 820) (<fragment-define-word> . 819)
            (<method-defining-word> . 818) (<simple-begin-word> . 817)
            (<defining-word> . 816) (opt-non-intermediate-word . 815)
            (<expr-begin-word> . 814) (<fragment-function-word> . 813)
            (<fragment-define-and-begin-word> . 812)
            (<seal-word> . 811) (<macro-defining-word> . 810)
            (<fragment-define-bindings-and-begin-word> . 809))
           (806 (:macro . 808) (opt-macro . 807)) (805 (:end . 806))
           (804 (:end . 792))
           (803 (word-fragment . 441) (modified-constant . 440)
            (:parsed-name . 439) (<binds> . 135) (:&rest . 438)
            (<minus> . 133) (opt-pattern . 804)
            (<fragment-define-bindings-word> . 131) (<ellipsis> . 436)
            (<string> . 435) (<literal> . 123)
            (the-pattern-sequence . 434) (<vector-open> . 121)
            (<becomes> . 119) (<not> . 118) (the-pattern . 433)
            (pattern-variable . 432) (<defining-word> . 116)
            (<list-open> . 115) (<binary-operator> . 112)
            (<keyword> . 111) (pattern-list . 431) (pattern . 430)
            (<implies> . 429) (<lcbracket> . 428) (<symbol> . 104)
            (property-list-pattern . 427) (<var-singleton-sep> . 103)
            (<lsbracket> . 426) (<escaped-hash-word> . 425)
            (<lbracket> . 424) (<query> . 423) (pattern-sequence . 422)
            (details-pattern . 421) (<fragment-define-word> . 94)
            (:false . 91) (literal-pattern . 420)
            (simple-pattern . 419) (:otherwise . 418) (:true . 86)
            (:&key . 417))
           (801 (<generic-function-defining-word> . 192)
            (<fragment-define-bindings-word> . 203)
            (<fragment-begin-word> . 189) (<symbol> . 167)
            (<expr-intermediate-word> . 169)
            (<simple-intermediate-word> . 157) (:parsed-name . 210)
            (<fragment-local-declaration-word> . 185)
            (<details-begin-word> . 155) (<fragment-define-word> . 151)
            (<method-defining-word> . 145) (<simple-begin-word> . 194)
            (<defining-word> . 181) (<expr-begin-word> . 149)
            (<fragment-function-word> . 212)
            (<details-intermediate-word> . 173)
            (<fragment-define-and-begin-word> . 206) (word . 803)
            (<seal-word> . 144)
            (<fragment-define-bindings-and-begin-word> . 202))
           (799 (opt-<statement-sep> . 800) (<statement-sep> . 373))
           (126 (:parsed-defining-form . 22) (:define . 30)
            (<fragment-local-declaration-word> . 44)
            (local-declaration . 251) (seal-word . 24)
            (:parsed-local-declaration . 68) (:let . 18)
            (<seal-word> . 3) (:local . 28) (defining-form . 250))
           (798 (operand . 70) (unary-operator . 69)
            (<fragment-function-word> . 67) (expression . 509)
            (:parsed-name . 65) (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (<not> . 43) (statement . 42)
            (<defining-word> . 41) (<list-open> . 39) (rule-rhs . 799)
            (<keyword> . 220) (binary-operand-series . 219)
            (<lcbracket> . 507) (procedural-template . 34)
            (<symbol> . 33) (:generic . 32) (fragment-begin-word . 31)
            (:method . 27) (binary-operand . 218) (literal . 25)
            (<lbracket> . 23) (begin-clause . 21)
            (<details-begin-word> . 20) (anonymous-method . 17)
            (<fragment-define-word> . 16) (literal0 . 15)
            (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (:true . 2))
           (125 (<statement-sep> . 309)) (797 (<implies> . 798))
           (795 (opt-<statement-sep> . 796) (<statement-sep> . 373))
           (794 (operand . 70) (unary-operator . 69)
            (<fragment-function-word> . 67) (expression . 509)
            (:parsed-name . 65) (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (<not> . 43) (statement . 42)
            (<defining-word> . 41) (<list-open> . 39) (rule-rhs . 795)
            (<keyword> . 220) (binary-operand-series . 219)
            (<lcbracket> . 507) (procedural-template . 34)
            (<symbol> . 33) (:generic . 32) (fragment-begin-word . 31)
            (:method . 27) (binary-operand . 218) (literal . 25)
            (<lbracket> . 23) (begin-clause . 21)
            (<details-begin-word> . 20) (anonymous-method . 17)
            (<fragment-define-word> . 16) (literal0 . 15)
            (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (:true . 2))
           (121 (literal0 . 15) (<string> . 52) (:parsed-literal . 54)
            (:false . 11) (:parsed-expression . 231) (:true . 2)
            (<vector-open> . 45) (constants . 230) (<literal> . 50)
            (constant . 229) (literal . 228) (<list-open> . 39)
            (<keyword> . 227) (opt-constants . 291))
           (793 (<implies> . 794))
           (120 (word-fragment . 140) (modified-constant . 139)
            (<query-query> . 138) (<fragment-function-word> . 67)
            (:parsed-name . 136) (<binds> . 135) (:&rest . 134)
            (<minus> . 133) (function-macro-call . 132)
            (<fragment-define-bindings-word> . 131) (<ellipsis> . 130)
            (:parsed-body . 129) (:parsed-literal . 128)
            (<syntax-open> . 53) (<string> . 127) (:&next . 124)
            (<literal> . 123) (:parsed-expression . 122)
            (<vector-open> . 121) (<becomes> . 119) (<not> . 118)
            (<defining-word> . 116) (<list-open> . 115)
            (implies-fragment . 114) (<var-type-sep> . 113)
            (<binary-operator> . 112) (<keyword> . 111)
            (:&all-keys . 110) (<implies> . 109)
            (simple-fragment . 108) (<lcbracket> . 106)
            (procedural-template . 105) (<symbol> . 104)
            (<var-singleton-sep> . 103) (<dot> . 100)
            (<lsbracket> . 99) (<lbracket> . 98)
            (opt-non-statement-etc . 294) (<query> . 96)
            (<fragment-define-word> . 94) (:parsed-variable . 92)
            (:false . 91) (<query-equal> . 89) (:parsed-case-body . 88)
            (:otherwise . 87) (:true . 86) (non-statement-etc . 293)
            (:&key . 84))
           (792 (<rcbracket> . 797))
           (791 (<rcbracket> . 793) (:end . 792))
           (790 (word-fragment . 441) (modified-constant . 440)
            (:parsed-name . 439) (<binds> . 135) (:&rest . 438)
            (<minus> . 133) (opt-pattern . 791)
            (<fragment-define-bindings-word> . 131) (<ellipsis> . 436)
            (<string> . 435) (<literal> . 123)
            (the-pattern-sequence . 434) (<vector-open> . 121)
            (<becomes> . 119) (<not> . 118) (the-pattern . 433)
            (pattern-variable . 432) (<defining-word> . 116)
            (<list-open> . 115) (<binary-operator> . 112)
            (<keyword> . 111) (pattern-list . 431) (pattern . 430)
            (<implies> . 429) (<lcbracket> . 428) (<symbol> . 104)
            (property-list-pattern . 427) (<var-singleton-sep> . 103)
            (<lsbracket> . 426) (<escaped-hash-word> . 425)
            (<lbracket> . 424) (<query> . 423) (pattern-sequence . 422)
            (details-pattern . 421) (<fragment-define-word> . 94)
            (:false . 91) (literal-pattern . 420)
            (simple-pattern . 419) (:otherwise . 418) (:true . 86)
            (:&key . 417))
           (788 (opt-<statement-sep> . 789) (<statement-sep> . 373))
           (115 (literal0 . 15) (<string> . 52) (:parsed-literal . 54)
            (:false . 11) (:parsed-expression . 231) (:true . 2)
            (<vector-open> . 45) (constants . 296) (<literal> . 50)
            (constant . 229) (literal . 228) (<list-open> . 39)
            (<keyword> . 227) (opt-constants . 295))
           (787 (operand . 70) (unary-operator . 69)
            (<fragment-function-word> . 67) (expression . 509)
            (:parsed-name . 65) (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (<not> . 43) (statement . 42)
            (<defining-word> . 41) (<list-open> . 39) (rule-rhs . 788)
            (<keyword> . 220) (binary-operand-series . 219)
            (<lcbracket> . 507) (procedural-template . 34)
            (<symbol> . 33) (:generic . 32) (fragment-begin-word . 31)
            (:method . 27) (binary-operand . 218) (literal . 25)
            (<lbracket> . 23) (begin-clause . 21)
            (<details-begin-word> . 20) (anonymous-method . 17)
            (<fragment-define-word> . 16) (literal0 . 15)
            (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (:true . 2))
           (114 (word-fragment . 140) (modified-constant . 139)
            (<query-query> . 138) (<fragment-function-word> . 67)
            (:parsed-name . 136) (<binds> . 135) (:&rest . 134)
            (<minus> . 133) (<fragment-define-and-begin-word> . 62)
            (function-macro-call . 132) (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 131) (<ellipsis> . 130)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 129) (:parsed-literal . 128)
            (<syntax-open> . 53) (<string> . 127) (:&next . 124)
            (<simple-begin-word> . 51) (<literal> . 123)
            (<fragment-begin-word> . 47) (:parsed-expression . 122)
            (<vector-open> . 121) (statement-or-method . 120)
            (<becomes> . 119) (<not> . 118) (statement . 117)
            (<defining-word> . 116) (<list-open> . 115)
            (implies-fragment . 114) (<var-type-sep> . 113)
            (<binary-operator> . 112) (<keyword> . 111)
            (:&all-keys . 110) (<implies> . 109)
            (simple-fragment . 108) (<lcbracket> . 106)
            (procedural-template . 105) (<symbol> . 104)
            (fragment-begin-word . 31) (<var-singleton-sep> . 103)
            (<dot> . 100) (<lsbracket> . 99) (:method . 27)
            (<lbracket> . 98) (begin-clause . 21)
            (<details-begin-word> . 20) (fragment-sequence . 302)
            (<query> . 96) (anonymous-method . 95)
            (<fragment-define-word> . 94) (:macro-case . 14)
            (:parsed-variable . 92) (<expr-begin-word> . 12)
            (opt-fragment-sequence . 301) (:false . 91)
            (<query-equal> . 89) (:parsed-case-body . 88)
            (:otherwise . 87) (:true . 86) (non-statement-etc . 85)
            (:&key . 84))
           (786 (<implies> . 787))
           (784 (opt-<statement-sep> . 785) (<statement-sep> . 373))
           (783 (operand . 70) (unary-operator . 69)
            (<fragment-function-word> . 67) (expression . 509)
            (:parsed-name . 65) (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (<not> . 43) (statement . 42)
            (<defining-word> . 41) (<list-open> . 39) (rule-rhs . 784)
            (<keyword> . 220) (binary-operand-series . 219)
            (<lcbracket> . 507) (procedural-template . 34)
            (<symbol> . 33) (:generic . 32) (fragment-begin-word . 31)
            (:method . 27) (binary-operand . 218) (literal . 25)
            (<lbracket> . 23) (begin-clause . 21)
            (<details-begin-word> . 20) (anonymous-method . 17)
            (<fragment-define-word> . 16) (literal0 . 15)
            (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (:true . 2))
           (782 (<implies> . 783)) (781 (<rcbracket> . 786))
           (108 (word-fragment . 140) (modified-constant . 139)
            (<query-query> . 138) (<fragment-function-word> . 67)
            (:parsed-name . 136) (<binds> . 135) (:&rest . 134)
            (<minus> . 133) (<fragment-define-and-begin-word> . 62)
            (function-macro-call . 132) (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 131) (<ellipsis> . 130)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 129) (:parsed-literal . 128)
            (<syntax-open> . 53) (<string> . 127) (:&next . 124)
            (<simple-begin-word> . 51) (<literal> . 123)
            (<fragment-begin-word> . 47) (:parsed-expression . 122)
            (<vector-open> . 121) (statement-or-method . 120)
            (<becomes> . 119) (<not> . 118) (statement . 117)
            (<defining-word> . 116) (<list-open> . 115)
            (implies-fragment . 114) (<var-type-sep> . 113)
            (<binary-operator> . 112) (<keyword> . 111)
            (:&all-keys . 110) (<implies> . 109)
            (simple-fragment . 108) (<lcbracket> . 106)
            (procedural-template . 105) (<symbol> . 104)
            (fragment-begin-word . 31) (<var-singleton-sep> . 103)
            (<dot> . 100) (<lsbracket> . 99) (:method . 27)
            (<lbracket> . 98) (begin-clause . 21)
            (<details-begin-word> . 20) (fragment-sequence . 302)
            (<query> . 96) (anonymous-method . 95)
            (<fragment-define-word> . 94) (:macro-case . 14)
            (:parsed-variable . 92) (<expr-begin-word> . 12)
            (opt-fragment-sequence . 303) (:false . 91)
            (<query-equal> . 89) (:parsed-case-body . 88)
            (:otherwise . 87) (:true . 86) (non-statement-etc . 85)
            (:&key . 84))
           (780 (<rcbracket> . 782) (:end . 781))
           (779 (word-fragment . 441) (modified-constant . 440)
            (:parsed-name . 439) (<binds> . 135) (:&rest . 438)
            (<minus> . 133) (<fragment-define-bindings-word> . 131)
            (<ellipsis> . 436) (<string> . 435) (<literal> . 123)
            (the-pattern-sequence . 434) (<vector-open> . 121)
            (<becomes> . 119) (<not> . 118) (the-pattern . 433)
            (pattern-variable . 432) (<defining-word> . 116)
            (<list-open> . 115) (<binary-operator> . 112)
            (<keyword> . 111) (pattern-list . 431) (pattern . 780)
            (<implies> . 429) (<lcbracket> . 428) (<symbol> . 104)
            (property-list-pattern . 427) (<var-singleton-sep> . 103)
            (<lsbracket> . 426) (<escaped-hash-word> . 425)
            (<lbracket> . 424) (<query> . 423) (pattern-sequence . 422)
            (details-pattern . 421) (<fragment-define-word> . 94)
            (:false . 91) (literal-pattern . 420)
            (simple-pattern . 419) (:otherwise . 418) (:true . 86)
            (:&key . 417))
           (106 (word-fragment . 140) (modified-constant . 139)
            (<query-query> . 138) (:parsed-local-declaration . 68)
            (<fragment-function-word> . 67) (local-declaration . 137)
            (opt-fragment-constituents . 305) (:parsed-name . 136)
            (<binds> . 135) (:&rest . 134) (<minus> . 133)
            (<fragment-define-and-begin-word> . 62)
            (function-macro-call . 132) (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 131) (<ellipsis> . 130)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 129) (:parsed-literal . 128)
            (<syntax-open> . 53) (<string> . 127) (fragment-list . 126)
            (fragment-constituent . 125) (:&next . 124)
            (<simple-begin-word> . 51) (<literal> . 123)
            (<fragment-begin-word> . 47) (:parsed-expression . 122)
            (<vector-open> . 121) (statement-or-method . 120)
            (<becomes> . 119) (<not> . 118)
            (<fragment-local-declaration-word> . 44) (statement . 117)
            (<defining-word> . 116) (<list-open> . 115)
            (implies-fragment . 114) (<var-type-sep> . 113)
            (<binary-operator> . 112) (<keyword> . 111)
            (:&all-keys . 110) (<implies> . 109)
            (simple-fragment . 108) (defining-form . 107)
            (<lcbracket> . 106) (procedural-template . 105)
            (<symbol> . 104) (fragment-begin-word . 31) (:define . 30)
            (<var-singleton-sep> . 103) (fragment-constituents . 304)
            (<dot> . 100) (:local . 28) (<lsbracket> . 99)
            (:method . 27) (seal-word . 24) (<lbracket> . 98)
            (:parsed-defining-form . 22) (begin-clause . 21)
            (<details-begin-word> . 20) (:let . 18)
            (fragment-sequence . 97) (<query> . 96)
            (anonymous-method . 95) (<fragment-define-word> . 94)
            (:macro-case . 14) (:parsed-variable . 92)
            (<expr-begin-word> . 12) (:false . 91)
            (opt-fragment-sequence . 90) (<query-equal> . 89)
            (:parsed-case-body . 88) (<seal-word> . 3)
            (:otherwise . 87) (:true . 86) (non-statement-etc . 85)
            (:&key . 84))
           (778 (:define . 779))
           (776 (<lcbracket> . 778) (define-rule . 777))
           (101 (<rbracket> . 835))
           (773 (<generic-function-defining-word> . 192)
            (<fragment-define-bindings-word> . 203)
            (<fragment-begin-word> . 189) (<symbol> . 167)
            (<expr-intermediate-word> . 169)
            (<simple-intermediate-word> . 157) (:define . 779)
            (:parsed-name . 210)
            (<fragment-local-declaration-word> . 185)
            (<details-begin-word> . 155) (<fragment-define-word> . 151)
            (<method-defining-word> . 145) (<simple-begin-word> . 194)
            (<defining-word> . 181) (<expr-begin-word> . 149)
            (<fragment-function-word> . 212)
            (<details-intermediate-word> . 173)
            (<fragment-define-and-begin-word> . 206) (word . 790)
            (<seal-word> . 144)
            (<fragment-define-bindings-and-begin-word> . 202))
           (772 (statement-rule . 802) (<lcbracket> . 801))
           (99 (word-fragment . 140) (modified-constant . 139)
            (<query-query> . 138) (:parsed-local-declaration . 68)
            (<fragment-function-word> . 67) (local-declaration . 137)
            (opt-fragment-constituents . 682) (:parsed-name . 136)
            (<binds> . 135) (:&rest . 134) (<minus> . 133)
            (<fragment-define-and-begin-word> . 62)
            (function-macro-call . 132) (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 131) (<ellipsis> . 130)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 129) (:parsed-literal . 128)
            (<syntax-open> . 53) (<string> . 127) (fragment-list . 126)
            (fragment-constituent . 125) (:&next . 124)
            (<simple-begin-word> . 51) (<literal> . 123)
            (<fragment-begin-word> . 47) (:parsed-expression . 122)
            (<vector-open> . 121) (statement-or-method . 120)
            (<becomes> . 119) (<not> . 118)
            (<fragment-local-declaration-word> . 44) (statement . 117)
            (<defining-word> . 116) (<list-open> . 115)
            (implies-fragment . 114) (<var-type-sep> . 113)
            (<binary-operator> . 112) (<keyword> . 111)
            (:&all-keys . 110) (<implies> . 109)
            (simple-fragment . 108) (defining-form . 107)
            (<lcbracket> . 106) (procedural-template . 105)
            (<symbol> . 104) (fragment-begin-word . 31) (:define . 30)
            (<var-singleton-sep> . 103) (fragment-constituents . 304)
            (<dot> . 100) (:local . 28) (<lsbracket> . 99)
            (:method . 27) (seal-word . 24) (<lbracket> . 98)
            (:parsed-defining-form . 22) (begin-clause . 21)
            (<details-begin-word> . 20) (:let . 18)
            (fragment-sequence . 97) (<query> . 96)
            (anonymous-method . 95) (<fragment-define-word> . 94)
            (:macro-case . 14) (:parsed-variable . 92)
            (<expr-begin-word> . 12) (:false . 91)
            (opt-fragment-sequence . 90) (<query-equal> . 89)
            (:parsed-case-body . 88) (<seal-word> . 3)
            (:otherwise . 87) (:true . 86) (non-statement-etc . 85)
            (:&key . 84))
           (771 (aux-rule-set . 537) (opt-aux-rule-sets . 805)
            (aux-rule-sets . 535) (<keyword> . 534))
           (98 (word-fragment . 140) (modified-constant . 139)
            (<query-query> . 138) (:parsed-local-declaration . 68)
            (<fragment-function-word> . 67) (local-declaration . 137)
            (opt-fragment-constituents . 684) (:parsed-name . 136)
            (<binds> . 135) (:&rest . 134) (<minus> . 133)
            (<fragment-define-and-begin-word> . 62)
            (function-macro-call . 132) (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 131) (<ellipsis> . 130)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 129) (:parsed-literal . 128)
            (<syntax-open> . 53) (<string> . 127) (fragment-list . 126)
            (fragment-constituent . 125) (:&next . 124)
            (<simple-begin-word> . 51) (<literal> . 123)
            (<fragment-begin-word> . 47) (:parsed-expression . 122)
            (<vector-open> . 121) (statement-or-method . 120)
            (<becomes> . 119) (<not> . 118)
            (<fragment-local-declaration-word> . 44) (statement . 117)
            (<defining-word> . 116) (<list-open> . 115)
            (implies-fragment . 114) (<var-type-sep> . 113)
            (<binary-operator> . 112) (<keyword> . 111)
            (:&all-keys . 110) (<implies> . 109)
            (simple-fragment . 108) (defining-form . 107)
            (<lcbracket> . 106) (procedural-template . 105)
            (<symbol> . 104) (fragment-begin-word . 31) (:define . 30)
            (<var-singleton-sep> . 103) (fragment-constituents . 304)
            (<dot> . 100) (:local . 28) (<lsbracket> . 99)
            (:method . 27) (seal-word . 24) (<lbracket> . 98)
            (:parsed-defining-form . 22) (begin-clause . 21)
            (<details-begin-word> . 20) (:let . 18)
            (fragment-sequence . 97) (<query> . 96)
            (anonymous-method . 95) (<fragment-define-word> . 94)
            (:macro-case . 14) (:parsed-variable . 92)
            (<expr-begin-word> . 12) (:false . 91)
            (opt-fragment-sequence . 90) (<query-equal> . 89)
            (:parsed-case-body . 88) (<seal-word> . 3)
            (:otherwise . 87) (:true . 86) (non-statement-etc . 85)
            (:&key . 84))
           (769 (function-or-local-declaration-rule . 828)
            (<lcbracket> . 827))
           (768 (main-rule-set2 . 776)
            (function-or-local-declaration-rule . 775)
            (statement-rule . 774) (<lcbracket> . 773)
            (main-rule-set1 . 772) (main-rule-set . 771)
            (define-rule . 770) (main-rule-set3 . 769))
           (765 (opt-detail-info . 768) (<lbracket> . 371)
            (detail-info . 767))
           (763 (<rbracket> . 764)) (90 (<var-sep> . 686))
           (759 (operand . 70) (unary-operator . 69)
            (<fragment-function-word> . 67) (expression . 397)
            (:parsed-name . 65) (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (value . 396) (<not> . 43)
            (statement . 42) (<defining-word> . 41) (<list-open> . 39)
            (<keyword> . 220) (binary-operand-series . 219)
            (<lcbracket> . 395) (procedural-template . 34)
            (<symbol> . 33) (:generic . 32) (fragment-begin-word . 31)
            (:method . 27) (binary-operand . 218) (literal . 25)
            (<lbracket> . 23) (begin-clause . 21)
            (<details-begin-word> . 20) (anonymous-method . 17)
            (<fragment-define-word> . 16) (literal0 . 15)
            (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (:true . 2))
           (757 (property . 390) (the-property-list . 389)
            (<var-sep> . 391) (property-list . 387)
            (opt-property-list . 758))
           (83 (word-fragment . 140) (modified-constant . 139)
            (<query-query> . 138) (:parsed-local-declaration . 68)
            (<fragment-function-word> . 67) (local-declaration . 137)
            (:parsed-name . 136) (<binds> . 135) (:&rest . 134)
            (<minus> . 133) (<fragment-define-and-begin-word> . 62)
            (function-macro-call . 132) (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 131) (<ellipsis> . 130)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 129) (:parsed-literal . 128)
            (<syntax-open> . 53) (<string> . 127) (fragment-list . 126)
            (fragment-constituent . 125) (:&next . 124)
            (<simple-begin-word> . 51) (<literal> . 123)
            (<fragment-begin-word> . 47) (:parsed-expression . 122)
            (<vector-open> . 121) (statement-or-method . 120)
            (<becomes> . 119) (<not> . 118)
            (<fragment-local-declaration-word> . 44) (statement . 117)
            (<defining-word> . 116) (<list-open> . 115)
            (implies-fragment . 114) (<var-type-sep> . 113)
            (<binary-operator> . 112) (<keyword> . 111)
            (:&all-keys . 110) (<implies> . 109)
            (simple-fragment . 108) (defining-form . 107)
            (<lcbracket> . 106) (procedural-template . 105)
            (<symbol> . 104) (fragment-begin-word . 31) (:define . 30)
            (<var-singleton-sep> . 103) (fragment-constituents . 102)
            (opt-fragment . 101) (<dot> . 100) (:local . 28)
            (<lsbracket> . 99) (:method . 27) (seal-word . 24)
            (<lbracket> . 98) (:parsed-defining-form . 22)
            (begin-clause . 21) (<details-begin-word> . 20) (:let . 18)
            (fragment-sequence . 97) (<query> . 96)
            (anonymous-method . 95) (<fragment-define-word> . 94)
            (:macro-case . 14) (fragment . 93) (:parsed-variable . 92)
            (<expr-begin-word> . 12) (:false . 91)
            (opt-fragment-sequence . 90) (<query-equal> . 89)
            (:parsed-case-body . 88) (<seal-word> . 3)
            (:otherwise . 87) (:true . 86) (non-statement-etc . 85)
            (:&key . 84))
           (82 (<var-sep> . 836))
           (755 (<binds> . 353) (property . 390)
            (the-property-list . 389) (<var-sep> . 391) (default . 757)
            (property-list . 387) (opt-property-list . 756))
           (81 (<rbracket> . 841))
           (754 (<generic-function-defining-word> . 49)
            (<ellipsis> . 57) (:generic . 32) (item-name . 760)
            (<fragment-define-bindings-word> . 58) (<symbol> . 33)
            (generic-function-defining-word . 48) (:parsed-name . 65)
            (the-variable-name . 5) (<fragment-define-word> . 16)
            (<method-defining-word> . 4) (<defining-word> . 41)
            (:parsed-property-list . 394) (:parsed-variable . 13)
            (variable-name . 746) (<keyword> . 759))
           (753 (property . 390) (the-property-list . 389)
            (<var-sep> . 391) (property-list . 387)
            (opt-property-list . 761))
           (80 (<dot> . 73) (<lsbracket> . 72) (<lbracket> . 71))
           (79 (<var-sep> . 836) (<rsbracket> . 842))
           (77 (operand . 70) (unary-operator . 69)
            (<fragment-function-word> . 67) (expression . 840)
            (:parsed-name . 65) (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (<not> . 43) (statement . 42)
            (<defining-word> . 41) (<list-open> . 39) (<keyword> . 220)
            (binary-operand-series . 219) (procedural-template . 34)
            (<symbol> . 33) (:generic . 32) (fragment-begin-word . 31)
            (:method . 27) (binary-operand . 218) (literal . 25)
            (<lbracket> . 23) (begin-clause . 21)
            (<details-begin-word> . 20) (anonymous-method . 17)
            (<fragment-define-word> . 16) (literal0 . 15)
            (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (:true . 2))
           (749 (<var-type-sep> . 563) (<binds> . 353) (property . 390)
            (the-property-list . 389) (type-designator . 755)
            (<var-sep> . 754) (default . 753) (property-list . 387)
            (opt-property-list . 752))
           (73 (<generic-function-defining-word> . 49)
            (<ellipsis> . 57) (:generic . 32)
            (<fragment-define-bindings-word> . 58) (<symbol> . 33)
            (generic-function-defining-word . 48) (:parsed-name . 65)
            (the-variable-name . 5) (<fragment-define-word> . 16)
            (<method-defining-word> . 4) (<defining-word> . 41)
            (:parsed-variable . 13) (variable-name . 74))
           (72 (operand . 70) (unary-operator . 69)
            (<fragment-function-word> . 67) (:parsed-name . 65)
            (<unary-operator> . 64) (arguments . 79) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 61) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (<not> . 43) (statement . 42)
            (argument . 78) (<defining-word> . 41) (<list-open> . 39)
            (<keyword> . 77) (keyless-binary-operand-series . 37)
            (procedural-template . 34) (<symbol> . 33) (:generic . 32)
            (fragment-begin-word . 31) (:parsed-property-list . 76)
            (:method . 27) (literal . 25) (<lbracket> . 23)
            (begin-clause . 21) (<details-begin-word> . 20)
            (anonymous-method . 17) (<fragment-define-word> . 16)
            (literal0 . 15) (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (keyless-expression . 75)
            (the-variable-name . 5) (<method-defining-word> . 4)
            (:true . 2))
           (71 (operand . 70) (unary-operator . 69)
            (<fragment-function-word> . 67) (:parsed-name . 65)
            (<unary-operator> . 64) (arguments . 82) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 61) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (<not> . 43) (statement . 42)
            (argument . 78) (<defining-word> . 41) (<list-open> . 39)
            (<keyword> . 77) (keyless-binary-operand-series . 37)
            (procedural-template . 34) (<symbol> . 33) (:generic . 32)
            (fragment-begin-word . 31) (:parsed-property-list . 76)
            (:method . 27) (literal . 25) (<lbracket> . 23)
            (begin-clause . 21) (<details-begin-word> . 20)
            (opt-arguments . 81) (anonymous-method . 17)
            (<fragment-define-word> . 16) (literal0 . 15)
            (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (keyless-expression . 75)
            (the-variable-name . 5) (<method-defining-word> . 4)
            (:true . 2))
           (70 (<dot> . 73) (<lsbracket> . 72) (<lbracket> . 71))
           (742 (<symbol> . 740) (item . 744) (item-modifier . 737)
            (<defining-word> . 735) (item-modifiers-and-word . 734))
           (69 (operand . 80) (<fragment-function-word> . 67)
            (:parsed-name . 65) (<fragment-define-and-begin-word> . 62)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58)
            (function-macro-call . 60) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (statement . 42)
            (<defining-word> . 41) (<list-open> . 39) (<symbol> . 33)
            (:generic . 32) (procedural-template . 34)
            (fragment-begin-word . 31) (:method . 27) (literal . 25)
            (<lbracket> . 23) (begin-clause . 21)
            (<details-begin-word> . 20) (anonymous-method . 17)
            (<fragment-define-word> . 16) (literal0 . 15)
            (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (:true . 2))
           (741 (opt-<statement-sep> . 743) (<statement-sep> . 742))
           (67 (<lbracket> . 83)) (66 (<statement-sep> . 843))
           (736 (:end . 714) (end-definition . 762))
           (61 (binary-operator . 838) (<var-singleton-sep> . 246)
            (<binds> . 245) (<binary-operator> . 244) (<minus> . 243)
            (<becomes> . 242))
           (734 (<generic-function-defining-word> . 49)
            (<ellipsis> . 57) (:generic . 32) (item-name . 751)
            (<fragment-define-bindings-word> . 58) (<symbol> . 750)
            (generic-function-defining-word . 48) (:parsed-name . 65)
            (item-names . 749) (the-variable-name . 5)
            (<fragment-define-word> . 16) (item-modifier . 748)
            (<method-defining-word> . 4) (<defining-word> . 747)
            (:parsed-variable . 13) (variable-name . 746)
            (<keyword> . 745))
           (733 (items . 741) (<symbol> . 740) (item . 739)
            (item-list . 738) (item-modifier . 737)
            (opt-item-list . 736) (<defining-word> . 735)
            (item-modifiers-and-word . 734))
           (731 (operand . 70) (unary-operator . 69)
            (<fragment-function-word> . 67) (expression . 573)
            (:parsed-name . 65) (expressions . 610)
            (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (<not> . 43) (statement . 42)
            (<defining-word> . 41) (<list-open> . 39) (<keyword> . 220)
            (binary-operand-series . 219) (procedural-template . 34)
            (<symbol> . 33) (:generic . 32) (fragment-begin-word . 31)
            (binary-operand . 218) (:method . 27) (literal . 25)
            (<lbracket> . 23) (begin-clause . 21)
            (<details-begin-word> . 20) (anonymous-method . 17)
            (<fragment-define-word> . 16) (literal0 . 15)
            (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (opt-expressions . 763)
            (:false . 11) (variable-name . 9) (leaf . 8)
            (the-variable-name . 5) (<method-defining-word> . 4)
            (:true . 2))
           (728 (opt-expression-list . 733) (<var-type-sep> . 563)
            (type-designator . 562) (expression-list . 732)
            (<lbracket> . 731))
           (726 (<generic-function-defining-word> . 49)
            (<ellipsis> . 57) (:generic . 32)
            (<fragment-define-bindings-word> . 58) (<symbol> . 33)
            (generic-function-defining-word . 48) (:parsed-name . 65)
            (the-variable-name . 5) (<fragment-define-word> . 16)
            (<method-defining-word> . 4) (<defining-word> . 41)
            (:parsed-variable . 13) (variable-name . 325)
            (opt-variable-name . 727))
           (53 (<fragment-function-word> . 212) (<query-query> . 211)
            (:parsed-name . 210) (<binds> . 209) (:&rest . 208)
            (<unary-operator> . 207)
            (<fragment-define-and-begin-word> . 206) (<minus> . 205)
            (opt-template . 204)
            (<fragment-define-bindings-word> . 203)
            (<fragment-define-bindings-and-begin-word> . 202)
            (<ellipsis> . 201) (:parsed-body . 200)
            (:parsed-literal . 199) (:end . 198) (:macro . 197)
            (<string> . 196) (<syntax-open> . 195)
            (<simple-begin-word> . 194) (:&next . 193)
            (<generic-function-defining-word> . 192) (<literal> . 191)
            (spliceable-replacement . 190)
            (<fragment-begin-word> . 189) (:parsed-expression . 188)
            (<vector-open> . 187) (<becomes> . 186)
            (<fragment-local-declaration-word> . 185) (<not> . 184)
            (replacement . 183) (<var-sep> . 182)
            (<defining-word> . 181) (template . 180)
            (<list-open> . 179) (<var-type-sep> . 178)
            (<binary-operator> . 177) (:handler . 176)
            (<keyword> . 175) (<statement-sep> . 174)
            (<details-intermediate-word> . 173) (:&all-keys . 172)
            (word . 171) (<implies> . 170)
            (<expr-intermediate-word> . 169) (<lcbracket> . 168)
            (<symbol> . 167) (:generic . 166) (:define . 165)
            (<var-singleton-sep> . 164) (separator . 163) (<dot> . 162)
            (:local . 161) (<lsbracket> . 160)
            (replacement-element . 159) (:method . 158)
            (<simple-intermediate-word> . 157) (<lbracket> . 156)
            (<details-begin-word> . 155) (<escaped-substitution> . 154)
            (:let . 153) (<query> . 152) (<fragment-define-word> . 151)
            (:parsed-variable . 150) (<expr-begin-word> . 149)
            (:false . 148) (<query-equal> . 147)
            (:parsed-case-body . 146) (<method-defining-word> . 145)
            (<seal-word> . 144) (:otherwise . 143) (:true . 142)
            (:&key . 141))
           (725 (<fragment-begin-word> . 47)
            (fragment-begin-word . 314) (opt-method . 726)
            (<fragment-define-and-begin-word> . 62)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:method . 311))
           (724 (:end . 725))
           (722 (method-body . 724) (<lbracket> . 320))
           (719 (<generic-function-defining-word> . 49)
            (<ellipsis> . 57) (:generic . 32)
            (<fragment-define-bindings-word> . 58) (<symbol> . 33)
            (generic-function-defining-word . 48) (:parsed-name . 65)
            (the-variable-name . 5) (<fragment-define-word> . 16)
            (<method-defining-word> . 4) (<defining-word> . 41)
            (:parsed-variable . 13) (variable-name . 720))
           (45 (literal0 . 15) (<string> . 52) (:parsed-literal . 54)
            (:false . 11) (:parsed-expression . 231) (:true . 2)
            (<vector-open> . 45) (constants . 230) (<literal> . 50)
            (constant . 229) (literal . 228) (<list-open> . 39)
            (<keyword> . 227) (opt-constants . 226))
           (717 (<generic-function-defining-word> . 49)
            (<ellipsis> . 57) (:generic . 32)
            (<fragment-define-bindings-word> . 58) (<symbol> . 33)
            (generic-function-defining-word . 48) (:parsed-name . 65)
            (the-variable-name . 5) (<fragment-define-word> . 16)
            (<method-defining-word> . 4) (<defining-word> . 41)
            (:parsed-variable . 13) (variable-name . 721))
           (44 (word-fragment . 140) (modified-constant . 139)
            (<query-query> . 138) (:parsed-local-declaration . 68)
            (<fragment-function-word> . 67) (local-declaration . 137)
            (:parsed-name . 136) (<binds> . 135) (:&rest . 134)
            (<minus> . 133) (<fragment-define-and-begin-word> . 62)
            (function-macro-call . 132) (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 131) (<ellipsis> . 130)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 129) (:parsed-literal . 128)
            (<syntax-open> . 53) (fragment-constituent . 290)
            (<string> . 127) (fragment-list . 126) (:&next . 124)
            (<simple-begin-word> . 51) (<literal> . 123)
            (<fragment-begin-word> . 47) (:parsed-expression . 122)
            (<vector-open> . 121) (statement-or-method . 120)
            (<becomes> . 119) (<not> . 118)
            (<fragment-local-declaration-word> . 44) (statement . 117)
            (<defining-word> . 116) (<list-open> . 115)
            (implies-fragment . 114) (<var-type-sep> . 113)
            (<binary-operator> . 112) (<keyword> . 111)
            (:&all-keys . 110) (<implies> . 109)
            (simple-fragment . 108) (defining-form . 107)
            (<lcbracket> . 106) (procedural-template . 105)
            (<symbol> . 104) (fragment-begin-word . 31) (:define . 30)
            (<var-singleton-sep> . 103) (<dot> . 100) (:local . 28)
            (<lsbracket> . 99) (:method . 27) (seal-word . 24)
            (<lbracket> . 98) (:parsed-defining-form . 22)
            (begin-clause . 21) (<details-begin-word> . 20) (:let . 18)
            (fragment-sequence . 97) (<query> . 96)
            (anonymous-method . 95) (<fragment-define-word> . 94)
            (:macro-case . 14) (:parsed-variable . 92)
            (<expr-begin-word> . 12) (:false . 91)
            (opt-fragment-sequence . 90) (<query-equal> . 89)
            (:parsed-case-body . 88) (<seal-word> . 3)
            (:otherwise . 87) (:true . 86) (non-statement-etc . 85)
            (:&key . 84))
           (714 (<generic-function-defining-word> . 49)
            (<ellipsis> . 57) (:generic . 32)
            (<fragment-define-bindings-word> . 58) (<symbol> . 33)
            (generic-function-defining-word . 48) (:parsed-name . 65)
            (the-variable-name . 5) (fragment-define-word . 719)
            (<fragment-define-word> . 718) (<method-defining-word> . 4)
            (<defining-word> . 717) (:parsed-variable . 13)
            (<fragment-define-and-begin-word> . 716)
            (variable-name . 715))
           (40 (word-fragment . 140) (modified-constant . 139)
            (<query-query> . 138) (:parsed-local-declaration . 68)
            (<fragment-function-word> . 67) (local-declaration . 137)
            (:parsed-name . 136) (<binds> . 135) (:&rest . 134)
            (<minus> . 133) (<fragment-define-and-begin-word> . 62)
            (function-macro-call . 132) (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 131) (<ellipsis> . 130)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 129) (:parsed-literal . 128)
            (<syntax-open> . 53) (<string> . 127) (fragment-list . 126)
            (fragment-constituent . 125) (:&next . 124)
            (<simple-begin-word> . 51) (<literal> . 123)
            (<fragment-begin-word> . 47) (:parsed-expression . 122)
            (<vector-open> . 121) (statement-or-method . 120)
            (<becomes> . 119) (<not> . 118)
            (<fragment-local-declaration-word> . 44) (statement . 117)
            (<defining-word> . 116) (<list-open> . 115)
            (implies-fragment . 114) (<var-type-sep> . 113)
            (<binary-operator> . 112) (<keyword> . 111)
            (:&all-keys . 110) (<implies> . 109)
            (simple-fragment . 108) (defining-form . 107)
            (<lcbracket> . 106) (procedural-template . 105)
            (<symbol> . 104) (fragment-begin-word . 31) (:define . 30)
            (<var-singleton-sep> . 103) (fragment-constituents . 102)
            (opt-fragment . 851) (<dot> . 100) (:local . 28)
            (<lsbracket> . 99) (:method . 27) (seal-word . 24)
            (<lbracket> . 98) (:parsed-defining-form . 22)
            (begin-clause . 21) (<details-begin-word> . 20) (:let . 18)
            (fragment-sequence . 97) (<query> . 96)
            (anonymous-method . 95) (<fragment-define-word> . 94)
            (:macro-case . 14) (fragment . 93) (:parsed-variable . 92)
            (<expr-begin-word> . 12) (:false . 91)
            (opt-fragment-sequence . 90) (<query-equal> . 89)
            (:parsed-case-body . 88) (<seal-word> . 3)
            (:otherwise . 87) (:true . 86) (non-statement-etc . 85)
            (:&key . 84))
           (712 (:end . 714) (end-definition . 713))
           (39 (literal0 . 15) (<string> . 52) (:parsed-literal . 54)
            (:false . 11) (:parsed-expression . 231) (:true . 2)
            (<vector-open> . 45) (constants . 236) (<literal> . 50)
            (constant . 229) (literal . 228) (<list-open> . 39)
            (<keyword> . 227) (opt-constants . 235))
           (38 (operand . 70) (unary-operator . 69)
            (:parsed-local-declaration . 68)
            (<fragment-function-word> . 67) (expression . 289)
            (local-declaration . 288) (:parsed-name . 65)
            (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45)
            (<fragment-local-declaration-word> . 44) (<not> . 43)
            (statement . 42) (<defining-word> . 41) (<list-open> . 39)
            (<keyword> . 220) (binary-operand-series . 219)
            (<statement-sep> . 854) (defining-form . 281)
            (procedural-template . 34) (<symbol> . 33) (:generic . 32)
            (fragment-begin-word . 31) (:define . 30) (:local . 28)
            (binary-operand . 218) (:method . 27) (literal . 25)
            (seal-word . 24) (<lbracket> . 23)
            (:parsed-defining-form . 22) (begin-clause . 21)
            (<details-begin-word> . 20) (:let . 18)
            (anonymous-method . 17) (literal0 . 15)
            (<fragment-define-word> . 16) (:macro-case . 14)
            (:parsed-variable . 13) (<expr-begin-word> . 12)
            (:false . 11) (variable-name . 9) (leaf . 8)
            (the-variable-name . 5) (<method-defining-word> . 4)
            (constituent . 853) (<seal-word> . 3) (:true . 2))
           (710 (<rbracket> . 711))
           (36 (operand . 70) (unary-operator . 69)
            (<fragment-function-word> . 67) (expression . 573)
            (:parsed-name . 65) (expressions . 363)
            (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52) (case-label . 362)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48) (opt-case-body . 857)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (case-body . 856) (<vector-open> . 45) (final-case . 361)
            (<not> . 43) (statement . 42) (<defining-word> . 41)
            (the-case-body . 367) (<list-open> . 39) (<keyword> . 220)
            (binary-operand-series . 219) (intermediate-case . 365)
            (procedural-template . 34) (<symbol> . 33) (:generic . 32)
            (fragment-begin-word . 31) (binary-operand . 218)
            (:method . 27) (literal . 25) (<lbracket> . 369)
            (begin-clause . 21) (<details-begin-word> . 20)
            (anonymous-method . 17) (<fragment-define-word> . 16)
            (literal0 . 15) (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (:true . 2) (:otherwise . 360))
           (35 (<statement-sep> . 859))
           (708 (<generic-function-defining-word> . 49)
            (<ellipsis> . 57) (positional-parameters . 339)
            (:generic . 32) (<fragment-define-bindings-word> . 58)
            (<symbol> . 33) (generic-function-defining-word . 48)
            (:&key . 338) (:parsed-name . 65) (return-type-list . 679)
            (parameters . 678) (the-variable-name . 5) (:&rest . 336)
            (<fragment-define-word> . 16) (<method-defining-word> . 4)
            (positional-parameter . 335) (<defining-word> . 41)
            (:&next . 333) (rest-parameters . 332) (:&all-keys . 331)
            (next-parameters . 330) (:parsed-variable . 13)
            (opt-return-type-list . 710) (rest-parameter . 329)
            (variable-name . 328) (keyword-parameters . 327)
            (next-parameter . 326))
           (706 (<generic-function-defining-word> . 49)
            (<ellipsis> . 57) (:generic . 32)
            (<fragment-define-bindings-word> . 58) (<symbol> . 33)
            (generic-function-defining-word . 48) (:parsed-name . 65)
            (the-variable-name . 5) (<fragment-define-word> . 16)
            (<method-defining-word> . 4) (positional-parameter . 709)
            (<defining-word> . 41) (:parsed-variable . 13)
            (<lbracket> . 708) (variable-name . 328))
           (704 (generic-function-return-type . 707) (<implies> . 706)
            (opt-generic-function-return-type . 705))
           (31 (word-fragment . 140) (modified-constant . 139)
            (<query-query> . 138) (:parsed-local-declaration . 68)
            (<fragment-function-word> . 67) (local-declaration . 137)
            (:parsed-name . 136) (<binds> . 135) (:&rest . 134)
            (<minus> . 133) (<fragment-define-and-begin-word> . 62)
            (function-macro-call . 132) (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 131) (<ellipsis> . 130)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 129) (:parsed-literal . 128)
            (<syntax-open> . 53) (<string> . 127) (fragment-list . 126)
            (fragment-constituent . 125) (:&next . 124)
            (<simple-begin-word> . 51) (<literal> . 123)
            (<fragment-begin-word> . 47) (:parsed-expression . 122)
            (<vector-open> . 121) (statement-or-method . 120)
            (<becomes> . 119) (<not> . 118)
            (<fragment-local-declaration-word> . 44) (statement . 117)
            (<defining-word> . 116) (<list-open> . 115)
            (implies-fragment . 114) (<var-type-sep> . 113)
            (<binary-operator> . 112) (<keyword> . 111)
            (:&all-keys . 110) (<implies> . 109)
            (simple-fragment . 108) (defining-form . 107)
            (<lcbracket> . 106) (procedural-template . 105)
            (<symbol> . 104) (fragment-begin-word . 31) (:define . 30)
            (<var-singleton-sep> . 103) (fragment-constituents . 102)
            (opt-fragment . 249) (<dot> . 100) (:local . 28)
            (<lsbracket> . 99) (:method . 27) (seal-word . 24)
            (<lbracket> . 98) (:parsed-defining-form . 22)
            (begin-clause . 21) (<details-begin-word> . 20) (:let . 18)
            (fragment-sequence . 97) (<query> . 96)
            (anonymous-method . 95) (<fragment-define-word> . 94)
            (:macro-case . 14) (fragment . 93) (:parsed-variable . 92)
            (<expr-begin-word> . 12) (:false . 91)
            (opt-fragment-sequence . 90) (<query-equal> . 89)
            (:parsed-case-body . 88) (<seal-word> . 3)
            (:otherwise . 87) (:true . 86) (non-statement-etc . 85)
            (:&key . 84))
           (703 (<rbracket> . 704))
           (30 (<symbol> . 257) (:parsed-name . 256)
            (opt-modifiers . 255) (the-modifiers . 254)
            (modifiers . 253) (modifier . 252))
           (29 (operand . 70) (unary-operator . 69)
            (:parsed-local-declaration . 68)
            (<fragment-function-word> . 67) (expression . 289)
            (local-declaration . 288) (:parsed-name . 65)
            (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45)
            (<fragment-local-declaration-word> . 44) (<not> . 43)
            (statement . 42) (<defining-word> . 41) (<list-open> . 39)
            (<keyword> . 220) (binary-operand-series . 219)
            (defining-form . 281) (procedural-template . 34)
            (<symbol> . 33) (:generic . 32) (fragment-begin-word . 31)
            (:define . 30) (constituents . 279) (:local . 28)
            (binary-operand . 218) (:method . 27) (seal-word . 24)
            (literal . 25) (<lbracket> . 23)
            (:parsed-defining-form . 22) (begin-clause . 21)
            (<details-begin-word> . 20) (:let . 18) (body . 588)
            (opt-body . 860) (anonymous-method . 17) (literal0 . 15)
            (<fragment-define-word> . 16) (:macro-case . 14)
            (:parsed-variable . 13) (<expr-begin-word> . 12)
            (:false . 11) (variable-name . 9) (leaf . 8)
            (the-variable-name . 5) (<method-defining-word> . 4)
            (constituent . 276) (<seal-word> . 3) (:true . 2))
           (701 (property . 390) (the-property-list . 389)
            (<var-sep> . 391) (property-list . 387)
            (opt-property-list . 702))
           (28 (<fragment-begin-word> . 47) (local-methods . 315)
            (fragment-begin-word . 314) (local-method . 313)
            (opt-method . 312) (<fragment-define-and-begin-word> . 62)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:method . 311))
           (700 (<generic-function-defining-word> . 49)
            (<ellipsis> . 57) (positional-parameters . 339)
            (:generic . 32) (<fragment-define-bindings-word> . 58)
            (<symbol> . 33) (generic-function-defining-word . 48)
            (:&key . 338) (:parsed-name . 65) (parameters . 337)
            (the-variable-name . 5) (:&rest . 336)
            (<fragment-define-word> . 16) (<method-defining-word> . 4)
            (positional-parameter . 335) (<defining-word> . 41)
            (opt-parameters . 703) (:&next . 333)
            (rest-parameters . 332) (:&all-keys . 331)
            (next-parameters . 330) (:parsed-variable . 13)
            (rest-parameter . 329) (variable-name . 328)
            (keyword-parameters . 327) (next-parameter . 326))
           (27 (method-body . 355) (<lbracket> . 320))
           (26 (<generic-function-defining-word> . 192)
            (<fragment-define-bindings-word> . 203)
            (<fragment-begin-word> . 189) (<symbol> . 167)
            (<expr-intermediate-word> . 169)
            (<simple-intermediate-word> . 157) (:parsed-name . 210)
            (<fragment-local-declaration-word> . 185)
            (<details-begin-word> . 155) (<fragment-define-word> . 151)
            (<method-defining-word> . 145) (<simple-begin-word> . 194)
            (<defining-word> . 181) (<expr-begin-word> . 149)
            (<fragment-function-word> . 212)
            (<details-intermediate-word> . 173)
            (<fragment-define-and-begin-word> . 206) (word . 862)
            (<seal-word> . 144)
            (<fragment-define-bindings-and-begin-word> . 202))
           (698 (generic-function-body . 701) (<lbracket> . 700))
           (24 (<symbol> . 257) (:parsed-name . 256)
            (opt-modifiers . 605) (the-modifiers . 254)
            (modifiers . 253) (modifier . 252))
           (696 (<generic-function-defining-word> . 49)
            (<ellipsis> . 57) (:generic . 32)
            (<fragment-define-bindings-word> . 58) (<symbol> . 33)
            (generic-function-defining-word . 48) (:parsed-name . 65)
            (the-variable-name . 5) (<fragment-define-word> . 16)
            (<method-defining-word> . 4) (<defining-word> . 41)
            (:parsed-variable . 13) (variable-name . 697))
           (23 (operand . 70) (unary-operator . 69)
            (<fragment-function-word> . 67) (expression . 358)
            (:parsed-name . 65) (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (<not> . 43) (statement . 42)
            (<defining-word> . 41) (<list-open> . 39) (<keyword> . 220)
            (binary-operand-series . 219) (procedural-template . 34)
            (<symbol> . 33) (:generic . 32) (fragment-begin-word . 31)
            (:method . 27) (binary-operand . 218) (literal . 25)
            (<lbracket> . 23) (begin-clause . 21)
            (<details-begin-word> . 20) (anonymous-method . 17)
            (<fragment-define-word> . 16) (literal0 . 15)
            (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (:true . 2))
           (694 (<var-sep> . 696) (<rbracket> . 695))
           (21 (<details-intermediate-word> . 285)
            (<fragment-define-bindings-and-begin-word> . 56)
            (<lbracket> . 369) (<fragment-begin-word> . 47)
            (<simple-intermediate-word> . 278) (:parsed-body . 55)
            (<fragment-define-bindings-word> . 58)
            (anonymous-method . 17) (<details-begin-word> . 20)
            (constituent . 276) (:parsed-statement . 59) (leaf . 8)
            (<expr-begin-word> . 12) (binary-operand-series . 219)
            (local-declaration . 288) (:false . 11) (<seal-word> . 3)
            (:local . 28) (fragment-begin-word . 31) (operand . 70)
            (:true . 2) (:parsed-defining-form . 22)
            (binary-operand . 218) (keyless-binary-operand . 221)
            (case-body . 368) (clause-body . 286) (begin-clause . 21)
            (generic-function-defining-word . 48) (the-case-body . 367)
            (<string> . 52) (opt-clause-body . 366) (literal0 . 15)
            (statement . 42) (<unary-operator> . 64)
            (intermediate-case . 365) (expression . 364)
            (the-variable-name . 5) (<simple-begin-word> . 51)
            (intermediate-clause . 280) (:parsed-literal . 54)
            (:parsed-local-declaration . 68) (procedural-template . 34)
            (unary-operator . 69) (:parsed-expression . 46)
            (function-macro-call . 60) (expressions . 363)
            (<expr-intermediate-word> . 282) (<keyword> . 220)
            (case-label . 362) (:let . 18) (<symbol> . 33)
            (:generic . 32) (final-case . 361) (<minus> . 63)
            (defining-form . 281) (:parsed-name . 65)
            (intermediate-clauses . 284)
            (<fragment-define-and-begin-word> . 62) (<literal> . 50)
            (constituents . 279) (<syntax-open> . 53)
            (the-intermediate-clauses . 287)
            (<generic-function-defining-word> . 49) (:otherwise . 360)
            (<not> . 43) (seal-word . 24) (variable-name . 9)
            (:macro-case . 14) (<vector-open> . 45)
            (<fragment-local-declaration-word> . 44) (literal . 25)
            (:method . 27) (<method-defining-word> . 4)
            (<list-open> . 39) (:parsed-variable . 13) (:define . 30)
            (<defining-word> . 41) (<fragment-define-word> . 16)
            (<ellipsis> . 57) (<fragment-function-word> . 67)
            (body . 277))
           (20 (<generic-function-defining-word> . 49)
            (<ellipsis> . 57) (:generic . 32)
            (<fragment-define-bindings-word> . 58) (<symbol> . 33)
            (generic-function-defining-word . 48) (:parsed-name . 65)
            (the-variable-name . 5) (<fragment-define-word> . 16)
            (<method-defining-word> . 4) (<defining-word> . 41)
            (:parsed-variable . 13) (variable-name . 325)
            (opt-variable-name . 409))
           (19 (<generic-function-defining-word> . 49)
            (typed-variable . 385) (<ellipsis> . 57) (:generic . 32)
            (<fragment-define-bindings-word> . 58) (<symbol> . 33)
            (generic-function-defining-word . 48) (:parsed-name . 65)
            (the-variable-name . 5) (variable . 864)
            (<fragment-define-word> . 16) (<method-defining-word> . 4)
            (<defining-word> . 41) (:parsed-variable . 13)
            (untyped-variable . 378) (variable-name . 376))
           (18 (typed-variable . 385)
            (<generic-function-defining-word> . 49) (<ellipsis> . 57)
            (:generic . 32) (variables . 616)
            (<fragment-define-bindings-word> . 58) (<symbol> . 33)
            (generic-function-defining-word . 48) (:parsed-name . 65)
            (bindings . 615) (the-variable-name . 5) (:&rest . 552)
            (variable . 551) (<fragment-define-word> . 16)
            (<method-defining-word> . 4) (<defining-word> . 41)
            (:parsed-variable . 13) (untyped-variable . 378)
            (<lbracket> . 614) (variable-name . 376) (:handler . 613))
           (690 (<generic-function-defining-word> . 49)
            (<ellipsis> . 57) (:generic . 32)
            (<fragment-define-bindings-word> . 58) (<symbol> . 33)
            (generic-function-defining-word . 48) (:parsed-name . 65)
            (the-variable-name . 5) (<fragment-define-word> . 16)
            (<method-defining-word> . 4) (<defining-word> . 41)
            (:parsed-variable . 13) (variable-name . 325)
            (opt-variable-name . 692))
           (689 (<clauses-defining-word> . 691)
            (opt-<clauses-defining-word> . 690))
           (15 (<string> . 232)) (14 (<lbracket> . 411))
           (686 (word-fragment . 140) (modified-constant . 139)
            (<query-query> . 138) (<fragment-function-word> . 67)
            (opt-fragment-list . 688) (:parsed-name . 136)
            (<binds> . 135) (:&rest . 134) (<minus> . 133)
            (<fragment-define-and-begin-word> . 62)
            (function-macro-call . 132) (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 131) (<ellipsis> . 130)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 129) (:parsed-literal . 128)
            (<syntax-open> . 53) (<string> . 127) (fragment-list . 687)
            (:&next . 124) (<simple-begin-word> . 51) (<literal> . 123)
            (<fragment-begin-word> . 47) (:parsed-expression . 122)
            (<vector-open> . 121) (statement-or-method . 120)
            (<becomes> . 119) (<not> . 118) (statement . 117)
            (<defining-word> . 116) (<list-open> . 115)
            (implies-fragment . 114) (<var-type-sep> . 113)
            (<binary-operator> . 112) (<keyword> . 111)
            (:&all-keys . 110) (<implies> . 109)
            (simple-fragment . 108) (<lcbracket> . 106)
            (procedural-template . 105) (<symbol> . 104)
            (fragment-begin-word . 31) (<var-singleton-sep> . 103)
            (<dot> . 100) (<lsbracket> . 99) (:method . 27)
            (<lbracket> . 98) (begin-clause . 21)
            (<details-begin-word> . 20) (fragment-sequence . 97)
            (<query> . 96) (anonymous-method . 95)
            (<fragment-define-word> . 94) (:macro-case . 14)
            (:parsed-variable . 92) (<expr-begin-word> . 12)
            (:false . 91) (opt-fragment-sequence . 90)
            (<query-equal> . 89) (:parsed-case-body . 88)
            (:otherwise . 87) (:true . 86) (non-statement-etc . 85)
            (:&key . 84))
           (12 (<generic-function-defining-word> . 49)
            (<ellipsis> . 57) (:generic . 32)
            (<fragment-define-bindings-word> . 58) (<symbol> . 33)
            (generic-function-defining-word . 48) (:parsed-name . 65)
            (the-variable-name . 5) (<fragment-define-word> . 16)
            (<method-defining-word> . 4) (<defining-word> . 41)
            (:parsed-variable . 13) (variable-name . 325)
            (opt-variable-name . 480))
           (684 (<rbracket> . 685))
           (10 (operand . 70) (unary-operator . 69)
            (<fragment-function-word> . 67) (expression . 866)
            (:parsed-name . 65) (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (<not> . 43) (statement . 42)
            (<defining-word> . 41) (<list-open> . 39) (<keyword> . 220)
            (binary-operand-series . 219) (procedural-template . 34)
            (<symbol> . 33) (:generic . 32) (fragment-begin-word . 31)
            (:method . 27) (binary-operand . 218) (literal . 25)
            (<lbracket> . 23) (begin-clause . 21)
            (<details-begin-word> . 20) (anonymous-method . 17)
            (<fragment-define-word> . 16) (literal0 . 15)
            (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (:true . 2))
           (682 (<rsbracket> . 683)) (7 (<statement-sep> . 868))
           (680 (opt-<statement-sep> . 681) (<statement-sep> . 373))
           (677 (<rbracket> . 680)) (675 (<statement-sep> . 676))
           (1 (operand . 70) (unary-operator . 69)
            (<fragment-function-word> . 67) (expression . 870)
            (:parsed-name . 65) (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 221) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45) (<not> . 43) (statement . 42)
            (<defining-word> . 41) (<list-open> . 39) (<keyword> . 220)
            (binary-operand-series . 219) (defining-form . 869)
            (procedural-template . 34) (<symbol> . 33) (:generic . 32)
            (fragment-begin-word . 31) (:define . 30) (:method . 27)
            (binary-operand . 218) (literal . 25) (seal-word . 24)
            (<lbracket> . 23) (:parsed-defining-form . 22)
            (begin-clause . 21) (<details-begin-word> . 20)
            (anonymous-method . 17) (<fragment-define-word> . 16)
            (literal0 . 15) (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11) (variable-name . 9)
            (leaf . 8) (the-variable-name . 5)
            (<method-defining-word> . 4) (<seal-word> . 3) (:true . 2))
           (674 (<generic-function-defining-word> . 49)
            (<ellipsis> . 57) (positional-parameters . 339)
            (:generic . 32) (<fragment-define-bindings-word> . 58)
            (<symbol> . 33) (generic-function-defining-word . 48)
            (:&key . 338) (:parsed-name . 65) (return-type-list . 679)
            (parameters . 678) (the-variable-name . 5) (:&rest . 336)
            (<fragment-define-word> . 16) (<method-defining-word> . 4)
            (positional-parameter . 335) (<defining-word> . 41)
            (:&next . 333) (rest-parameters . 332) (:&all-keys . 331)
            (next-parameters . 330) (:parsed-variable . 13)
            (opt-return-type-list . 677) (rest-parameter . 329)
            (variable-name . 328) (keyword-parameters . 327)
            (next-parameter . 326))
           (0 (operand . 70) (unary-operator . 69)
            (:parsed-local-declaration . 68)
            (<fragment-function-word> . 67) (local-declaration . 66)
            (:parsed-name . 65) (<unary-operator> . 64) (<minus> . 63)
            (<fragment-define-and-begin-word> . 62)
            (keyless-binary-operand . 61) (function-macro-call . 60)
            (:parsed-statement . 59)
            (<fragment-define-bindings-word> . 58) (<ellipsis> . 57)
            (<fragment-define-bindings-and-begin-word> . 56)
            (:parsed-body . 55) (:parsed-literal . 54)
            (<syntax-open> . 53) (<string> . 52)
            (<simple-begin-word> . 51) (<literal> . 50)
            (<generic-function-defining-word> . 49)
            (generic-function-defining-word . 48)
            (<fragment-begin-word> . 47) (:parsed-expression . 46)
            (<vector-open> . 45)
            (<fragment-local-declaration-word> . 44) (<not> . 43)
            (statement . 42) (<defining-word> . 41)
            (:fragment-constraint . 40) (<list-open> . 39)
            (<keyword> . 38) (keyless-binary-operand-series . 37)
            (:case-body-constraint . 36) (defining-form . 35)
            (procedural-template . 34) (<symbol> . 33) (:generic . 32)
            (fragment-begin-word . 31) (:define . 30)
            (:body-constraint . 29) (:local . 28) (:method . 27)
            (:name-constraint . 26) (literal . 25) (seal-word . 24)
            (<lbracket> . 23) (:parsed-defining-form . 22)
            (begin-clause . 21) (<details-begin-word> . 20)
            (:variable-constraint . 19) (:let . 18)
            (anonymous-method . 17) (<fragment-define-word> . 16)
            (literal0 . 15) (:macro-case . 14) (:parsed-variable . 13)
            (<expr-begin-word> . 12) (:false . 11)
            (:expression-constraint . 10) (variable-name . 9)
            (leaf . 8) (keyless-expression . 7) (command . 6)
            (the-variable-name . 5) (<method-defining-word> . 4)
            (<seal-word> . 3) (:true . 2) (:macro-constraint . 1)))
          :action-function-table
          (vector |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION8|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION10|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION14|
                  |infix-dylan-parser-ACTION15|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION17|
                  |infix-dylan-parser-ACTION18|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION20|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION22|
                  |infix-dylan-parser-ACTION18|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION26|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION29|
                  |infix-dylan-parser-ACTION8|
                  |infix-dylan-parser-ACTION31|
                  |infix-dylan-parser-ACTION31|
                  |infix-dylan-parser-ACTION31|
                  |infix-dylan-parser-ACTION34|
                  |infix-dylan-parser-ACTION18|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION37|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION39|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION41|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION43|
                  |infix-dylan-parser-ACTION44|
                  |infix-dylan-parser-ACTION45|
                  |infix-dylan-parser-ACTION8|
                  |infix-dylan-parser-ACTION47|
                  |infix-dylan-parser-ACTION14|
                  |infix-dylan-parser-ACTION49|
                  |infix-dylan-parser-ACTION8|
                  |infix-dylan-parser-ACTION51|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION22|
                  |infix-dylan-parser-ACTION54|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION18|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION58|
                  |infix-dylan-parser-ACTION59|
                  |infix-dylan-parser-ACTION60|
                  |infix-dylan-parser-ACTION61|
                  |infix-dylan-parser-ACTION62|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION67|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION8|
                  |infix-dylan-parser-ACTION70|
                  |infix-dylan-parser-ACTION71|
                  |infix-dylan-parser-ACTION72|
                  |infix-dylan-parser-ACTION73|
                  |infix-dylan-parser-ACTION74|
                  |infix-dylan-parser-ACTION75|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION77|
                  |infix-dylan-parser-ACTION78|
                  |infix-dylan-parser-ACTION79|
                  |infix-dylan-parser-ACTION80|
                  |infix-dylan-parser-ACTION74|
                  |infix-dylan-parser-ACTION82|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION86|
                  |infix-dylan-parser-ACTION77|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION51|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION91|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION49|
                  |infix-dylan-parser-ACTION8|
                  |infix-dylan-parser-ACTION8|
                  |infix-dylan-parser-ACTION8|
                  |infix-dylan-parser-ACTION101|
                  |infix-dylan-parser-ACTION101|
                  |infix-dylan-parser-ACTION74|
                  |infix-dylan-parser-ACTION104|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION86|
                  |infix-dylan-parser-ACTION109|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION111|
                  |infix-dylan-parser-ACTION112|
                  |infix-dylan-parser-ACTION113|
                  |infix-dylan-parser-ACTION114|
                  |infix-dylan-parser-ACTION115|
                  |infix-dylan-parser-ACTION116|
                  |infix-dylan-parser-ACTION117|
                  |infix-dylan-parser-ACTION118|
                  |infix-dylan-parser-ACTION119|
                  |infix-dylan-parser-ACTION120|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION123|
                  |infix-dylan-parser-ACTION74|
                  |infix-dylan-parser-ACTION74|
                  |infix-dylan-parser-ACTION86|
                  |infix-dylan-parser-ACTION127|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION22|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION134|
                  |infix-dylan-parser-ACTION135|
                  |infix-dylan-parser-ACTION136|
                  |infix-dylan-parser-ACTION22|
                  |infix-dylan-parser-ACTION138|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION8|
                  |infix-dylan-parser-ACTION142|
                  |infix-dylan-parser-ACTION143|
                  |infix-dylan-parser-ACTION144|
                  |infix-dylan-parser-ACTION145|
                  |infix-dylan-parser-ACTION146|
                  |infix-dylan-parser-ACTION147|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION149|
                  |infix-dylan-parser-ACTION150|
                  |infix-dylan-parser-ACTION18|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION153|
                  |infix-dylan-parser-ACTION154|
                  |infix-dylan-parser-ACTION155|
                  |infix-dylan-parser-ACTION156|
                  |infix-dylan-parser-ACTION157|
                  |infix-dylan-parser-ACTION158|
                  |infix-dylan-parser-ACTION47|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION163|
                  |infix-dylan-parser-ACTION164|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION166|
                  |infix-dylan-parser-ACTION74|
                  |infix-dylan-parser-ACTION168|
                  |infix-dylan-parser-ACTION169|
                  |infix-dylan-parser-ACTION170|
                  |infix-dylan-parser-ACTION171|
                  |infix-dylan-parser-ACTION172|
                  |infix-dylan-parser-ACTION86|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION175|
                  |infix-dylan-parser-ACTION58|
                  |infix-dylan-parser-ACTION177|
                  |infix-dylan-parser-ACTION178|
                  |infix-dylan-parser-ACTION179|
                  |infix-dylan-parser-ACTION18|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION182|
                  |infix-dylan-parser-ACTION183|
                  |infix-dylan-parser-ACTION184|
                  |infix-dylan-parser-ACTION74|
                  |infix-dylan-parser-ACTION186|
                  |infix-dylan-parser-ACTION187|
                  |infix-dylan-parser-ACTION188|
                  |infix-dylan-parser-ACTION189|
                  |infix-dylan-parser-ACTION190|
                  |infix-dylan-parser-ACTION191|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION193|
                  |infix-dylan-parser-ACTION74|
                  |infix-dylan-parser-ACTION195|
                  |infix-dylan-parser-ACTION196|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION8|
                  |infix-dylan-parser-ACTION199|
                  |infix-dylan-parser-ACTION43|
                  |infix-dylan-parser-ACTION201|
                  |infix-dylan-parser-ACTION202|
                  |infix-dylan-parser-ACTION18|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION206|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION74|
                  |infix-dylan-parser-ACTION186|
                  |infix-dylan-parser-ACTION210|
                  |infix-dylan-parser-ACTION211|
                  |infix-dylan-parser-ACTION212|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION206|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION216|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION206|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION80|
                  |infix-dylan-parser-ACTION221|
                  |infix-dylan-parser-ACTION222|
                  |infix-dylan-parser-ACTION223|
                  |infix-dylan-parser-ACTION224|
                  |infix-dylan-parser-ACTION225|
                  |infix-dylan-parser-ACTION74|
                  |infix-dylan-parser-ACTION186|
                  |infix-dylan-parser-ACTION228|
                  |infix-dylan-parser-ACTION228|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION232|
                  |infix-dylan-parser-ACTION233|
                  |infix-dylan-parser-ACTION234|
                  |infix-dylan-parser-ACTION86|
                  |infix-dylan-parser-ACTION236|
                  |infix-dylan-parser-ACTION74|
                  |infix-dylan-parser-ACTION54|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION240|
                  |infix-dylan-parser-ACTION241|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION243|
                  |infix-dylan-parser-ACTION244|
                  |infix-dylan-parser-ACTION245|
                  |infix-dylan-parser-ACTION241|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION240|
                  |infix-dylan-parser-ACTION249|
                  |infix-dylan-parser-ACTION18|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION74|
                  |infix-dylan-parser-ACTION18|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION256|
                  |infix-dylan-parser-ACTION18|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION18|
                  |infix-dylan-parser-ACTION18|
                  |infix-dylan-parser-ACTION243|
                  |infix-dylan-parser-ACTION18|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION51|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION51|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION18|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION51|
                  |infix-dylan-parser-ACTION273|
                  |infix-dylan-parser-ACTION274|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION18|
                  |infix-dylan-parser-ACTION18|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION51|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION8|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION283|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION47|
                  |infix-dylan-parser-ACTION14|
                  |infix-dylan-parser-ACTION288|
                  |infix-dylan-parser-ACTION289|
                  |infix-dylan-parser-ACTION290|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION292|
                  |infix-dylan-parser-ACTION18|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION296|
                  |infix-dylan-parser-ACTION18|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION300|
                  |infix-dylan-parser-ACTION301|
                  |infix-dylan-parser-ACTION302|
                  |infix-dylan-parser-ACTION303|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION305|
                  |infix-dylan-parser-ACTION18|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION18|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION310|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION18|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION316|
                  |infix-dylan-parser-ACTION316|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION320|
                  |infix-dylan-parser-ACTION321|
                  |infix-dylan-parser-ACTION322|
                  |infix-dylan-parser-ACTION323|
                  |infix-dylan-parser-ACTION324|
                  |infix-dylan-parser-ACTION325|
                  |infix-dylan-parser-ACTION326|
                  |infix-dylan-parser-ACTION327|
                  |infix-dylan-parser-ACTION328|
                  |infix-dylan-parser-ACTION329|
                  |infix-dylan-parser-ACTION330|
                  |infix-dylan-parser-ACTION331|
                  |infix-dylan-parser-ACTION332|
                  |infix-dylan-parser-ACTION333|
                  |infix-dylan-parser-ACTION334|
                  |infix-dylan-parser-ACTION335|
                  |infix-dylan-parser-ACTION336|
                  |infix-dylan-parser-ACTION337|
                  |infix-dylan-parser-ACTION338|
                  |infix-dylan-parser-ACTION339|
                  |infix-dylan-parser-ACTION340|
                  |infix-dylan-parser-ACTION341|
                  |infix-dylan-parser-ACTION342|
                  |infix-dylan-parser-ACTION343|
                  |infix-dylan-parser-ACTION344|
                  |infix-dylan-parser-ACTION345|
                  |infix-dylan-parser-ACTION346|
                  |infix-dylan-parser-ACTION347|
                  |infix-dylan-parser-ACTION348|
                  |infix-dylan-parser-ACTION349|
                  |infix-dylan-parser-ACTION350|
                  |infix-dylan-parser-ACTION351|
                  |infix-dylan-parser-ACTION352|
                  |infix-dylan-parser-ACTION353|
                  |infix-dylan-parser-ACTION354|
                  |infix-dylan-parser-ACTION355|
                  |infix-dylan-parser-ACTION356|
                  |infix-dylan-parser-ACTION324|
                  |infix-dylan-parser-ACTION358|
                  |infix-dylan-parser-ACTION359|
                  |infix-dylan-parser-ACTION360|
                  |infix-dylan-parser-ACTION8|
                  |infix-dylan-parser-ACTION31|
                  |infix-dylan-parser-ACTION363|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION18|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION367|
                  |infix-dylan-parser-ACTION368|
                  |infix-dylan-parser-ACTION49|
                  |infix-dylan-parser-ACTION8|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION374|
                  |infix-dylan-parser-ACTION375|
                  |infix-dylan-parser-ACTION376|
                  |infix-dylan-parser-ACTION377|
                  |infix-dylan-parser-ACTION51|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION18|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION382|
                  |infix-dylan-parser-ACTION383|
                  |infix-dylan-parser-ACTION22|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION49|
                  |infix-dylan-parser-ACTION8|
                  |infix-dylan-parser-ACTION8|
                  |infix-dylan-parser-ACTION290|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION292|
                  |infix-dylan-parser-ACTION18|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION296|
                  |infix-dylan-parser-ACTION18|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION74|
                  |infix-dylan-parser-ACTION305|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION403|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION406|
                  |infix-dylan-parser-ACTION407|
                  |infix-dylan-parser-ACTION408|
                  |infix-dylan-parser-ACTION51|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION411|
                  |infix-dylan-parser-ACTION412|
                  |infix-dylan-parser-ACTION413|
                  |infix-dylan-parser-ACTION414|
                  |infix-dylan-parser-ACTION415|
                  |infix-dylan-parser-ACTION416|
                  |infix-dylan-parser-ACTION417|
                  |infix-dylan-parser-ACTION418|
                  |infix-dylan-parser-ACTION18|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION421|
                  |infix-dylan-parser-ACTION74|
                  |infix-dylan-parser-ACTION82|
                  |infix-dylan-parser-ACTION316|
                  |infix-dylan-parser-ACTION316|
                  |infix-dylan-parser-ACTION18|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION240|
                  |infix-dylan-parser-ACTION429|
                  |infix-dylan-parser-ACTION430|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION345|
                  |infix-dylan-parser-ACTION330|
                  |infix-dylan-parser-ACTION434|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION49|
                  |infix-dylan-parser-ACTION8|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION49|
                  |infix-dylan-parser-ACTION8|
                  |infix-dylan-parser-ACTION8|
                  |infix-dylan-parser-ACTION476|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION478|
                  |infix-dylan-parser-ACTION18|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION481|
                  |infix-dylan-parser-ACTION482|
                  |infix-dylan-parser-ACTION483|
                  |infix-dylan-parser-ACTION484|
                  |infix-dylan-parser-ACTION485|
                  |infix-dylan-parser-ACTION486|
                  |infix-dylan-parser-ACTION487|
                  |infix-dylan-parser-ACTION488|
                  |infix-dylan-parser-ACTION489|
                  |infix-dylan-parser-ACTION74|
                  |infix-dylan-parser-ACTION491|
                  |infix-dylan-parser-ACTION492|
                  |infix-dylan-parser-ACTION493|
                  |infix-dylan-parser-ACTION414|
                  |infix-dylan-parser-ACTION495|
                  |infix-dylan-parser-ACTION496|
                  |infix-dylan-parser-ACTION497|
                  |infix-dylan-parser-ACTION498|
                  |infix-dylan-parser-ACTION499|
                  |infix-dylan-parser-ACTION500|
                  |infix-dylan-parser-ACTION501|
                  |infix-dylan-parser-ACTION502|
                  |infix-dylan-parser-ACTION503|
                  |infix-dylan-parser-ACTION504|
                  |infix-dylan-parser-ACTION505|
                  |infix-dylan-parser-ACTION506|
                  |infix-dylan-parser-ACTION507|
                  |infix-dylan-parser-ACTION508|
                  |infix-dylan-parser-ACTION509|
                  |infix-dylan-parser-ACTION510|
                  |infix-dylan-parser-ACTION511|
                  |infix-dylan-parser-ACTION512|
                  |infix-dylan-parser-ACTION513|
                  |infix-dylan-parser-ACTION514|
                  |infix-dylan-parser-ACTION515|
                  |infix-dylan-parser-ACTION516|
                  |infix-dylan-parser-ACTION517|
                  |infix-dylan-parser-ACTION518|
                  |infix-dylan-parser-ACTION519|
                  |infix-dylan-parser-ACTION520|
                  |infix-dylan-parser-ACTION521|
                  |infix-dylan-parser-ACTION522|
                  |infix-dylan-parser-ACTION523|
                  |infix-dylan-parser-ACTION524|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION526|
                  |infix-dylan-parser-ACTION526|
                  |infix-dylan-parser-ACTION528|
                  |infix-dylan-parser-ACTION529|
                  |infix-dylan-parser-ACTION530|
                  |infix-dylan-parser-ACTION531|
                  |infix-dylan-parser-ACTION532|
                  |infix-dylan-parser-ACTION533|
                  |infix-dylan-parser-ACTION534|
                  |infix-dylan-parser-ACTION535|
                  |infix-dylan-parser-ACTION536|
                  |infix-dylan-parser-ACTION537|
                  |infix-dylan-parser-ACTION8|
                  |infix-dylan-parser-ACTION8|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION545|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION547|
                  |infix-dylan-parser-ACTION548|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION8|
                  |infix-dylan-parser-ACTION555|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION324|
                  |infix-dylan-parser-ACTION558|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION22|
                  |infix-dylan-parser-ACTION74|
                  |infix-dylan-parser-ACTION186|
                  |infix-dylan-parser-ACTION563|
                  |infix-dylan-parser-ACTION49|
                  |infix-dylan-parser-ACTION8|
                  |infix-dylan-parser-ACTION51|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION22|
                  |infix-dylan-parser-ACTION74|
                  |infix-dylan-parser-ACTION74|
                  |infix-dylan-parser-ACTION82|
                  |infix-dylan-parser-ACTION58|
                  |infix-dylan-parser-ACTION58|
                  |infix-dylan-parser-ACTION574|
                  |infix-dylan-parser-ACTION58|
                  |infix-dylan-parser-ACTION576|
                  |infix-dylan-parser-ACTION22|
                  |infix-dylan-parser-ACTION22|
                  |infix-dylan-parser-ACTION22|
                  |infix-dylan-parser-ACTION22|
                  |infix-dylan-parser-ACTION22|
                  |infix-dylan-parser-ACTION582|
                  |infix-dylan-parser-ACTION582|
                  |infix-dylan-parser-ACTION22|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION586|
                  |infix-dylan-parser-ACTION587|
                  |infix-dylan-parser-ACTION588|
                  |infix-dylan-parser-ACTION587|
                  |infix-dylan-parser-ACTION588|
                  |infix-dylan-parser-ACTION587|
                  |infix-dylan-parser-ACTION588|
                  |infix-dylan-parser-ACTION587|
                  |infix-dylan-parser-ACTION588|
                  |infix-dylan-parser-ACTION587|
                  |infix-dylan-parser-ACTION588|
                  |infix-dylan-parser-ACTION587|
                  |infix-dylan-parser-ACTION588|
                  |infix-dylan-parser-ACTION587|
                  |infix-dylan-parser-ACTION600|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION602|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION206|
                  |infix-dylan-parser-ACTION587|
                  |infix-dylan-parser-ACTION606|
                  |infix-dylan-parser-ACTION587|
                  |infix-dylan-parser-ACTION600|
                  |infix-dylan-parser-ACTION587|
                  |infix-dylan-parser-ACTION600|
                  |infix-dylan-parser-ACTION587|
                  |infix-dylan-parser-ACTION600|
                  |infix-dylan-parser-ACTION587|
                  |infix-dylan-parser-ACTION588|
                  |infix-dylan-parser-ACTION587|
                  |infix-dylan-parser-ACTION600|
                  |infix-dylan-parser-ACTION587|
                  |infix-dylan-parser-ACTION588|
                  |infix-dylan-parser-ACTION587|
                  |infix-dylan-parser-ACTION600|
                  |infix-dylan-parser-ACTION0|
                  |infix-dylan-parser-ACTION586|
                  |infix-dylan-parser-ACTION587|
                  |infix-dylan-parser-ACTION600|)
          :action-nargs-table
          '#(1 1 1 1 1 1 1 1 1 1 2 1 1 1 3 0 1 1 0 1 3 1 3 0 1 1 3 1 1
           3 1 4 4 4 4 0 1 1 1 1 1 1 1 5 3 4 1 2 3 0 1 0 1 3 0 1 0 1 2
           3 4 4 5 1 1 1 1 7 1 1 2 5 2 2 1 4 1 2 3 5 2 1 3 1 1 1 2 2 1
           0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 3 1 1 1 2 5 1 1 1 1 1 1 1 1 4
           4 3 1 1 4 1 1 2 1 1 3 1 1 1 1 1 1 5 3 3 1 1 1 3 3 3 6 1 0 1
           2 1 0 1 1 2 3 4 7 1 2 1 1 1 1 0 1 2 1 3 4 1 2 3 2 1 1 2 6 2
           3 0 1 2 1 4 1 3 2 4 4 6 0 1 1 1 2 2 1 1 4 5 5 4 0 1 1 3 1 1
           3 1 3 3 1 3 1 2 1 3 1 2 1 3 1 2 4 1 3 2 2 1 1 4 3 3 2 1 1 0
           1 2 0 1 1 3 5 0 1 2 4 0 1 1 1 0 1 0 0 1 1 0 0 1 0 1 0 1 0 1
           0 1 1 0 4 1 1 0 0 1 0 1 1 1 3 1 1 2 3 5 4 0 1 1 0 1 1 3 0 1
           1 1 2 1 2 1 3 0 1 0 1 2 1 1 1 0 1 2 2 1 1 3 3 3 4 1 1 1 1 1
           1 1 1 1 1 1 1 1 1 1 1 1 1 5 3 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1
           1 1 1 4 1 1 0 1 7 8 0 1 1 1 1 8 8 7 7 0 1 0 1 2 6 3 1 0 1 1
           0 1 1 0 1 1 3 0 1 1 1 3 1 1 3 1 1 3 3 5 0 1 3 3 3 2 1 2 5 2
           0 1 1 1 3 2 2 0 1 2 4 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
           1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1
           0 1 3 3 3 3 3 3 4 3 2 1 3 3 5 2 2 2 4 6 1 1 1 1 1 1 1 1 1 1
           1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
           1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 3 1 1 8 1 3 1 3 3 0 1 0 1 3
           1 1 3 2 2 4 2 3 3 3 3 3 3 3 3 3 1 2 1 2 1 2 1 2 1 2 1 2 1 2
           1 3 1 2 1 3 1 3 1 3 1 3 1 3 1 2 1 3 1 2 1 3 1 2 1 3)
          :action-nt-table
          '#(top-level fragment-define-word fragment-define-word
           fragment-define-bindings-word fragment-define-bindings-word
           fragment-begin-word fragment-begin-word fragment-begin-word
           marker-clause dylan-program body constituent constituent
           constituent marker-clause opt-property-list
           opt-property-list property-list opt-the-property-list
           opt-the-property-list property value value opt-property-set
           opt-property-set property-set-member property-set-member
           property-set-item property-set-item property-list-no-comma
           marker-clause defining-form defining-form defining-form
           defining-form opt-modifiers opt-modifiers modifiers modifier
           method-defining-word method-defining-word
           generic-function-defining-word
           generic-function-defining-word method-definition
           generic-function-definition definition end-definition
           end-definition end-definition opt-<defining-word>
           opt-<defining-word> opt-expression-list opt-expression-list
           expression-list opt-expressions opt-expressions
           opt-item-list opt-item-list item-list item item item item
           item-modifier item-modifier item-name item-name
           defining-form seal-word marker-clause local-declaration
           local-declaration local-declaration local-declaration
           condition condition handler local-method bindings bindings
           variables variables variables variable variable
           untyped-variable typed-variable type-designator type
           opt-variable-name opt-variable-name variable-name
           the-variable-name the-variable-name the-variable-name
           the-variable-name the-variable-name opt-method opt-method
           opt-method marker-clause expression keyless-expression
           keyless-binary-operand-series keyless-binary-operand-series
           binary-operand binary-operand keyless-binary-operand
           keyless-binary-operand location-list unary-operator
           unary-operator unary-operator binary-operator
           binary-operator binary-operator binary-operator
           binary-operator operand operand operand operand operand
           function-macro-call argument argument argument leaf leaf
           leaf leaf leaf literal literal literal literal literal
           literal literal constant constant marker-clause statement
           statement begin-clause begin-clause begin-clause
           opt-clause-body opt-clause-body clause-body clause-body
           opt-intermediate-clauses opt-intermediate-clauses
           intermediate-clauses the-intermediate-clauses
           the-intermediate-clauses intermediate-clause
           intermediate-clause intermediate-clause end-clause
           begin-word begin-word begin-word case-body opt-case-body
           opt-case-body the-case-body the-case-body intermediate-case
           intermediate-case intermediate-case-tail
           intermediate-case-tail intermediate-case-tail final-case
           final-case-body final-case-body case-label case-label
           case-label detail-info opt-detail-list opt-detail-list
           detail-list detail-list detail-list details details detail
           detail detail detail opt-detail-clauses opt-detail-clauses
           detail-clauses the-detail-clauses the-detail-clauses
           detail-clause detail-clause-word marker-clause
           anonymous-method named-method method-body
           generic-function-body opt-parameters opt-parameters
           parameters parameters parameters positional-parameters
           positional-parameters positional-parameter
           positional-parameter positional-parameter next-parameters
           next-parameters next-parameters next-parameter
           rest-parameters rest-parameters rest-parameters
           rest-parameter keyword-parameters keyword-parameters
           keyword-parameters keyword-parameters keyword-parameters
           keyword-parameter-list keyword-parameter-list
           keyword-parameter keyword-parameter keyword-variable
           keyword-variable typed-keyword-variable
           typed-keyword-variable typed-keyword-variable
           untyped-keyword-variable untyped-keyword-variable
           untyped-keyword-variable opt-default opt-default default
           opt-method-return-type opt-method-return-type
           method-return-type method-return-type method-return-type
           opt-generic-function-return-type
           opt-generic-function-return-type
           generic-function-return-type generic-function-return-type
           opt-return-type-list opt-return-type-list return-type-list
           opt-keyword opt-keyword opt-body opt-body opt-gf-parameters
           opt-gf-parameters opt-arguments opt-arguments
           opt-<statement-sep> opt-<statement-sep> opt-bare-literals
           opt-bare-literals opt-<implies> opt-<implies>
           opt-unary-operator opt-unary-operator opt-constants
           opt-constants opt-exit-symbol opt-exit-symbol
           opt-block-epilog opt-block-epilog opt-exception-clauses
           opt-exception-clauses opt-constituents opt-constituents
           opt-begin-word opt-begin-word marker-clause begin-word
           statement the-variable-name the-variable-name end-definition
           end-definition defining-form defining-form opt-fragment
           opt-fragment fragment opt-fragment-constituents
           opt-fragment-constituents fragment-constituents
           fragment-constituents opt-fragment-constituent
           opt-fragment-constituent fragment-constituent
           fragment-constituent fragment-constituent
           fragment-constituent fragment-constituent fragment-list
           fragment-list opt-fragment-list opt-fragment-list
           opt-fragment-sequence opt-fragment-sequence
           fragment-sequence fragment-sequence statement-or-method
           statement-or-method opt-non-statement-etc
           opt-non-statement-etc non-statement-etc non-statement-etc
           simple-fragment simple-fragment simple-fragment
           simple-fragment simple-fragment simple-fragment
           simple-fragment simple-fragment simple-fragment
           simple-fragment simple-fragment simple-fragment
           simple-fragment simple-fragment simple-fragment
           simple-fragment simple-fragment simple-fragment
           implies-fragment modified-constant modified-constant
           modified-constant modified-constant modified-constant
           modified-constant modified-constant modified-constant
           word-fragment word-fragment word-fragment word-fragment
           word-fragment word-fragment word-fragment word-fragment
           word-fragment word-fragment simple-fragment simple-fragment
           simple-fragment simple-fragment simple-fragment
           simple-fragment marker-clause defining-form
           macro-defining-word macro-defining-word opt-detail-info
           opt-detail-info macro-definition statement opt-macro-case
           opt-macro-case main-rule-set main-rule-set main-rule-set
           statement-rule define-rule define-rule
           function-or-local-declaration-rule opt-pattern-variable
           opt-pattern-variable opt-aux-rule-sets opt-aux-rule-sets
           aux-rule-set aux-rule rule-rhs rule-rhs opt-macro opt-macro
           marker-clause opt-pattern opt-pattern pattern
           opt-the-pattern opt-the-pattern the-pattern the-pattern
           opt-pattern-list opt-pattern-list pattern-list pattern-list
           pattern-list pattern-sequence simple-pattern simple-pattern
           simple-pattern simple-pattern simple-pattern simple-pattern
           simple-pattern opt-details-pattern opt-details-pattern
           details-pattern details-pattern details-pattern
           pattern-variable pattern-variable property-list-pattern
           property-list-pattern property-list-pattern
           opt-pattern-keywords opt-pattern-keywords pattern-keywords
           pattern-keywords pattern-keywords pattern-keyword
           pattern-keyword opt-pattern-keyword-default
           opt-pattern-keyword-default pattern-keyword-default
           pattern-keyword-default sequence-pattern-variable
           literal-pattern literal-pattern literal-pattern
           literal-pattern literal-pattern literal-pattern word word
           word word word word word word word word word word word word
           word word word word opt-word opt-word non-intermediate-word
           non-intermediate-word non-intermediate-word
           non-intermediate-word non-intermediate-word
           non-intermediate-word non-intermediate-word
           non-intermediate-word non-intermediate-word
           non-intermediate-word non-intermediate-word
           non-intermediate-word non-intermediate-word
           non-intermediate-word non-intermediate-word
           non-intermediate-word opt-non-intermediate-word
           opt-non-intermediate-word marker-clause opt-template
           opt-template template opt-replacement opt-replacement
           replacement-element replacement-element replacement-element
           replacement-element replacement-element replacement-element
           replacement-element replacement-element replacement-element
           replacement-element replacement-element replacement-element
           replacement-element spliceable-replacement
           spliceable-replacement spliceable-replacement
           replacement-element replacement-element replacement-element
           replacement-element replacement-element replacement-element
           replacement-element replacement-element replacement-element
           replacement-element replacement-element replacement-element
           replacement-element replacement-element replacement-element
           replacement-element replacement-element replacement-element
           replacement-element replacement-element replacement-element
           replacement-element replacement-element replacement-element
           replacement-element replacement-element replacement-element
           replacement-element replacement-element replacement-element
           replacement-element replacement-element replacement-element
           replacement-element separator separator separator separator
           separator separator separator marker-clause marker-clause
           leaf leaf variable-name word modifier variable-name
           detail-clause-word property argument literal constant
           defining-form local-declaration statement marker-clause
           procedural-template operand simple-fragment defining-form
           names names name-list name-list initial-clause-body
           opt-<clauses-defining-word> opt-<clauses-defining-word>
           opt-parameter-list opt-parameter-list parameter-list
           listener-constituents listener-constituents
           listener-constituents command command command command
           command command command command command command command
           command command replacement replacement the-pattern-sequence
           the-pattern-sequence aux-rules aux-rules aux-rule-sets
           aux-rule-sets main-rule-set3 main-rule-set3 main-rule-set2
           main-rule-set2 main-rule-set1 main-rule-set1 constants
           constants literal0 literal0 arguments arguments
           binary-operand-series binary-operand-series expressions
           expressions local-methods local-methods item-names
           item-names item-modifiers-and-word item-modifiers-and-word
           items items the-modifiers the-modifiers property-set
           property-set the-property-list the-property-list
           constituents constituents)
          :error-productions '#() :error-action-function-table (vector)
          :error-action-nt-table '#())))
;; eof
